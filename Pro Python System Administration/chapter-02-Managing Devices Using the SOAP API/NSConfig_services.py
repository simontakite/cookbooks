################################################## 
# NSConfig_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from NSConfig_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class NSConfigServiceLocator:
    NSConfigPort_address = "http://netscaler_ip/soap/"
    def getNSConfigPortAddress(self):
        return NSConfigServiceLocator.NSConfigPort_address
    def getNSConfigPort(self, url=None, **kw):
        return NSConfigBindingSOAP(url or NSConfigServiceLocator.NSConfigPort_address, **kw)

# Methods
class NSConfigBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: restartdbsmonitors
    def restartdbsmonitors(self, request):
        if isinstance(request, restartdbsmonitors) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=restartdbsmonitorsResponse.typecode.ofwhat, pyclass=restartdbsmonitorsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearlocationdata
    def clearlocationdata(self, request):
        if isinstance(request, clearlocationdata) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearlocationdataResponse.typecode.ofwhat, pyclass=clearlocationdataResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlocation
    def addlocation(self, request):
        if isinstance(request, addlocation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlocationResponse.typecode.ofwhat, pyclass=addlocationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlocation
    def rmlocation(self, request):
        if isinstance(request, rmlocation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlocationResponse.typecode.ofwhat, pyclass=rmlocationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlocation
    def getlocation(self, request):
        if isinstance(request, getlocation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlocationResponse.typecode.ofwhat, pyclass=getlocationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_context
    def setlocationparameter_context(self, request):
        if isinstance(request, setlocationparameter_context) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q1label
    def setlocationparameter_q1label(self, request):
        if isinstance(request, setlocationparameter_q1label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q2label
    def setlocationparameter_q2label(self, request):
        if isinstance(request, setlocationparameter_q2label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q3label
    def setlocationparameter_q3label(self, request):
        if isinstance(request, setlocationparameter_q3label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q4label
    def setlocationparameter_q4label(self, request):
        if isinstance(request, setlocationparameter_q4label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q5label
    def setlocationparameter_q5label(self, request):
        if isinstance(request, setlocationparameter_q5label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlocationparameter_q6label
    def setlocationparameter_q6label(self, request):
        if isinstance(request, setlocationparameter_q6label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlocationparameterResponse.typecode.ofwhat, pyclass=setlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_context
    def unsetlocationparameter_context(self, request):
        if isinstance(request, unsetlocationparameter_context) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q1label
    def unsetlocationparameter_q1label(self, request):
        if isinstance(request, unsetlocationparameter_q1label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q2label
    def unsetlocationparameter_q2label(self, request):
        if isinstance(request, unsetlocationparameter_q2label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q3label
    def unsetlocationparameter_q3label(self, request):
        if isinstance(request, unsetlocationparameter_q3label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q4label
    def unsetlocationparameter_q4label(self, request):
        if isinstance(request, unsetlocationparameter_q4label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q5label
    def unsetlocationparameter_q5label(self, request):
        if isinstance(request, unsetlocationparameter_q5label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlocationparameter_q6label
    def unsetlocationparameter_q6label(self, request):
        if isinstance(request, unsetlocationparameter_q6label) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlocationparameterResponse.typecode.ofwhat, pyclass=unsetlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlocationparameter
    def getlocationparameter(self, request):
        if isinstance(request, getlocationparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlocationparameterResponse.typecode.ofwhat, pyclass=getlocationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlocationfile
    def addlocationfile(self, request):
        if isinstance(request, addlocationfile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlocationfileResponse.typecode.ofwhat, pyclass=addlocationfileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlocationfile
    def rmlocationfile(self, request):
        if isinstance(request, rmlocationfile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlocationfileResponse.typecode.ofwhat, pyclass=rmlocationfileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlocationfile
    def getlocationfile(self, request):
        if isinstance(request, getlocationfile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlocationfileResponse.typecode.ofwhat, pyclass=getlocationfileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addserver
    def addserver(self, request):
        if isinstance(request, addserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addserverResponse.typecode.ofwhat, pyclass=addserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmserver
    def rmserver(self, request):
        if isinstance(request, rmserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmserverResponse.typecode.ofwhat, pyclass=rmserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setserver_ipaddress
    def setserver_ipaddress(self, request):
        if isinstance(request, setserver_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserverResponse.typecode.ofwhat, pyclass=setserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setserver_domainresolveretry
    def setserver_domainresolveretry(self, request):
        if isinstance(request, setserver_domainresolveretry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserverResponse.typecode.ofwhat, pyclass=setserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setserver_translationip
    def setserver_translationip(self, request):
        if isinstance(request, setserver_translationip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserverResponse.typecode.ofwhat, pyclass=setserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setserver_translationmask
    def setserver_translationmask(self, request):
        if isinstance(request, setserver_translationmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserverResponse.typecode.ofwhat, pyclass=setserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setserver_domainresolvenow
    def setserver_domainresolvenow(self, request):
        if isinstance(request, setserver_domainresolvenow) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserverResponse.typecode.ofwhat, pyclass=setserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enableserver
    def enableserver(self, request):
        if isinstance(request, enableserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enableserverResponse.typecode.ofwhat, pyclass=enableserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disableserver
    def disableserver(self, request):
        if isinstance(request, disableserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disableserverResponse.typecode.ofwhat, pyclass=disableserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getserver
    def getserver(self, request):
        if isinstance(request, getserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getserverResponse.typecode.ofwhat, pyclass=getserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addservice
    def addservice(self, request):
        if isinstance(request, addservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addserviceResponse.typecode.ofwhat, pyclass=addserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmservice
    def rmservice(self, request):
        if isinstance(request, rmservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmserviceResponse.typecode.ofwhat, pyclass=rmserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_ipaddress
    def setservice_ipaddress(self, request):
        if isinstance(request, setservice_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_maxclient
    def setservice_maxclient(self, request):
        if isinstance(request, setservice_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_maxreq
    def setservice_maxreq(self, request):
        if isinstance(request, setservice_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_cacheable
    def setservice_cacheable(self, request):
        if isinstance(request, setservice_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_cip
    def setservice_cip(self, request):
        if isinstance(request, setservice_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_usip
    def setservice_usip(self, request):
        if isinstance(request, setservice_usip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_useproxyport
    def setservice_useproxyport(self, request):
        if isinstance(request, setservice_useproxyport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_sc
    def setservice_sc(self, request):
        if isinstance(request, setservice_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_sp
    def setservice_sp(self, request):
        if isinstance(request, setservice_sp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_clttimeout
    def setservice_clttimeout(self, request):
        if isinstance(request, setservice_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_svrtimeout
    def setservice_svrtimeout(self, request):
        if isinstance(request, setservice_svrtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_serverid
    def setservice_serverid(self, request):
        if isinstance(request, setservice_serverid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_cka
    def setservice_cka(self, request):
        if isinstance(request, setservice_cka) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_tcpb
    def setservice_tcpb(self, request):
        if isinstance(request, setservice_tcpb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_cmp
    def setservice_cmp(self, request):
        if isinstance(request, setservice_cmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_maxbandwidth
    def setservice_maxbandwidth(self, request):
        if isinstance(request, setservice_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_accessdown
    def setservice_accessdown(self, request):
        if isinstance(request, setservice_accessdown) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_monthreshold
    def setservice_monthreshold(self, request):
        if isinstance(request, setservice_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_weight
    def setservice_weight(self, request):
        if isinstance(request, setservice_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservice_downstateflush
    def setservice_downstateflush(self, request):
        if isinstance(request, setservice_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setserviceResponse.typecode.ofwhat, pyclass=setserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_maxclient
    def unsetservice_maxclient(self, request):
        if isinstance(request, unsetservice_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_maxreq
    def unsetservice_maxreq(self, request):
        if isinstance(request, unsetservice_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_cacheable
    def unsetservice_cacheable(self, request):
        if isinstance(request, unsetservice_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_cip
    def unsetservice_cip(self, request):
        if isinstance(request, unsetservice_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_usip
    def unsetservice_usip(self, request):
        if isinstance(request, unsetservice_usip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_useproxyport
    def unsetservice_useproxyport(self, request):
        if isinstance(request, unsetservice_useproxyport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_sc
    def unsetservice_sc(self, request):
        if isinstance(request, unsetservice_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_sp
    def unsetservice_sp(self, request):
        if isinstance(request, unsetservice_sp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_serverid
    def unsetservice_serverid(self, request):
        if isinstance(request, unsetservice_serverid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_cka
    def unsetservice_cka(self, request):
        if isinstance(request, unsetservice_cka) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_tcpb
    def unsetservice_tcpb(self, request):
        if isinstance(request, unsetservice_tcpb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_cmp
    def unsetservice_cmp(self, request):
        if isinstance(request, unsetservice_cmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_maxbandwidth
    def unsetservice_maxbandwidth(self, request):
        if isinstance(request, unsetservice_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_accessdown
    def unsetservice_accessdown(self, request):
        if isinstance(request, unsetservice_accessdown) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_monthreshold
    def unsetservice_monthreshold(self, request):
        if isinstance(request, unsetservice_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_clttimeout
    def unsetservice_clttimeout(self, request):
        if isinstance(request, unsetservice_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_svrtimeout
    def unsetservice_svrtimeout(self, request):
        if isinstance(request, unsetservice_svrtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_cipheader
    def unsetservice_cipheader(self, request):
        if isinstance(request, unsetservice_cipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_monitorname
    def unsetservice_monitorname(self, request):
        if isinstance(request, unsetservice_monitorname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservice_downstateflush
    def unsetservice_downstateflush(self, request):
        if isinstance(request, unsetservice_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetserviceResponse.typecode.ofwhat, pyclass=unsetserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindservice_policy
    def bindservice_policy(self, request):
        if isinstance(request, bindservice_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindserviceResponse.typecode.ofwhat, pyclass=bindserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindservice_policy
    def unbindservice_policy(self, request):
        if isinstance(request, unbindservice_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindserviceResponse.typecode.ofwhat, pyclass=unbindserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enableservice
    def enableservice(self, request):
        if isinstance(request, enableservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enableserviceResponse.typecode.ofwhat, pyclass=enableserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disableservice
    def disableservice(self, request):
        if isinstance(request, disableservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disableserviceResponse.typecode.ofwhat, pyclass=disableserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getservice
    def getservice(self, request):
        if isinstance(request, getservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getserviceResponse.typecode.ofwhat, pyclass=getserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addservicegroup
    def addservicegroup(self, request):
        if isinstance(request, addservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addservicegroupResponse.typecode.ofwhat, pyclass=addservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmservicegroup
    def rmservicegroup(self, request):
        if isinstance(request, rmservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmservicegroupResponse.typecode.ofwhat, pyclass=rmservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_server
    def setservicegroup_server(self, request):
        if isinstance(request, setservicegroup_server) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_maxclient
    def setservicegroup_maxclient(self, request):
        if isinstance(request, setservicegroup_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_maxreq
    def setservicegroup_maxreq(self, request):
        if isinstance(request, setservicegroup_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_cacheable
    def setservicegroup_cacheable(self, request):
        if isinstance(request, setservicegroup_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_cip
    def setservicegroup_cip(self, request):
        if isinstance(request, setservicegroup_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_usip
    def setservicegroup_usip(self, request):
        if isinstance(request, setservicegroup_usip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_useproxyport
    def setservicegroup_useproxyport(self, request):
        if isinstance(request, setservicegroup_useproxyport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_sc
    def setservicegroup_sc(self, request):
        if isinstance(request, setservicegroup_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_sp
    def setservicegroup_sp(self, request):
        if isinstance(request, setservicegroup_sp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_clttimeout
    def setservicegroup_clttimeout(self, request):
        if isinstance(request, setservicegroup_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_svrtimeout
    def setservicegroup_svrtimeout(self, request):
        if isinstance(request, setservicegroup_svrtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_cka
    def setservicegroup_cka(self, request):
        if isinstance(request, setservicegroup_cka) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_tcpb
    def setservicegroup_tcpb(self, request):
        if isinstance(request, setservicegroup_tcpb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_cmp
    def setservicegroup_cmp(self, request):
        if isinstance(request, setservicegroup_cmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_maxbandwidth
    def setservicegroup_maxbandwidth(self, request):
        if isinstance(request, setservicegroup_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_monthreshold
    def setservicegroup_monthreshold(self, request):
        if isinstance(request, setservicegroup_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setservicegroup_downstateflush
    def setservicegroup_downstateflush(self, request):
        if isinstance(request, setservicegroup_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setservicegroupResponse.typecode.ofwhat, pyclass=setservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_servername
    def unsetservicegroup_servername(self, request):
        if isinstance(request, unsetservicegroup_servername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_port
    def unsetservicegroup_port(self, request):
        if isinstance(request, unsetservicegroup_port) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_weight
    def unsetservicegroup_weight(self, request):
        if isinstance(request, unsetservicegroup_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_serverid
    def unsetservicegroup_serverid(self, request):
        if isinstance(request, unsetservicegroup_serverid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_maxclient
    def unsetservicegroup_maxclient(self, request):
        if isinstance(request, unsetservicegroup_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_maxreq
    def unsetservicegroup_maxreq(self, request):
        if isinstance(request, unsetservicegroup_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_cacheable
    def unsetservicegroup_cacheable(self, request):
        if isinstance(request, unsetservicegroup_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_cip
    def unsetservicegroup_cip(self, request):
        if isinstance(request, unsetservicegroup_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_cipheader
    def unsetservicegroup_cipheader(self, request):
        if isinstance(request, unsetservicegroup_cipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_usip
    def unsetservicegroup_usip(self, request):
        if isinstance(request, unsetservicegroup_usip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_useproxyport
    def unsetservicegroup_useproxyport(self, request):
        if isinstance(request, unsetservicegroup_useproxyport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_sc
    def unsetservicegroup_sc(self, request):
        if isinstance(request, unsetservicegroup_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_sp
    def unsetservicegroup_sp(self, request):
        if isinstance(request, unsetservicegroup_sp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_clttimeout
    def unsetservicegroup_clttimeout(self, request):
        if isinstance(request, unsetservicegroup_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_svrtimeout
    def unsetservicegroup_svrtimeout(self, request):
        if isinstance(request, unsetservicegroup_svrtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_cka
    def unsetservicegroup_cka(self, request):
        if isinstance(request, unsetservicegroup_cka) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_tcpb
    def unsetservicegroup_tcpb(self, request):
        if isinstance(request, unsetservicegroup_tcpb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_cmp
    def unsetservicegroup_cmp(self, request):
        if isinstance(request, unsetservicegroup_cmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_maxbandwidth
    def unsetservicegroup_maxbandwidth(self, request):
        if isinstance(request, unsetservicegroup_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_monthreshold
    def unsetservicegroup_monthreshold(self, request):
        if isinstance(request, unsetservicegroup_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetservicegroup_downstateflush
    def unsetservicegroup_downstateflush(self, request):
        if isinstance(request, unsetservicegroup_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetservicegroupResponse.typecode.ofwhat, pyclass=unsetservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindservicegroup_ip
    def bindservicegroup_ip(self, request):
        if isinstance(request, bindservicegroup_ip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindservicegroupResponse.typecode.ofwhat, pyclass=bindservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindservicegroup_ip
    def unbindservicegroup_ip(self, request):
        if isinstance(request, unbindservicegroup_ip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindservicegroupResponse.typecode.ofwhat, pyclass=unbindservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enableservicegroup
    def enableservicegroup(self, request):
        if isinstance(request, enableservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enableservicegroupResponse.typecode.ofwhat, pyclass=enableservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disableservicegroup
    def disableservicegroup(self, request):
        if isinstance(request, disableservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disableservicegroupResponse.typecode.ofwhat, pyclass=disableservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getservicegroup
    def getservicegroup(self, request):
        if isinstance(request, getservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getservicegroupResponse.typecode.ofwhat, pyclass=getservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvserver
    def addvserver(self, request):
        if isinstance(request, addvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvserverResponse.typecode.ofwhat, pyclass=addvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvserver
    def rmvserver(self, request):
        if isinstance(request, rmvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvserverResponse.typecode.ofwhat, pyclass=rmvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvserver_backupvserver
    def setvserver_backupvserver(self, request):
        if isinstance(request, setvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvserverResponse.typecode.ofwhat, pyclass=setvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_backupvserver
    def unsetvserver_backupvserver(self, request):
        if isinstance(request, unsetvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_redirecturl
    def unsetvserver_redirecturl(self, request):
        if isinstance(request, unsetvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_redirecturl2
    def unsetvserver_redirecturl2(self, request):
        if isinstance(request, unsetvserver_redirecturl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_cacheable
    def unsetvserver_cacheable(self, request):
        if isinstance(request, unsetvserver_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_clttimeout
    def unsetvserver_clttimeout(self, request):
        if isinstance(request, unsetvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_somethod
    def unsetvserver_somethod(self, request):
        if isinstance(request, unsetvserver_somethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_sopersistence
    def unsetvserver_sopersistence(self, request):
        if isinstance(request, unsetvserver_sopersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_sopersistencetimeout
    def unsetvserver_sopersistencetimeout(self, request):
        if isinstance(request, unsetvserver_sopersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvserver_sothreshold
    def unsetvserver_sothreshold(self, request):
        if isinstance(request, unsetvserver_sothreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvserverResponse.typecode.ofwhat, pyclass=unsetvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablevserver
    def enablevserver(self, request):
        if isinstance(request, enablevserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablevserverResponse.typecode.ofwhat, pyclass=enablevserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablevserver
    def disablevserver(self, request):
        if isinstance(request, disablevserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablevserverResponse.typecode.ofwhat, pyclass=disablevserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvserver
    def getvserver(self, request):
        if isinstance(request, getvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvserverResponse.typecode.ofwhat, pyclass=getvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaasession
    def getaaasession(self, request):
        if isinstance(request, getaaasession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaasessionResponse.typecode.ofwhat, pyclass=getaaasessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: killaaasession
    def killaaasession(self, request):
        if isinstance(request, killaaasession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=killaaasessionResponse.typecode.ofwhat, pyclass=killaaasessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addaaauser
    def addaaauser(self, request):
        if isinstance(request, addaaauser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addaaauserResponse.typecode.ofwhat, pyclass=addaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmaaauser
    def rmaaauser(self, request):
        if isinstance(request, rmaaauser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmaaauserResponse.typecode.ofwhat, pyclass=rmaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaauser_password
    def setaaauser_password(self, request):
        if isinstance(request, setaaauser_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaauserResponse.typecode.ofwhat, pyclass=setaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaauser_policy
    def bindaaauser_policy(self, request):
        if isinstance(request, bindaaauser_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaauserResponse.typecode.ofwhat, pyclass=bindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaauser_intranetapplication
    def bindaaauser_intranetapplication(self, request):
        if isinstance(request, bindaaauser_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaauserResponse.typecode.ofwhat, pyclass=bindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaauser_url
    def bindaaauser_url(self, request):
        if isinstance(request, bindaaauser_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaauserResponse.typecode.ofwhat, pyclass=bindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaauser_intranetip
    def bindaaauser_intranetip(self, request):
        if isinstance(request, bindaaauser_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaauserResponse.typecode.ofwhat, pyclass=bindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaauser_policy
    def unbindaaauser_policy(self, request):
        if isinstance(request, unbindaaauser_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaauserResponse.typecode.ofwhat, pyclass=unbindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaauser_intranetapplication
    def unbindaaauser_intranetapplication(self, request):
        if isinstance(request, unbindaaauser_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaauserResponse.typecode.ofwhat, pyclass=unbindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaauser_url
    def unbindaaauser_url(self, request):
        if isinstance(request, unbindaaauser_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaauserResponse.typecode.ofwhat, pyclass=unbindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaauser_intranetip
    def unbindaaauser_intranetip(self, request):
        if isinstance(request, unbindaaauser_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaauserResponse.typecode.ofwhat, pyclass=unbindaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaauser
    def getaaauser(self, request):
        if isinstance(request, getaaauser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaauserResponse.typecode.ofwhat, pyclass=getaaauserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addaaagroup
    def addaaagroup(self, request):
        if isinstance(request, addaaagroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addaaagroupResponse.typecode.ofwhat, pyclass=addaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmaaagroup
    def rmaaagroup(self, request):
        if isinstance(request, rmaaagroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmaaagroupResponse.typecode.ofwhat, pyclass=rmaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaagroup_user
    def bindaaagroup_user(self, request):
        if isinstance(request, bindaaagroup_user) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaagroupResponse.typecode.ofwhat, pyclass=bindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaagroup_policy
    def bindaaagroup_policy(self, request):
        if isinstance(request, bindaaagroup_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaagroupResponse.typecode.ofwhat, pyclass=bindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaagroup_intranetapplication
    def bindaaagroup_intranetapplication(self, request):
        if isinstance(request, bindaaagroup_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaagroupResponse.typecode.ofwhat, pyclass=bindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaagroup_url
    def bindaaagroup_url(self, request):
        if isinstance(request, bindaaagroup_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaagroupResponse.typecode.ofwhat, pyclass=bindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaagroup_intranetip
    def bindaaagroup_intranetip(self, request):
        if isinstance(request, bindaaagroup_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaagroupResponse.typecode.ofwhat, pyclass=bindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaagroup_user
    def unbindaaagroup_user(self, request):
        if isinstance(request, unbindaaagroup_user) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaagroupResponse.typecode.ofwhat, pyclass=unbindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaagroup_policy
    def unbindaaagroup_policy(self, request):
        if isinstance(request, unbindaaagroup_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaagroupResponse.typecode.ofwhat, pyclass=unbindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaagroup_intranetapplication
    def unbindaaagroup_intranetapplication(self, request):
        if isinstance(request, unbindaaagroup_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaagroupResponse.typecode.ofwhat, pyclass=unbindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaagroup_url
    def unbindaaagroup_url(self, request):
        if isinstance(request, unbindaaagroup_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaagroupResponse.typecode.ofwhat, pyclass=unbindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaagroup_intranetip
    def unbindaaagroup_intranetip(self, request):
        if isinstance(request, unbindaaagroup_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaagroupResponse.typecode.ofwhat, pyclass=unbindaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaagroup
    def getaaagroup(self, request):
        if isinstance(request, getaaagroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaagroupResponse.typecode.ofwhat, pyclass=getaaagroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_serverip
    def setaaaradiusparams_serverip(self, request):
        if isinstance(request, setaaaradiusparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_serverport
    def setaaaradiusparams_serverport(self, request):
        if isinstance(request, setaaaradiusparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_authtimeout
    def setaaaradiusparams_authtimeout(self, request):
        if isinstance(request, setaaaradiusparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radkey
    def setaaaradiusparams_radkey(self, request):
        if isinstance(request, setaaaradiusparams_radkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radnasip
    def setaaaradiusparams_radnasip(self, request):
        if isinstance(request, setaaaradiusparams_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radnasid
    def setaaaradiusparams_radnasid(self, request):
        if isinstance(request, setaaaradiusparams_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radvendorid
    def setaaaradiusparams_radvendorid(self, request):
        if isinstance(request, setaaaradiusparams_radvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radattributetype
    def setaaaradiusparams_radattributetype(self, request):
        if isinstance(request, setaaaradiusparams_radattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radgroupsprefix
    def setaaaradiusparams_radgroupsprefix(self, request):
        if isinstance(request, setaaaradiusparams_radgroupsprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_radgroupseparator
    def setaaaradiusparams_radgroupseparator(self, request):
        if isinstance(request, setaaaradiusparams_radgroupseparator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_passencoding
    def setaaaradiusparams_passencoding(self, request):
        if isinstance(request, setaaaradiusparams_passencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_ipvendorid
    def setaaaradiusparams_ipvendorid(self, request):
        if isinstance(request, setaaaradiusparams_ipvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_ipattributetype
    def setaaaradiusparams_ipattributetype(self, request):
        if isinstance(request, setaaaradiusparams_ipattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaradiusparams_accounting
    def setaaaradiusparams_accounting(self, request):
        if isinstance(request, setaaaradiusparams_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaradiusparamsResponse.typecode.ofwhat, pyclass=setaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_serverip
    def unsetaaaradiusparams_serverip(self, request):
        if isinstance(request, unsetaaaradiusparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_serverport
    def unsetaaaradiusparams_serverport(self, request):
        if isinstance(request, unsetaaaradiusparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_authtimeout
    def unsetaaaradiusparams_authtimeout(self, request):
        if isinstance(request, unsetaaaradiusparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radnasip
    def unsetaaaradiusparams_radnasip(self, request):
        if isinstance(request, unsetaaaradiusparams_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radnasid
    def unsetaaaradiusparams_radnasid(self, request):
        if isinstance(request, unsetaaaradiusparams_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radvendorid
    def unsetaaaradiusparams_radvendorid(self, request):
        if isinstance(request, unsetaaaradiusparams_radvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radattributetype
    def unsetaaaradiusparams_radattributetype(self, request):
        if isinstance(request, unsetaaaradiusparams_radattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radgroupsprefix
    def unsetaaaradiusparams_radgroupsprefix(self, request):
        if isinstance(request, unsetaaaradiusparams_radgroupsprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_radgroupseparator
    def unsetaaaradiusparams_radgroupseparator(self, request):
        if isinstance(request, unsetaaaradiusparams_radgroupseparator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_passencoding
    def unsetaaaradiusparams_passencoding(self, request):
        if isinstance(request, unsetaaaradiusparams_passencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_ipvendorid
    def unsetaaaradiusparams_ipvendorid(self, request):
        if isinstance(request, unsetaaaradiusparams_ipvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_ipattributetype
    def unsetaaaradiusparams_ipattributetype(self, request):
        if isinstance(request, unsetaaaradiusparams_ipattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaradiusparams_accounting
    def unsetaaaradiusparams_accounting(self, request):
        if isinstance(request, unsetaaaradiusparams_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaradiusparamsResponse.typecode.ofwhat, pyclass=unsetaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaaradiusparams
    def getaaaradiusparams(self, request):
        if isinstance(request, getaaaradiusparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaaradiusparamsResponse.typecode.ofwhat, pyclass=getaaaradiusparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_serverip
    def setaaaldapparams_serverip(self, request):
        if isinstance(request, setaaaldapparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_serverport
    def setaaaldapparams_serverport(self, request):
        if isinstance(request, setaaaldapparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_authtimeout
    def setaaaldapparams_authtimeout(self, request):
        if isinstance(request, setaaaldapparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_ldapbase
    def setaaaldapparams_ldapbase(self, request):
        if isinstance(request, setaaaldapparams_ldapbase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_ldapbinddn
    def setaaaldapparams_ldapbinddn(self, request):
        if isinstance(request, setaaaldapparams_ldapbinddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_ldapbinddnpassword
    def setaaaldapparams_ldapbinddnpassword(self, request):
        if isinstance(request, setaaaldapparams_ldapbinddnpassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_ldaploginname
    def setaaaldapparams_ldaploginname(self, request):
        if isinstance(request, setaaaldapparams_ldaploginname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_searchfilter
    def setaaaldapparams_searchfilter(self, request):
        if isinstance(request, setaaaldapparams_searchfilter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_groupattrname
    def setaaaldapparams_groupattrname(self, request):
        if isinstance(request, setaaaldapparams_groupattrname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_subattributename
    def setaaaldapparams_subattributename(self, request):
        if isinstance(request, setaaaldapparams_subattributename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_sectype
    def setaaaldapparams_sectype(self, request):
        if isinstance(request, setaaaldapparams_sectype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaldapparams_ssonameattribute
    def setaaaldapparams_ssonameattribute(self, request):
        if isinstance(request, setaaaldapparams_ssonameattribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaldapparamsResponse.typecode.ofwhat, pyclass=setaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_serverip
    def unsetaaaldapparams_serverip(self, request):
        if isinstance(request, unsetaaaldapparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_serverport
    def unsetaaaldapparams_serverport(self, request):
        if isinstance(request, unsetaaaldapparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_authtimeout
    def unsetaaaldapparams_authtimeout(self, request):
        if isinstance(request, unsetaaaldapparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_ldapbase
    def unsetaaaldapparams_ldapbase(self, request):
        if isinstance(request, unsetaaaldapparams_ldapbase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_ldapbinddn
    def unsetaaaldapparams_ldapbinddn(self, request):
        if isinstance(request, unsetaaaldapparams_ldapbinddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_ldapbinddnpassword
    def unsetaaaldapparams_ldapbinddnpassword(self, request):
        if isinstance(request, unsetaaaldapparams_ldapbinddnpassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_ldaploginname
    def unsetaaaldapparams_ldaploginname(self, request):
        if isinstance(request, unsetaaaldapparams_ldaploginname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_searchfilter
    def unsetaaaldapparams_searchfilter(self, request):
        if isinstance(request, unsetaaaldapparams_searchfilter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_groupattrname
    def unsetaaaldapparams_groupattrname(self, request):
        if isinstance(request, unsetaaaldapparams_groupattrname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_subattributename
    def unsetaaaldapparams_subattributename(self, request):
        if isinstance(request, unsetaaaldapparams_subattributename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_sectype
    def unsetaaaldapparams_sectype(self, request):
        if isinstance(request, unsetaaaldapparams_sectype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaldapparams_ssonameattribute
    def unsetaaaldapparams_ssonameattribute(self, request):
        if isinstance(request, unsetaaaldapparams_ssonameattribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaldapparamsResponse.typecode.ofwhat, pyclass=unsetaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaaldapparams
    def getaaaldapparams(self, request):
        if isinstance(request, getaaaldapparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaaldapparamsResponse.typecode.ofwhat, pyclass=getaaaldapparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_serverip
    def setaaatacacsparams_serverip(self, request):
        if isinstance(request, setaaatacacsparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_serverport
    def setaaatacacsparams_serverport(self, request):
        if isinstance(request, setaaatacacsparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_authtimeout
    def setaaatacacsparams_authtimeout(self, request):
        if isinstance(request, setaaatacacsparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_tacacssecret
    def setaaatacacsparams_tacacssecret(self, request):
        if isinstance(request, setaaatacacsparams_tacacssecret) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_authorization
    def setaaatacacsparams_authorization(self, request):
        if isinstance(request, setaaatacacsparams_authorization) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaatacacsparams_accounting
    def setaaatacacsparams_accounting(self, request):
        if isinstance(request, setaaatacacsparams_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaatacacsparamsResponse.typecode.ofwhat, pyclass=setaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_serverip
    def unsetaaatacacsparams_serverip(self, request):
        if isinstance(request, unsetaaatacacsparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_serverport
    def unsetaaatacacsparams_serverport(self, request):
        if isinstance(request, unsetaaatacacsparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_authtimeout
    def unsetaaatacacsparams_authtimeout(self, request):
        if isinstance(request, unsetaaatacacsparams_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_tacacssecret
    def unsetaaatacacsparams_tacacssecret(self, request):
        if isinstance(request, unsetaaatacacsparams_tacacssecret) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_authorization
    def unsetaaatacacsparams_authorization(self, request):
        if isinstance(request, unsetaaatacacsparams_authorization) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaatacacsparams_accounting
    def unsetaaatacacsparams_accounting(self, request):
        if isinstance(request, unsetaaatacacsparams_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaatacacsparamsResponse.typecode.ofwhat, pyclass=unsetaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaatacacsparams
    def getaaatacacsparams(self, request):
        if isinstance(request, getaaatacacsparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaatacacsparamsResponse.typecode.ofwhat, pyclass=getaaatacacsparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaant4params_serverip
    def setaaant4params_serverip(self, request):
        if isinstance(request, setaaant4params_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaant4paramsResponse.typecode.ofwhat, pyclass=setaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaant4params_nt4servername
    def setaaant4params_nt4servername(self, request):
        if isinstance(request, setaaant4params_nt4servername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaant4paramsResponse.typecode.ofwhat, pyclass=setaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaant4params_nt4domainname
    def setaaant4params_nt4domainname(self, request):
        if isinstance(request, setaaant4params_nt4domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaant4paramsResponse.typecode.ofwhat, pyclass=setaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaant4params_nt4adminuser
    def setaaant4params_nt4adminuser(self, request):
        if isinstance(request, setaaant4params_nt4adminuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaant4paramsResponse.typecode.ofwhat, pyclass=setaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaant4params_nt4adminpasswd
    def setaaant4params_nt4adminpasswd(self, request):
        if isinstance(request, setaaant4params_nt4adminpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaant4paramsResponse.typecode.ofwhat, pyclass=setaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaant4params_serverip
    def unsetaaant4params_serverip(self, request):
        if isinstance(request, unsetaaant4params_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaant4paramsResponse.typecode.ofwhat, pyclass=unsetaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaant4params_nt4servername
    def unsetaaant4params_nt4servername(self, request):
        if isinstance(request, unsetaaant4params_nt4servername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaant4paramsResponse.typecode.ofwhat, pyclass=unsetaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaant4params_nt4domainname
    def unsetaaant4params_nt4domainname(self, request):
        if isinstance(request, unsetaaant4params_nt4domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaant4paramsResponse.typecode.ofwhat, pyclass=unsetaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaant4params_nt4adminuser
    def unsetaaant4params_nt4adminuser(self, request):
        if isinstance(request, unsetaaant4params_nt4adminuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaant4paramsResponse.typecode.ofwhat, pyclass=unsetaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaant4params_nt4adminpasswd
    def unsetaaant4params_nt4adminpasswd(self, request):
        if isinstance(request, unsetaaant4params_nt4adminpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaant4paramsResponse.typecode.ofwhat, pyclass=unsetaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaant4params
    def getaaant4params(self, request):
        if isinstance(request, getaaant4params) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaant4paramsResponse.typecode.ofwhat, pyclass=getaaant4paramsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaacertparams_usernamefield
    def setaaacertparams_usernamefield(self, request):
        if isinstance(request, setaaacertparams_usernamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaacertparamsResponse.typecode.ofwhat, pyclass=setaaacertparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaacertparams_groupnamefield
    def setaaacertparams_groupnamefield(self, request):
        if isinstance(request, setaaacertparams_groupnamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaacertparamsResponse.typecode.ofwhat, pyclass=setaaacertparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaacertparams_usernamefield
    def unsetaaacertparams_usernamefield(self, request):
        if isinstance(request, unsetaaacertparams_usernamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaacertparamsResponse.typecode.ofwhat, pyclass=unsetaaacertparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaacertparams_groupnamefield
    def unsetaaacertparams_groupnamefield(self, request):
        if isinstance(request, unsetaaacertparams_groupnamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaacertparamsResponse.typecode.ofwhat, pyclass=unsetaaacertparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaacertparams
    def getaaacertparams(self, request):
        if isinstance(request, getaaacertparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaacertparamsResponse.typecode.ofwhat, pyclass=getaaacertparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaparameter_defaultauthtype
    def setaaaparameter_defaultauthtype(self, request):
        if isinstance(request, setaaaparameter_defaultauthtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaparameterResponse.typecode.ofwhat, pyclass=setaaaparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaaparameter_maxaaausers
    def setaaaparameter_maxaaausers(self, request):
        if isinstance(request, setaaaparameter_maxaaausers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaaparameterResponse.typecode.ofwhat, pyclass=setaaaparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaparameter_defaultauthtype
    def unsetaaaparameter_defaultauthtype(self, request):
        if isinstance(request, unsetaaaparameter_defaultauthtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaparameterResponse.typecode.ofwhat, pyclass=unsetaaaparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaaparameter_maxaaausers
    def unsetaaaparameter_maxaaausers(self, request):
        if isinstance(request, unsetaaaparameter_maxaaausers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaaparameterResponse.typecode.ofwhat, pyclass=unsetaaaparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaaparameter
    def getaaaparameter(self, request):
        if isinstance(request, getaaaparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaaparameterResponse.typecode.ofwhat, pyclass=getaaaparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addaaapreauthenticationaction
    def addaaapreauthenticationaction(self, request):
        if isinstance(request, addaaapreauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=addaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmaaapreauthenticationaction
    def rmaaapreauthenticationaction(self, request):
        if isinstance(request, rmaaapreauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=rmaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationaction_preauthenticationaction
    def setaaapreauthenticationaction_preauthenticationaction(self, request):
        if isinstance(request, setaaapreauthenticationaction_preauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=setaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationaction_killprocess
    def setaaapreauthenticationaction_killprocess(self, request):
        if isinstance(request, setaaapreauthenticationaction_killprocess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=setaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationaction_deletefiles
    def setaaapreauthenticationaction_deletefiles(self, request):
        if isinstance(request, setaaapreauthenticationaction_deletefiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=setaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationaction_killprocess
    def unsetaaapreauthenticationaction_killprocess(self, request):
        if isinstance(request, unsetaaapreauthenticationaction_killprocess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationaction_deletefiles
    def unsetaaapreauthenticationaction_deletefiles(self, request):
        if isinstance(request, unsetaaapreauthenticationaction_deletefiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaapreauthenticationaction
    def getaaapreauthenticationaction(self, request):
        if isinstance(request, getaaapreauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaapreauthenticationactionResponse.typecode.ofwhat, pyclass=getaaapreauthenticationactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addaaapreauthenticationpolicy
    def addaaapreauthenticationpolicy(self, request):
        if isinstance(request, addaaapreauthenticationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addaaapreauthenticationpolicyResponse.typecode.ofwhat, pyclass=addaaapreauthenticationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmaaapreauthenticationpolicy
    def rmaaapreauthenticationpolicy(self, request):
        if isinstance(request, rmaaapreauthenticationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmaaapreauthenticationpolicyResponse.typecode.ofwhat, pyclass=rmaaapreauthenticationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationpolicy_rule
    def setaaapreauthenticationpolicy_rule(self, request):
        if isinstance(request, setaaapreauthenticationpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationpolicyResponse.typecode.ofwhat, pyclass=setaaapreauthenticationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationpolicy_reqaction
    def setaaapreauthenticationpolicy_reqaction(self, request):
        if isinstance(request, setaaapreauthenticationpolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationpolicyResponse.typecode.ofwhat, pyclass=setaaapreauthenticationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaapreauthenticationpolicy
    def getaaapreauthenticationpolicy(self, request):
        if isinstance(request, getaaapreauthenticationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaapreauthenticationpolicyResponse.typecode.ofwhat, pyclass=getaaapreauthenticationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationparameter_preauthenticationaction
    def setaaapreauthenticationparameter_preauthenticationaction(self, request):
        if isinstance(request, setaaapreauthenticationparameter_preauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=setaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationparameter_rule
    def setaaapreauthenticationparameter_rule(self, request):
        if isinstance(request, setaaapreauthenticationparameter_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=setaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationparameter_killprocess
    def setaaapreauthenticationparameter_killprocess(self, request):
        if isinstance(request, setaaapreauthenticationparameter_killprocess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=setaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setaaapreauthenticationparameter_deletefiles
    def setaaapreauthenticationparameter_deletefiles(self, request):
        if isinstance(request, setaaapreauthenticationparameter_deletefiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=setaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationparameter_rule
    def unsetaaapreauthenticationparameter_rule(self, request):
        if isinstance(request, unsetaaapreauthenticationparameter_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationparameter_preauthenticationaction
    def unsetaaapreauthenticationparameter_preauthenticationaction(self, request):
        if isinstance(request, unsetaaapreauthenticationparameter_preauthenticationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationparameter_killprocess
    def unsetaaapreauthenticationparameter_killprocess(self, request):
        if isinstance(request, unsetaaapreauthenticationparameter_killprocess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetaaapreauthenticationparameter_deletefiles
    def unsetaaapreauthenticationparameter_deletefiles(self, request):
        if isinstance(request, unsetaaapreauthenticationparameter_deletefiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=unsetaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaapreauthenticationparameter
    def getaaapreauthenticationparameter(self, request):
        if isinstance(request, getaaapreauthenticationparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaapreauthenticationparameterResponse.typecode.ofwhat, pyclass=getaaapreauthenticationparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindaaaglobal_policy
    def bindaaaglobal_policy(self, request):
        if isinstance(request, bindaaaglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindaaaglobalResponse.typecode.ofwhat, pyclass=bindaaaglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindaaaglobal_policy
    def unbindaaaglobal_policy(self, request):
        if isinstance(request, unbindaaaglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindaaaglobalResponse.typecode.ofwhat, pyclass=unbindaaaglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getaaaglobal
    def getaaaglobal(self, request):
        if isinstance(request, getaaaglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getaaaglobalResponse.typecode.ofwhat, pyclass=getaaaglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addappfwfieldtype
    def addappfwfieldtype(self, request):
        if isinstance(request, addappfwfieldtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addappfwfieldtypeResponse.typecode.ofwhat, pyclass=addappfwfieldtypeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmappfwfieldtype
    def rmappfwfieldtype(self, request):
        if isinstance(request, rmappfwfieldtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmappfwfieldtypeResponse.typecode.ofwhat, pyclass=rmappfwfieldtypeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwfieldtype_regex
    def setappfwfieldtype_regex(self, request):
        if isinstance(request, setappfwfieldtype_regex) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwfieldtypeResponse.typecode.ofwhat, pyclass=setappfwfieldtypeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwfieldtype
    def getappfwfieldtype(self, request):
        if isinstance(request, getappfwfieldtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwfieldtypeResponse.typecode.ofwhat, pyclass=getappfwfieldtypeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwsettings_sessiontimeout
    def setappfwsettings_sessiontimeout(self, request):
        if isinstance(request, setappfwsettings_sessiontimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwsettingsResponse.typecode.ofwhat, pyclass=setappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwsettings_sessioncookie
    def setappfwsettings_sessioncookie(self, request):
        if isinstance(request, setappfwsettings_sessioncookie) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwsettingsResponse.typecode.ofwhat, pyclass=setappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwsettings_clientiploggingheader
    def setappfwsettings_clientiploggingheader(self, request):
        if isinstance(request, setappfwsettings_clientiploggingheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwsettingsResponse.typecode.ofwhat, pyclass=setappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwsettings_sessiontimeout
    def unsetappfwsettings_sessiontimeout(self, request):
        if isinstance(request, unsetappfwsettings_sessiontimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwsettingsResponse.typecode.ofwhat, pyclass=unsetappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwsettings_sessioncookiename
    def unsetappfwsettings_sessioncookiename(self, request):
        if isinstance(request, unsetappfwsettings_sessioncookiename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwsettingsResponse.typecode.ofwhat, pyclass=unsetappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwsettings_clientiploggingheader
    def unsetappfwsettings_clientiploggingheader(self, request):
        if isinstance(request, unsetappfwsettings_clientiploggingheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwsettingsResponse.typecode.ofwhat, pyclass=unsetappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwsettings
    def getappfwsettings(self, request):
        if isinstance(request, getappfwsettings) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwsettingsResponse.typecode.ofwhat, pyclass=getappfwsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addappfwprofile
    def addappfwprofile(self, request):
        if isinstance(request, addappfwprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addappfwprofileResponse.typecode.ofwhat, pyclass=addappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmappfwprofile
    def rmappfwprofile(self, request):
        if isinstance(request, rmappfwprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmappfwprofileResponse.typecode.ofwhat, pyclass=rmappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_starturlaction
    def setappfwprofile_starturlaction(self, request):
        if isinstance(request, setappfwprofile_starturlaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_starturlclosure
    def setappfwprofile_starturlclosure(self, request):
        if isinstance(request, setappfwprofile_starturlclosure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_denyurlaction
    def setappfwprofile_denyurlaction(self, request):
        if isinstance(request, setappfwprofile_denyurlaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_cookieconsistencyaction
    def setappfwprofile_cookieconsistencyaction(self, request):
        if isinstance(request, setappfwprofile_cookieconsistencyaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_fieldconsistencyaction
    def setappfwprofile_fieldconsistencyaction(self, request):
        if isinstance(request, setappfwprofile_fieldconsistencyaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_crosssitescriptingaction
    def setappfwprofile_crosssitescriptingaction(self, request):
        if isinstance(request, setappfwprofile_crosssitescriptingaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_crosssitescriptingtransformunsafehtml
    def setappfwprofile_crosssitescriptingtransformunsafehtml(self, request):
        if isinstance(request, setappfwprofile_crosssitescriptingtransformunsafehtml) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_crosssitescriptingcheckcompleteurls
    def setappfwprofile_crosssitescriptingcheckcompleteurls(self, request):
        if isinstance(request, setappfwprofile_crosssitescriptingcheckcompleteurls) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_sqlinjectionaction
    def setappfwprofile_sqlinjectionaction(self, request):
        if isinstance(request, setappfwprofile_sqlinjectionaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_sqlinjectiontransformspecialchars
    def setappfwprofile_sqlinjectiontransformspecialchars(self, request):
        if isinstance(request, setappfwprofile_sqlinjectiontransformspecialchars) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars
    def setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars(self, request):
        if isinstance(request, setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_fieldformataction
    def setappfwprofile_fieldformataction(self, request):
        if isinstance(request, setappfwprofile_fieldformataction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_defaultfieldformattype
    def setappfwprofile_defaultfieldformattype(self, request):
        if isinstance(request, setappfwprofile_defaultfieldformattype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_defaultfieldformatminlength
    def setappfwprofile_defaultfieldformatminlength(self, request):
        if isinstance(request, setappfwprofile_defaultfieldformatminlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_defaultfieldformatmaxlength
    def setappfwprofile_defaultfieldformatmaxlength(self, request):
        if isinstance(request, setappfwprofile_defaultfieldformatmaxlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_bufferoverflowaction
    def setappfwprofile_bufferoverflowaction(self, request):
        if isinstance(request, setappfwprofile_bufferoverflowaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_bufferoverflowmaxurllength
    def setappfwprofile_bufferoverflowmaxurllength(self, request):
        if isinstance(request, setappfwprofile_bufferoverflowmaxurllength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_bufferoverflowmaxheaderlength
    def setappfwprofile_bufferoverflowmaxheaderlength(self, request):
        if isinstance(request, setappfwprofile_bufferoverflowmaxheaderlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_bufferoverflowmaxcookielength
    def setappfwprofile_bufferoverflowmaxcookielength(self, request):
        if isinstance(request, setappfwprofile_bufferoverflowmaxcookielength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_creditcardaction
    def setappfwprofile_creditcardaction(self, request):
        if isinstance(request, setappfwprofile_creditcardaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_creditcard
    def setappfwprofile_creditcard(self, request):
        if isinstance(request, setappfwprofile_creditcard) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_creditcardmaxallowed
    def setappfwprofile_creditcardmaxallowed(self, request):
        if isinstance(request, setappfwprofile_creditcardmaxallowed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_creditcardxout
    def setappfwprofile_creditcardxout(self, request):
        if isinstance(request, setappfwprofile_creditcardxout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_errorurl
    def setappfwprofile_errorurl(self, request):
        if isinstance(request, setappfwprofile_errorurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_stripcomments
    def setappfwprofile_stripcomments(self, request):
        if isinstance(request, setappfwprofile_stripcomments) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_defaultcharset
    def setappfwprofile_defaultcharset(self, request):
        if isinstance(request, setappfwprofile_defaultcharset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_postbodylimit
    def setappfwprofile_postbodylimit(self, request):
        if isinstance(request, setappfwprofile_postbodylimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_canonicalizehtmlresponse
    def setappfwprofile_canonicalizehtmlresponse(self, request):
        if isinstance(request, setappfwprofile_canonicalizehtmlresponse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_enableformtagging
    def setappfwprofile_enableformtagging(self, request):
        if isinstance(request, setappfwprofile_enableformtagging) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_excludefileuploadfromchecks
    def setappfwprofile_excludefileuploadfromchecks(self, request):
        if isinstance(request, setappfwprofile_excludefileuploadfromchecks) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwprofile_sqlinjectionparsecomments
    def setappfwprofile_sqlinjectionparsecomments(self, request):
        if isinstance(request, setappfwprofile_sqlinjectionparsecomments) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwprofileResponse.typecode.ofwhat, pyclass=setappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_starturlaction
    def unsetappfwprofile_starturlaction(self, request):
        if isinstance(request, unsetappfwprofile_starturlaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_starturlclosure
    def unsetappfwprofile_starturlclosure(self, request):
        if isinstance(request, unsetappfwprofile_starturlclosure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_denyurlaction
    def unsetappfwprofile_denyurlaction(self, request):
        if isinstance(request, unsetappfwprofile_denyurlaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_cookieconsistencyaction
    def unsetappfwprofile_cookieconsistencyaction(self, request):
        if isinstance(request, unsetappfwprofile_cookieconsistencyaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_fieldconsistencyaction
    def unsetappfwprofile_fieldconsistencyaction(self, request):
        if isinstance(request, unsetappfwprofile_fieldconsistencyaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_crosssitescriptingaction
    def unsetappfwprofile_crosssitescriptingaction(self, request):
        if isinstance(request, unsetappfwprofile_crosssitescriptingaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_crosssitescriptingtransformunsafehtml
    def unsetappfwprofile_crosssitescriptingtransformunsafehtml(self, request):
        if isinstance(request, unsetappfwprofile_crosssitescriptingtransformunsafehtml) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_crosssitescriptingcheckcompleteurls
    def unsetappfwprofile_crosssitescriptingcheckcompleteurls(self, request):
        if isinstance(request, unsetappfwprofile_crosssitescriptingcheckcompleteurls) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_sqlinjectionaction
    def unsetappfwprofile_sqlinjectionaction(self, request):
        if isinstance(request, unsetappfwprofile_sqlinjectionaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_sqlinjectiontransformspecialchars
    def unsetappfwprofile_sqlinjectiontransformspecialchars(self, request):
        if isinstance(request, unsetappfwprofile_sqlinjectiontransformspecialchars) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars
    def unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars(self, request):
        if isinstance(request, unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_fieldformataction
    def unsetappfwprofile_fieldformataction(self, request):
        if isinstance(request, unsetappfwprofile_fieldformataction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_defaultfieldformattype
    def unsetappfwprofile_defaultfieldformattype(self, request):
        if isinstance(request, unsetappfwprofile_defaultfieldformattype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_defaultfieldformatminlength
    def unsetappfwprofile_defaultfieldformatminlength(self, request):
        if isinstance(request, unsetappfwprofile_defaultfieldformatminlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_defaultfieldformatmaxlength
    def unsetappfwprofile_defaultfieldformatmaxlength(self, request):
        if isinstance(request, unsetappfwprofile_defaultfieldformatmaxlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_bufferoverflowaction
    def unsetappfwprofile_bufferoverflowaction(self, request):
        if isinstance(request, unsetappfwprofile_bufferoverflowaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_bufferoverflowmaxurllength
    def unsetappfwprofile_bufferoverflowmaxurllength(self, request):
        if isinstance(request, unsetappfwprofile_bufferoverflowmaxurllength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_bufferoverflowmaxheaderlength
    def unsetappfwprofile_bufferoverflowmaxheaderlength(self, request):
        if isinstance(request, unsetappfwprofile_bufferoverflowmaxheaderlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_bufferoverflowmaxcookielength
    def unsetappfwprofile_bufferoverflowmaxcookielength(self, request):
        if isinstance(request, unsetappfwprofile_bufferoverflowmaxcookielength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_creditcardaction
    def unsetappfwprofile_creditcardaction(self, request):
        if isinstance(request, unsetappfwprofile_creditcardaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_creditcard
    def unsetappfwprofile_creditcard(self, request):
        if isinstance(request, unsetappfwprofile_creditcard) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_creditcardmaxallowed
    def unsetappfwprofile_creditcardmaxallowed(self, request):
        if isinstance(request, unsetappfwprofile_creditcardmaxallowed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_creditcardxout
    def unsetappfwprofile_creditcardxout(self, request):
        if isinstance(request, unsetappfwprofile_creditcardxout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_errorurl
    def unsetappfwprofile_errorurl(self, request):
        if isinstance(request, unsetappfwprofile_errorurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_stripcomments
    def unsetappfwprofile_stripcomments(self, request):
        if isinstance(request, unsetappfwprofile_stripcomments) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_defaultcharset
    def unsetappfwprofile_defaultcharset(self, request):
        if isinstance(request, unsetappfwprofile_defaultcharset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_postbodylimit
    def unsetappfwprofile_postbodylimit(self, request):
        if isinstance(request, unsetappfwprofile_postbodylimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_canonicalizehtmlresponse
    def unsetappfwprofile_canonicalizehtmlresponse(self, request):
        if isinstance(request, unsetappfwprofile_canonicalizehtmlresponse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_enableformtagging
    def unsetappfwprofile_enableformtagging(self, request):
        if isinstance(request, unsetappfwprofile_enableformtagging) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_excludefileuploadfromchecks
    def unsetappfwprofile_excludefileuploadfromchecks(self, request):
        if isinstance(request, unsetappfwprofile_excludefileuploadfromchecks) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwprofile_sqlinjectionparsecomments
    def unsetappfwprofile_sqlinjectionparsecomments(self, request):
        if isinstance(request, unsetappfwprofile_sqlinjectionparsecomments) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwprofileResponse.typecode.ofwhat, pyclass=unsetappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_starturl
    def bindappfwprofile_starturl(self, request):
        if isinstance(request, bindappfwprofile_starturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_denyurl
    def bindappfwprofile_denyurl(self, request):
        if isinstance(request, bindappfwprofile_denyurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_fieldconsistency
    def bindappfwprofile_fieldconsistency(self, request):
        if isinstance(request, bindappfwprofile_fieldconsistency) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_cookieconsistency
    def bindappfwprofile_cookieconsistency(self, request):
        if isinstance(request, bindappfwprofile_cookieconsistency) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_sqlinjection
    def bindappfwprofile_sqlinjection(self, request):
        if isinstance(request, bindappfwprofile_sqlinjection) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_crosssitescripting
    def bindappfwprofile_crosssitescripting(self, request):
        if isinstance(request, bindappfwprofile_crosssitescripting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_fieldformat
    def bindappfwprofile_fieldformat(self, request):
        if isinstance(request, bindappfwprofile_fieldformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_safeobject
    def bindappfwprofile_safeobject(self, request):
        if isinstance(request, bindappfwprofile_safeobject) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_comment
    def bindappfwprofile_comment(self, request):
        if isinstance(request, bindappfwprofile_comment) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwprofile_state
    def bindappfwprofile_state(self, request):
        if isinstance(request, bindappfwprofile_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwprofileResponse.typecode.ofwhat, pyclass=bindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_starturl
    def unbindappfwprofile_starturl(self, request):
        if isinstance(request, unbindappfwprofile_starturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_denyurl
    def unbindappfwprofile_denyurl(self, request):
        if isinstance(request, unbindappfwprofile_denyurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_fieldconsistency
    def unbindappfwprofile_fieldconsistency(self, request):
        if isinstance(request, unbindappfwprofile_fieldconsistency) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_cookieconsistency
    def unbindappfwprofile_cookieconsistency(self, request):
        if isinstance(request, unbindappfwprofile_cookieconsistency) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_sqlinjection
    def unbindappfwprofile_sqlinjection(self, request):
        if isinstance(request, unbindappfwprofile_sqlinjection) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_crosssitescripting
    def unbindappfwprofile_crosssitescripting(self, request):
        if isinstance(request, unbindappfwprofile_crosssitescripting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_fieldformat
    def unbindappfwprofile_fieldformat(self, request):
        if isinstance(request, unbindappfwprofile_fieldformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwprofile_safeobject
    def unbindappfwprofile_safeobject(self, request):
        if isinstance(request, unbindappfwprofile_safeobject) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwprofileResponse.typecode.ofwhat, pyclass=unbindappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwprofile
    def getappfwprofile(self, request):
        if isinstance(request, getappfwprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwprofileResponse.typecode.ofwhat, pyclass=getappfwprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addappfwpolicy
    def addappfwpolicy(self, request):
        if isinstance(request, addappfwpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addappfwpolicyResponse.typecode.ofwhat, pyclass=addappfwpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmappfwpolicy
    def rmappfwpolicy(self, request):
        if isinstance(request, rmappfwpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmappfwpolicyResponse.typecode.ofwhat, pyclass=rmappfwpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwpolicy_rule
    def setappfwpolicy_rule(self, request):
        if isinstance(request, setappfwpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwpolicyResponse.typecode.ofwhat, pyclass=setappfwpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwpolicy
    def getappfwpolicy(self, request):
        if isinstance(request, getappfwpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwpolicyResponse.typecode.ofwhat, pyclass=getappfwpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindappfwglobal_policy
    def bindappfwglobal_policy(self, request):
        if isinstance(request, bindappfwglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindappfwglobalResponse.typecode.ofwhat, pyclass=bindappfwglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindappfwglobal_policy
    def unbindappfwglobal_policy(self, request):
        if isinstance(request, unbindappfwglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindappfwglobalResponse.typecode.ofwhat, pyclass=unbindappfwglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwglobal
    def getappfwglobal(self, request):
        if isinstance(request, getappfwglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwglobalResponse.typecode.ofwhat, pyclass=getappfwglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_starturlminthreshold
    def setappfwlearningsettings_starturlminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_starturlminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_starturlpercentthreshold
    def setappfwlearningsettings_starturlpercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_starturlpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_cookieconsistencyminthreshold
    def setappfwlearningsettings_cookieconsistencyminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_cookieconsistencyminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_cookieconsistencypercentthreshold
    def setappfwlearningsettings_cookieconsistencypercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_cookieconsistencypercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_fieldconsistencyminthreshold
    def setappfwlearningsettings_fieldconsistencyminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_fieldconsistencyminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_fieldconsistencypercentthreshold
    def setappfwlearningsettings_fieldconsistencypercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_fieldconsistencypercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_crosssitescriptingminthreshold
    def setappfwlearningsettings_crosssitescriptingminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_crosssitescriptingminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_crosssitescriptingpercentthreshold
    def setappfwlearningsettings_crosssitescriptingpercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_crosssitescriptingpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_sqlinjectionminthreshold
    def setappfwlearningsettings_sqlinjectionminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_sqlinjectionminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_sqlinjectionpercentthreshold
    def setappfwlearningsettings_sqlinjectionpercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_sqlinjectionpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_fieldformatminthreshold
    def setappfwlearningsettings_fieldformatminthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_fieldformatminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwlearningsettings_fieldformatpercentthreshold
    def setappfwlearningsettings_fieldformatpercentthreshold(self, request):
        if isinstance(request, setappfwlearningsettings_fieldformatpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwlearningsettingsResponse.typecode.ofwhat, pyclass=setappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_starturlminthreshold
    def unsetappfwlearningsettings_starturlminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_starturlminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_starturlpercentthreshold
    def unsetappfwlearningsettings_starturlpercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_starturlpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_cookieconsistencyminthreshold
    def unsetappfwlearningsettings_cookieconsistencyminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_cookieconsistencyminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_cookieconsistencypercentthreshold
    def unsetappfwlearningsettings_cookieconsistencypercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_cookieconsistencypercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_fieldconsistencyminthreshold
    def unsetappfwlearningsettings_fieldconsistencyminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_fieldconsistencyminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_fieldconsistencypercentthreshold
    def unsetappfwlearningsettings_fieldconsistencypercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_fieldconsistencypercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_crosssitescriptingminthreshold
    def unsetappfwlearningsettings_crosssitescriptingminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_crosssitescriptingminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_crosssitescriptingpercentthreshold
    def unsetappfwlearningsettings_crosssitescriptingpercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_crosssitescriptingpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_sqlinjectionminthreshold
    def unsetappfwlearningsettings_sqlinjectionminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_sqlinjectionminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_sqlinjectionpercentthreshold
    def unsetappfwlearningsettings_sqlinjectionpercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_sqlinjectionpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_fieldformatminthreshold
    def unsetappfwlearningsettings_fieldformatminthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_fieldformatminthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwlearningsettings_fieldformatpercentthreshold
    def unsetappfwlearningsettings_fieldformatpercentthreshold(self, request):
        if isinstance(request, unsetappfwlearningsettings_fieldformatpercentthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwlearningsettingsResponse.typecode.ofwhat, pyclass=unsetappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwlearningsettings
    def getappfwlearningsettings(self, request):
        if isinstance(request, getappfwlearningsettings) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwlearningsettingsResponse.typecode.ofwhat, pyclass=getappfwlearningsettingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmappfwlearningdata
    def rmappfwlearningdata(self, request):
        if isinstance(request, rmappfwlearningdata) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmappfwlearningdataResponse.typecode.ofwhat, pyclass=rmappfwlearningdataResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwlearningdata
    def getappfwlearningdata(self, request):
        if isinstance(request, getappfwlearningdata) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwlearningdataResponse.typecode.ofwhat, pyclass=getappfwlearningdataResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addappfwconfidfield
    def addappfwconfidfield(self, request):
        if isinstance(request, addappfwconfidfield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addappfwconfidfieldResponse.typecode.ofwhat, pyclass=addappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmappfwconfidfield
    def rmappfwconfidfield(self, request):
        if isinstance(request, rmappfwconfidfield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmappfwconfidfieldResponse.typecode.ofwhat, pyclass=rmappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwconfidfield_comment
    def setappfwconfidfield_comment(self, request):
        if isinstance(request, setappfwconfidfield_comment) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwconfidfieldResponse.typecode.ofwhat, pyclass=setappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setappfwconfidfield_state
    def setappfwconfidfield_state(self, request):
        if isinstance(request, setappfwconfidfield_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setappfwconfidfieldResponse.typecode.ofwhat, pyclass=setappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwconfidfield_comment
    def unsetappfwconfidfield_comment(self, request):
        if isinstance(request, unsetappfwconfidfield_comment) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwconfidfieldResponse.typecode.ofwhat, pyclass=unsetappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetappfwconfidfield_state
    def unsetappfwconfidfield_state(self, request):
        if isinstance(request, unsetappfwconfidfield_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetappfwconfidfieldResponse.typecode.ofwhat, pyclass=unsetappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getappfwconfidfield
    def getappfwconfidfield(self, request):
        if isinstance(request, getappfwconfidfield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getappfwconfidfieldResponse.typecode.ofwhat, pyclass=getappfwconfidfieldResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditmessages
    def getauditmessages(self, request):
        if isinstance(request, getauditmessages) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditmessagesResponse.typecode.ofwhat, pyclass=getauditmessagesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauditsyslogaction
    def addauditsyslogaction(self, request):
        if isinstance(request, addauditsyslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauditsyslogactionResponse.typecode.ofwhat, pyclass=addauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauditsyslogaction
    def rmauditsyslogaction(self, request):
        if isinstance(request, rmauditsyslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauditsyslogactionResponse.typecode.ofwhat, pyclass=rmauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_serverip
    def setauditsyslogaction_serverip(self, request):
        if isinstance(request, setauditsyslogaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_serverport
    def setauditsyslogaction_serverport(self, request):
        if isinstance(request, setauditsyslogaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_loglevel
    def setauditsyslogaction_loglevel(self, request):
        if isinstance(request, setauditsyslogaction_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_dateformat
    def setauditsyslogaction_dateformat(self, request):
        if isinstance(request, setauditsyslogaction_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_logfacility
    def setauditsyslogaction_logfacility(self, request):
        if isinstance(request, setauditsyslogaction_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_tcp
    def setauditsyslogaction_tcp(self, request):
        if isinstance(request, setauditsyslogaction_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogaction_timezone
    def setauditsyslogaction_timezone(self, request):
        if isinstance(request, setauditsyslogaction_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogactionResponse.typecode.ofwhat, pyclass=setauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_serverport
    def unsetauditsyslogaction_serverport(self, request):
        if isinstance(request, unsetauditsyslogaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_loglevel
    def unsetauditsyslogaction_loglevel(self, request):
        if isinstance(request, unsetauditsyslogaction_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_dateformat
    def unsetauditsyslogaction_dateformat(self, request):
        if isinstance(request, unsetauditsyslogaction_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_logfacility
    def unsetauditsyslogaction_logfacility(self, request):
        if isinstance(request, unsetauditsyslogaction_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_tcp
    def unsetauditsyslogaction_tcp(self, request):
        if isinstance(request, unsetauditsyslogaction_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogaction_timezone
    def unsetauditsyslogaction_timezone(self, request):
        if isinstance(request, unsetauditsyslogaction_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogactionResponse.typecode.ofwhat, pyclass=unsetauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditsyslogaction
    def getauditsyslogaction(self, request):
        if isinstance(request, getauditsyslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditsyslogactionResponse.typecode.ofwhat, pyclass=getauditsyslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauditsyslogpolicy
    def addauditsyslogpolicy(self, request):
        if isinstance(request, addauditsyslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauditsyslogpolicyResponse.typecode.ofwhat, pyclass=addauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauditsyslogpolicy
    def rmauditsyslogpolicy(self, request):
        if isinstance(request, rmauditsyslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauditsyslogpolicyResponse.typecode.ofwhat, pyclass=rmauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogpolicy_rule
    def setauditsyslogpolicy_rule(self, request):
        if isinstance(request, setauditsyslogpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogpolicyResponse.typecode.ofwhat, pyclass=setauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogpolicy_action
    def setauditsyslogpolicy_action(self, request):
        if isinstance(request, setauditsyslogpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogpolicyResponse.typecode.ofwhat, pyclass=setauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogpolicy_rule
    def unsetauditsyslogpolicy_rule(self, request):
        if isinstance(request, unsetauditsyslogpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogpolicyResponse.typecode.ofwhat, pyclass=unsetauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogpolicy_action
    def unsetauditsyslogpolicy_action(self, request):
        if isinstance(request, unsetauditsyslogpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogpolicyResponse.typecode.ofwhat, pyclass=unsetauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditsyslogpolicy
    def getauditsyslogpolicy(self, request):
        if isinstance(request, getauditsyslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditsyslogpolicyResponse.typecode.ofwhat, pyclass=getauditsyslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_serverip
    def setauditsyslogparams_serverip(self, request):
        if isinstance(request, setauditsyslogparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_serverport
    def setauditsyslogparams_serverport(self, request):
        if isinstance(request, setauditsyslogparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_dateformat
    def setauditsyslogparams_dateformat(self, request):
        if isinstance(request, setauditsyslogparams_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_loglevel
    def setauditsyslogparams_loglevel(self, request):
        if isinstance(request, setauditsyslogparams_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_logfacility
    def setauditsyslogparams_logfacility(self, request):
        if isinstance(request, setauditsyslogparams_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_tcp
    def setauditsyslogparams_tcp(self, request):
        if isinstance(request, setauditsyslogparams_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditsyslogparams_timezone
    def setauditsyslogparams_timezone(self, request):
        if isinstance(request, setauditsyslogparams_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditsyslogparamsResponse.typecode.ofwhat, pyclass=setauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_serverip
    def unsetauditsyslogparams_serverip(self, request):
        if isinstance(request, unsetauditsyslogparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_serverport
    def unsetauditsyslogparams_serverport(self, request):
        if isinstance(request, unsetauditsyslogparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_loglevel
    def unsetauditsyslogparams_loglevel(self, request):
        if isinstance(request, unsetauditsyslogparams_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_dateformat
    def unsetauditsyslogparams_dateformat(self, request):
        if isinstance(request, unsetauditsyslogparams_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_logfacility
    def unsetauditsyslogparams_logfacility(self, request):
        if isinstance(request, unsetauditsyslogparams_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_tcp
    def unsetauditsyslogparams_tcp(self, request):
        if isinstance(request, unsetauditsyslogparams_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditsyslogparams_timezone
    def unsetauditsyslogparams_timezone(self, request):
        if isinstance(request, unsetauditsyslogparams_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditsyslogparamsResponse.typecode.ofwhat, pyclass=unsetauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditsyslogparams
    def getauditsyslogparams(self, request):
        if isinstance(request, getauditsyslogparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditsyslogparamsResponse.typecode.ofwhat, pyclass=getauditsyslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauditnslogaction
    def addauditnslogaction(self, request):
        if isinstance(request, addauditnslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauditnslogactionResponse.typecode.ofwhat, pyclass=addauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauditnslogaction
    def rmauditnslogaction(self, request):
        if isinstance(request, rmauditnslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauditnslogactionResponse.typecode.ofwhat, pyclass=rmauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_serverip
    def setauditnslogaction_serverip(self, request):
        if isinstance(request, setauditnslogaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_serverport
    def setauditnslogaction_serverport(self, request):
        if isinstance(request, setauditnslogaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_loglevel
    def setauditnslogaction_loglevel(self, request):
        if isinstance(request, setauditnslogaction_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_dateformat
    def setauditnslogaction_dateformat(self, request):
        if isinstance(request, setauditnslogaction_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_logfacility
    def setauditnslogaction_logfacility(self, request):
        if isinstance(request, setauditnslogaction_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_tcp
    def setauditnslogaction_tcp(self, request):
        if isinstance(request, setauditnslogaction_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogaction_timezone
    def setauditnslogaction_timezone(self, request):
        if isinstance(request, setauditnslogaction_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogactionResponse.typecode.ofwhat, pyclass=setauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_serverport
    def unsetauditnslogaction_serverport(self, request):
        if isinstance(request, unsetauditnslogaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_loglevel
    def unsetauditnslogaction_loglevel(self, request):
        if isinstance(request, unsetauditnslogaction_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_dateformat
    def unsetauditnslogaction_dateformat(self, request):
        if isinstance(request, unsetauditnslogaction_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_logfacility
    def unsetauditnslogaction_logfacility(self, request):
        if isinstance(request, unsetauditnslogaction_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_tcp
    def unsetauditnslogaction_tcp(self, request):
        if isinstance(request, unsetauditnslogaction_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogaction_timezone
    def unsetauditnslogaction_timezone(self, request):
        if isinstance(request, unsetauditnslogaction_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogactionResponse.typecode.ofwhat, pyclass=unsetauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditnslogaction
    def getauditnslogaction(self, request):
        if isinstance(request, getauditnslogaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditnslogactionResponse.typecode.ofwhat, pyclass=getauditnslogactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauditnslogpolicy
    def addauditnslogpolicy(self, request):
        if isinstance(request, addauditnslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauditnslogpolicyResponse.typecode.ofwhat, pyclass=addauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauditnslogpolicy
    def rmauditnslogpolicy(self, request):
        if isinstance(request, rmauditnslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauditnslogpolicyResponse.typecode.ofwhat, pyclass=rmauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogpolicy_rule
    def setauditnslogpolicy_rule(self, request):
        if isinstance(request, setauditnslogpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogpolicyResponse.typecode.ofwhat, pyclass=setauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogpolicy_action
    def setauditnslogpolicy_action(self, request):
        if isinstance(request, setauditnslogpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogpolicyResponse.typecode.ofwhat, pyclass=setauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogpolicy_rule
    def unsetauditnslogpolicy_rule(self, request):
        if isinstance(request, unsetauditnslogpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogpolicyResponse.typecode.ofwhat, pyclass=unsetauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogpolicy_action
    def unsetauditnslogpolicy_action(self, request):
        if isinstance(request, unsetauditnslogpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogpolicyResponse.typecode.ofwhat, pyclass=unsetauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditnslogpolicy
    def getauditnslogpolicy(self, request):
        if isinstance(request, getauditnslogpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditnslogpolicyResponse.typecode.ofwhat, pyclass=getauditnslogpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_serverip
    def setauditnslogparams_serverip(self, request):
        if isinstance(request, setauditnslogparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_serverport
    def setauditnslogparams_serverport(self, request):
        if isinstance(request, setauditnslogparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_dateformat
    def setauditnslogparams_dateformat(self, request):
        if isinstance(request, setauditnslogparams_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_loglevel
    def setauditnslogparams_loglevel(self, request):
        if isinstance(request, setauditnslogparams_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_logfacility
    def setauditnslogparams_logfacility(self, request):
        if isinstance(request, setauditnslogparams_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_tcp
    def setauditnslogparams_tcp(self, request):
        if isinstance(request, setauditnslogparams_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauditnslogparams_timezone
    def setauditnslogparams_timezone(self, request):
        if isinstance(request, setauditnslogparams_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauditnslogparamsResponse.typecode.ofwhat, pyclass=setauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_serverip
    def unsetauditnslogparams_serverip(self, request):
        if isinstance(request, unsetauditnslogparams_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_serverport
    def unsetauditnslogparams_serverport(self, request):
        if isinstance(request, unsetauditnslogparams_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_loglevel
    def unsetauditnslogparams_loglevel(self, request):
        if isinstance(request, unsetauditnslogparams_loglevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_dateformat
    def unsetauditnslogparams_dateformat(self, request):
        if isinstance(request, unsetauditnslogparams_dateformat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_logfacility
    def unsetauditnslogparams_logfacility(self, request):
        if isinstance(request, unsetauditnslogparams_logfacility) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_tcp
    def unsetauditnslogparams_tcp(self, request):
        if isinstance(request, unsetauditnslogparams_tcp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauditnslogparams_timezone
    def unsetauditnslogparams_timezone(self, request):
        if isinstance(request, unsetauditnslogparams_timezone) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauditnslogparamsResponse.typecode.ofwhat, pyclass=unsetauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauditnslogparams
    def getauditnslogparams(self, request):
        if isinstance(request, getauditnslogparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauditnslogparamsResponse.typecode.ofwhat, pyclass=getauditnslogparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationradiusaction
    def addauthenticationradiusaction(self, request):
        if isinstance(request, addauthenticationradiusaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationradiusactionResponse.typecode.ofwhat, pyclass=addauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationradiusaction
    def rmauthenticationradiusaction(self, request):
        if isinstance(request, rmauthenticationradiusaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationradiusactionResponse.typecode.ofwhat, pyclass=rmauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_serverip
    def setauthenticationradiusaction_serverip(self, request):
        if isinstance(request, setauthenticationradiusaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_serverport
    def setauthenticationradiusaction_serverport(self, request):
        if isinstance(request, setauthenticationradiusaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_authtimeout
    def setauthenticationradiusaction_authtimeout(self, request):
        if isinstance(request, setauthenticationradiusaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radkey
    def setauthenticationradiusaction_radkey(self, request):
        if isinstance(request, setauthenticationradiusaction_radkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radnasip
    def setauthenticationradiusaction_radnasip(self, request):
        if isinstance(request, setauthenticationradiusaction_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radnasid
    def setauthenticationradiusaction_radnasid(self, request):
        if isinstance(request, setauthenticationradiusaction_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radvendorid
    def setauthenticationradiusaction_radvendorid(self, request):
        if isinstance(request, setauthenticationradiusaction_radvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radattributetype
    def setauthenticationradiusaction_radattributetype(self, request):
        if isinstance(request, setauthenticationradiusaction_radattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radgroupsprefix
    def setauthenticationradiusaction_radgroupsprefix(self, request):
        if isinstance(request, setauthenticationradiusaction_radgroupsprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_radgroupseparator
    def setauthenticationradiusaction_radgroupseparator(self, request):
        if isinstance(request, setauthenticationradiusaction_radgroupseparator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_passencoding
    def setauthenticationradiusaction_passencoding(self, request):
        if isinstance(request, setauthenticationradiusaction_passencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_ipvendorid
    def setauthenticationradiusaction_ipvendorid(self, request):
        if isinstance(request, setauthenticationradiusaction_ipvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_ipattributetype
    def setauthenticationradiusaction_ipattributetype(self, request):
        if isinstance(request, setauthenticationradiusaction_ipattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiusaction_accounting
    def setauthenticationradiusaction_accounting(self, request):
        if isinstance(request, setauthenticationradiusaction_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiusactionResponse.typecode.ofwhat, pyclass=setauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_serverip
    def unsetauthenticationradiusaction_serverip(self, request):
        if isinstance(request, unsetauthenticationradiusaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_serverport
    def unsetauthenticationradiusaction_serverport(self, request):
        if isinstance(request, unsetauthenticationradiusaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_authtimeout
    def unsetauthenticationradiusaction_authtimeout(self, request):
        if isinstance(request, unsetauthenticationradiusaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radnasip
    def unsetauthenticationradiusaction_radnasip(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radnasid
    def unsetauthenticationradiusaction_radnasid(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radvendorid
    def unsetauthenticationradiusaction_radvendorid(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radattributetype
    def unsetauthenticationradiusaction_radattributetype(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radgroupsprefix
    def unsetauthenticationradiusaction_radgroupsprefix(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radgroupsprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_radgroupseparator
    def unsetauthenticationradiusaction_radgroupseparator(self, request):
        if isinstance(request, unsetauthenticationradiusaction_radgroupseparator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_passencoding
    def unsetauthenticationradiusaction_passencoding(self, request):
        if isinstance(request, unsetauthenticationradiusaction_passencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_ipvendorid
    def unsetauthenticationradiusaction_ipvendorid(self, request):
        if isinstance(request, unsetauthenticationradiusaction_ipvendorid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_ipattributetype
    def unsetauthenticationradiusaction_ipattributetype(self, request):
        if isinstance(request, unsetauthenticationradiusaction_ipattributetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiusaction_accounting
    def unsetauthenticationradiusaction_accounting(self, request):
        if isinstance(request, unsetauthenticationradiusaction_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiusactionResponse.typecode.ofwhat, pyclass=unsetauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationradiusaction
    def getauthenticationradiusaction(self, request):
        if isinstance(request, getauthenticationradiusaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationradiusactionResponse.typecode.ofwhat, pyclass=getauthenticationradiusactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationldapaction
    def addauthenticationldapaction(self, request):
        if isinstance(request, addauthenticationldapaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationldapactionResponse.typecode.ofwhat, pyclass=addauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationldapaction
    def rmauthenticationldapaction(self, request):
        if isinstance(request, rmauthenticationldapaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationldapactionResponse.typecode.ofwhat, pyclass=rmauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_serverip
    def setauthenticationldapaction_serverip(self, request):
        if isinstance(request, setauthenticationldapaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_serverport
    def setauthenticationldapaction_serverport(self, request):
        if isinstance(request, setauthenticationldapaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_authtimeout
    def setauthenticationldapaction_authtimeout(self, request):
        if isinstance(request, setauthenticationldapaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_ldapbase
    def setauthenticationldapaction_ldapbase(self, request):
        if isinstance(request, setauthenticationldapaction_ldapbase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_ldapbinddn
    def setauthenticationldapaction_ldapbinddn(self, request):
        if isinstance(request, setauthenticationldapaction_ldapbinddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_ldapbinddnpassword
    def setauthenticationldapaction_ldapbinddnpassword(self, request):
        if isinstance(request, setauthenticationldapaction_ldapbinddnpassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_ldaploginname
    def setauthenticationldapaction_ldaploginname(self, request):
        if isinstance(request, setauthenticationldapaction_ldaploginname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_searchfilter
    def setauthenticationldapaction_searchfilter(self, request):
        if isinstance(request, setauthenticationldapaction_searchfilter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_groupattrname
    def setauthenticationldapaction_groupattrname(self, request):
        if isinstance(request, setauthenticationldapaction_groupattrname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_subattributename
    def setauthenticationldapaction_subattributename(self, request):
        if isinstance(request, setauthenticationldapaction_subattributename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_sectype
    def setauthenticationldapaction_sectype(self, request):
        if isinstance(request, setauthenticationldapaction_sectype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_ssonameattribute
    def setauthenticationldapaction_ssonameattribute(self, request):
        if isinstance(request, setauthenticationldapaction_ssonameattribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_authentication
    def setauthenticationldapaction_authentication(self, request):
        if isinstance(request, setauthenticationldapaction_authentication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldapaction_requireuser
    def setauthenticationldapaction_requireuser(self, request):
        if isinstance(request, setauthenticationldapaction_requireuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldapactionResponse.typecode.ofwhat, pyclass=setauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_serverip
    def unsetauthenticationldapaction_serverip(self, request):
        if isinstance(request, unsetauthenticationldapaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_serverport
    def unsetauthenticationldapaction_serverport(self, request):
        if isinstance(request, unsetauthenticationldapaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_authtimeout
    def unsetauthenticationldapaction_authtimeout(self, request):
        if isinstance(request, unsetauthenticationldapaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_ldapbase
    def unsetauthenticationldapaction_ldapbase(self, request):
        if isinstance(request, unsetauthenticationldapaction_ldapbase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_ldapbinddn
    def unsetauthenticationldapaction_ldapbinddn(self, request):
        if isinstance(request, unsetauthenticationldapaction_ldapbinddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_ldapbinddnpassword
    def unsetauthenticationldapaction_ldapbinddnpassword(self, request):
        if isinstance(request, unsetauthenticationldapaction_ldapbinddnpassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_ldaploginname
    def unsetauthenticationldapaction_ldaploginname(self, request):
        if isinstance(request, unsetauthenticationldapaction_ldaploginname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_searchfilter
    def unsetauthenticationldapaction_searchfilter(self, request):
        if isinstance(request, unsetauthenticationldapaction_searchfilter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_groupattrname
    def unsetauthenticationldapaction_groupattrname(self, request):
        if isinstance(request, unsetauthenticationldapaction_groupattrname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_subattributename
    def unsetauthenticationldapaction_subattributename(self, request):
        if isinstance(request, unsetauthenticationldapaction_subattributename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_sectype
    def unsetauthenticationldapaction_sectype(self, request):
        if isinstance(request, unsetauthenticationldapaction_sectype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_ssonameattribute
    def unsetauthenticationldapaction_ssonameattribute(self, request):
        if isinstance(request, unsetauthenticationldapaction_ssonameattribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_authentication
    def unsetauthenticationldapaction_authentication(self, request):
        if isinstance(request, unsetauthenticationldapaction_authentication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldapaction_requireuser
    def unsetauthenticationldapaction_requireuser(self, request):
        if isinstance(request, unsetauthenticationldapaction_requireuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldapactionResponse.typecode.ofwhat, pyclass=unsetauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationldapaction
    def getauthenticationldapaction(self, request):
        if isinstance(request, getauthenticationldapaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationldapactionResponse.typecode.ofwhat, pyclass=getauthenticationldapactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationtacacsaction
    def addauthenticationtacacsaction(self, request):
        if isinstance(request, addauthenticationtacacsaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=addauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationtacacsaction
    def rmauthenticationtacacsaction(self, request):
        if isinstance(request, rmauthenticationtacacsaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=rmauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_serverip
    def setauthenticationtacacsaction_serverip(self, request):
        if isinstance(request, setauthenticationtacacsaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_serverport
    def setauthenticationtacacsaction_serverport(self, request):
        if isinstance(request, setauthenticationtacacsaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_authtimeout
    def setauthenticationtacacsaction_authtimeout(self, request):
        if isinstance(request, setauthenticationtacacsaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_tacacssecret
    def setauthenticationtacacsaction_tacacssecret(self, request):
        if isinstance(request, setauthenticationtacacsaction_tacacssecret) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_authorization
    def setauthenticationtacacsaction_authorization(self, request):
        if isinstance(request, setauthenticationtacacsaction_authorization) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacsaction_accounting
    def setauthenticationtacacsaction_accounting(self, request):
        if isinstance(request, setauthenticationtacacsaction_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=setauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_serverip
    def unsetauthenticationtacacsaction_serverip(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_serverport
    def unsetauthenticationtacacsaction_serverport(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_serverport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_authtimeout
    def unsetauthenticationtacacsaction_authtimeout(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_authtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_tacacssecret
    def unsetauthenticationtacacsaction_tacacssecret(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_tacacssecret) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_authorization
    def unsetauthenticationtacacsaction_authorization(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_authorization) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacsaction_accounting
    def unsetauthenticationtacacsaction_accounting(self, request):
        if isinstance(request, unsetauthenticationtacacsaction_accounting) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationtacacsaction
    def getauthenticationtacacsaction(self, request):
        if isinstance(request, getauthenticationtacacsaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationtacacsactionResponse.typecode.ofwhat, pyclass=getauthenticationtacacsactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationnt4action
    def addauthenticationnt4action(self, request):
        if isinstance(request, addauthenticationnt4action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationnt4actionResponse.typecode.ofwhat, pyclass=addauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationnt4action
    def rmauthenticationnt4action(self, request):
        if isinstance(request, rmauthenticationnt4action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationnt4actionResponse.typecode.ofwhat, pyclass=rmauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4action_serverip
    def setauthenticationnt4action_serverip(self, request):
        if isinstance(request, setauthenticationnt4action_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4actionResponse.typecode.ofwhat, pyclass=setauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4action_nt4servername
    def setauthenticationnt4action_nt4servername(self, request):
        if isinstance(request, setauthenticationnt4action_nt4servername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4actionResponse.typecode.ofwhat, pyclass=setauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4action_nt4domainname
    def setauthenticationnt4action_nt4domainname(self, request):
        if isinstance(request, setauthenticationnt4action_nt4domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4actionResponse.typecode.ofwhat, pyclass=setauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4action_nt4adminuser
    def setauthenticationnt4action_nt4adminuser(self, request):
        if isinstance(request, setauthenticationnt4action_nt4adminuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4actionResponse.typecode.ofwhat, pyclass=setauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4action_nt4adminpasswd
    def setauthenticationnt4action_nt4adminpasswd(self, request):
        if isinstance(request, setauthenticationnt4action_nt4adminpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4actionResponse.typecode.ofwhat, pyclass=setauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4action_serverip
    def unsetauthenticationnt4action_serverip(self, request):
        if isinstance(request, unsetauthenticationnt4action_serverip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4actionResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4action_nt4servername
    def unsetauthenticationnt4action_nt4servername(self, request):
        if isinstance(request, unsetauthenticationnt4action_nt4servername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4actionResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4action_nt4domainname
    def unsetauthenticationnt4action_nt4domainname(self, request):
        if isinstance(request, unsetauthenticationnt4action_nt4domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4actionResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4action_nt4adminuser
    def unsetauthenticationnt4action_nt4adminuser(self, request):
        if isinstance(request, unsetauthenticationnt4action_nt4adminuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4actionResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4action_nt4adminpasswd
    def unsetauthenticationnt4action_nt4adminpasswd(self, request):
        if isinstance(request, unsetauthenticationnt4action_nt4adminpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4actionResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationnt4action
    def getauthenticationnt4action(self, request):
        if isinstance(request, getauthenticationnt4action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationnt4actionResponse.typecode.ofwhat, pyclass=getauthenticationnt4actionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationcertaction
    def addauthenticationcertaction(self, request):
        if isinstance(request, addauthenticationcertaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationcertactionResponse.typecode.ofwhat, pyclass=addauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationcertaction
    def rmauthenticationcertaction(self, request):
        if isinstance(request, rmauthenticationcertaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationcertactionResponse.typecode.ofwhat, pyclass=rmauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationcertaction_twofactor
    def setauthenticationcertaction_twofactor(self, request):
        if isinstance(request, setauthenticationcertaction_twofactor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationcertactionResponse.typecode.ofwhat, pyclass=setauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationcertaction_usernamefield
    def setauthenticationcertaction_usernamefield(self, request):
        if isinstance(request, setauthenticationcertaction_usernamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationcertactionResponse.typecode.ofwhat, pyclass=setauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationcertaction_groupnamefield
    def setauthenticationcertaction_groupnamefield(self, request):
        if isinstance(request, setauthenticationcertaction_groupnamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationcertactionResponse.typecode.ofwhat, pyclass=setauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationcertaction_twofactor
    def unsetauthenticationcertaction_twofactor(self, request):
        if isinstance(request, unsetauthenticationcertaction_twofactor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationcertactionResponse.typecode.ofwhat, pyclass=unsetauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationcertaction_usernamefield
    def unsetauthenticationcertaction_usernamefield(self, request):
        if isinstance(request, unsetauthenticationcertaction_usernamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationcertactionResponse.typecode.ofwhat, pyclass=unsetauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationcertaction_groupnamefield
    def unsetauthenticationcertaction_groupnamefield(self, request):
        if isinstance(request, unsetauthenticationcertaction_groupnamefield) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationcertactionResponse.typecode.ofwhat, pyclass=unsetauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationcertaction
    def getauthenticationcertaction(self, request):
        if isinstance(request, getauthenticationcertaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationcertactionResponse.typecode.ofwhat, pyclass=getauthenticationcertactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationlocalpolicy
    def addauthenticationlocalpolicy(self, request):
        if isinstance(request, addauthenticationlocalpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationlocalpolicyResponse.typecode.ofwhat, pyclass=addauthenticationlocalpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationlocalpolicy
    def rmauthenticationlocalpolicy(self, request):
        if isinstance(request, rmauthenticationlocalpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationlocalpolicyResponse.typecode.ofwhat, pyclass=rmauthenticationlocalpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationlocalpolicy_rule
    def setauthenticationlocalpolicy_rule(self, request):
        if isinstance(request, setauthenticationlocalpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationlocalpolicyResponse.typecode.ofwhat, pyclass=setauthenticationlocalpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationlocalpolicy_rule
    def unsetauthenticationlocalpolicy_rule(self, request):
        if isinstance(request, unsetauthenticationlocalpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationlocalpolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationlocalpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationlocalpolicy
    def getauthenticationlocalpolicy(self, request):
        if isinstance(request, getauthenticationlocalpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationlocalpolicyResponse.typecode.ofwhat, pyclass=getauthenticationlocalpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationradiuspolicy
    def addauthenticationradiuspolicy(self, request):
        if isinstance(request, addauthenticationradiuspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=addauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationradiuspolicy
    def rmauthenticationradiuspolicy(self, request):
        if isinstance(request, rmauthenticationradiuspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=rmauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiuspolicy_rule
    def setauthenticationradiuspolicy_rule(self, request):
        if isinstance(request, setauthenticationradiuspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=setauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationradiuspolicy_reqaction
    def setauthenticationradiuspolicy_reqaction(self, request):
        if isinstance(request, setauthenticationradiuspolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=setauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiuspolicy_rule
    def unsetauthenticationradiuspolicy_rule(self, request):
        if isinstance(request, unsetauthenticationradiuspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationradiuspolicy_reqaction
    def unsetauthenticationradiuspolicy_reqaction(self, request):
        if isinstance(request, unsetauthenticationradiuspolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationradiuspolicy
    def getauthenticationradiuspolicy(self, request):
        if isinstance(request, getauthenticationradiuspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationradiuspolicyResponse.typecode.ofwhat, pyclass=getauthenticationradiuspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationcertpolicy
    def addauthenticationcertpolicy(self, request):
        if isinstance(request, addauthenticationcertpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=addauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationcertpolicy
    def rmauthenticationcertpolicy(self, request):
        if isinstance(request, rmauthenticationcertpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=rmauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationcertpolicy_rule
    def setauthenticationcertpolicy_rule(self, request):
        if isinstance(request, setauthenticationcertpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=setauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationcertpolicy_reqaction
    def setauthenticationcertpolicy_reqaction(self, request):
        if isinstance(request, setauthenticationcertpolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=setauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationcertpolicy_rule
    def unsetauthenticationcertpolicy_rule(self, request):
        if isinstance(request, unsetauthenticationcertpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationcertpolicy_reqaction
    def unsetauthenticationcertpolicy_reqaction(self, request):
        if isinstance(request, unsetauthenticationcertpolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationcertpolicy
    def getauthenticationcertpolicy(self, request):
        if isinstance(request, getauthenticationcertpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationcertpolicyResponse.typecode.ofwhat, pyclass=getauthenticationcertpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationldappolicy
    def addauthenticationldappolicy(self, request):
        if isinstance(request, addauthenticationldappolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationldappolicyResponse.typecode.ofwhat, pyclass=addauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationldappolicy
    def rmauthenticationldappolicy(self, request):
        if isinstance(request, rmauthenticationldappolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationldappolicyResponse.typecode.ofwhat, pyclass=rmauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldappolicy_rule
    def setauthenticationldappolicy_rule(self, request):
        if isinstance(request, setauthenticationldappolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldappolicyResponse.typecode.ofwhat, pyclass=setauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationldappolicy_reqaction
    def setauthenticationldappolicy_reqaction(self, request):
        if isinstance(request, setauthenticationldappolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationldappolicyResponse.typecode.ofwhat, pyclass=setauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldappolicy_rule
    def unsetauthenticationldappolicy_rule(self, request):
        if isinstance(request, unsetauthenticationldappolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldappolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationldappolicy_reqaction
    def unsetauthenticationldappolicy_reqaction(self, request):
        if isinstance(request, unsetauthenticationldappolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationldappolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationldappolicy
    def getauthenticationldappolicy(self, request):
        if isinstance(request, getauthenticationldappolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationldappolicyResponse.typecode.ofwhat, pyclass=getauthenticationldappolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationtacacspolicy
    def addauthenticationtacacspolicy(self, request):
        if isinstance(request, addauthenticationtacacspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=addauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationtacacspolicy
    def rmauthenticationtacacspolicy(self, request):
        if isinstance(request, rmauthenticationtacacspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=rmauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacspolicy_rule
    def setauthenticationtacacspolicy_rule(self, request):
        if isinstance(request, setauthenticationtacacspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=setauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationtacacspolicy_reqaction
    def setauthenticationtacacspolicy_reqaction(self, request):
        if isinstance(request, setauthenticationtacacspolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=setauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacspolicy_rule
    def unsetauthenticationtacacspolicy_rule(self, request):
        if isinstance(request, unsetauthenticationtacacspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationtacacspolicy_reqaction
    def unsetauthenticationtacacspolicy_reqaction(self, request):
        if isinstance(request, unsetauthenticationtacacspolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=unsetauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationtacacspolicy
    def getauthenticationtacacspolicy(self, request):
        if isinstance(request, getauthenticationtacacspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationtacacspolicyResponse.typecode.ofwhat, pyclass=getauthenticationtacacspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthenticationnt4policy
    def addauthenticationnt4policy(self, request):
        if isinstance(request, addauthenticationnt4policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthenticationnt4policyResponse.typecode.ofwhat, pyclass=addauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthenticationnt4policy
    def rmauthenticationnt4policy(self, request):
        if isinstance(request, rmauthenticationnt4policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthenticationnt4policyResponse.typecode.ofwhat, pyclass=rmauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4policy_rule
    def setauthenticationnt4policy_rule(self, request):
        if isinstance(request, setauthenticationnt4policy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4policyResponse.typecode.ofwhat, pyclass=setauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthenticationnt4policy_reqaction
    def setauthenticationnt4policy_reqaction(self, request):
        if isinstance(request, setauthenticationnt4policy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthenticationnt4policyResponse.typecode.ofwhat, pyclass=setauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4policy_rule
    def unsetauthenticationnt4policy_rule(self, request):
        if isinstance(request, unsetauthenticationnt4policy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4policyResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthenticationnt4policy_reqaction
    def unsetauthenticationnt4policy_reqaction(self, request):
        if isinstance(request, unsetauthenticationnt4policy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthenticationnt4policyResponse.typecode.ofwhat, pyclass=unsetauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthenticationnt4policy
    def getauthenticationnt4policy(self, request):
        if isinstance(request, getauthenticationnt4policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthenticationnt4policyResponse.typecode.ofwhat, pyclass=getauthenticationnt4policyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addauthorizationpolicy
    def addauthorizationpolicy(self, request):
        if isinstance(request, addauthorizationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addauthorizationpolicyResponse.typecode.ofwhat, pyclass=addauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmauthorizationpolicy
    def rmauthorizationpolicy(self, request):
        if isinstance(request, rmauthorizationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmauthorizationpolicyResponse.typecode.ofwhat, pyclass=rmauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthorizationpolicy_rule
    def setauthorizationpolicy_rule(self, request):
        if isinstance(request, setauthorizationpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthorizationpolicyResponse.typecode.ofwhat, pyclass=setauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setauthorizationpolicy_action
    def setauthorizationpolicy_action(self, request):
        if isinstance(request, setauthorizationpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setauthorizationpolicyResponse.typecode.ofwhat, pyclass=setauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthorizationpolicy_rule
    def unsetauthorizationpolicy_rule(self, request):
        if isinstance(request, unsetauthorizationpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthorizationpolicyResponse.typecode.ofwhat, pyclass=unsetauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetauthorizationpolicy_action
    def unsetauthorizationpolicy_action(self, request):
        if isinstance(request, unsetauthorizationpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetauthorizationpolicyResponse.typecode.ofwhat, pyclass=unsetauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getauthorizationpolicy
    def getauthorizationpolicy(self, request):
        if isinstance(request, getauthorizationpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getauthorizationpolicyResponse.typecode.ofwhat, pyclass=getauthorizationpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcacheobject
    def getcacheobject(self, request):
        if isinstance(request, getcacheobject) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcacheobjectResponse.typecode.ofwhat, pyclass=getcacheobjectResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: expirecacheobject
    def expirecacheobject(self, request):
        if isinstance(request, expirecacheobject) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=expirecacheobjectResponse.typecode.ofwhat, pyclass=expirecacheobjectResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: flushcacheobject
    def flushcacheobject(self, request):
        if isinstance(request, flushcacheobject) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=flushcacheobjectResponse.typecode.ofwhat, pyclass=flushcacheobjectResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcachepolicy
    def addcachepolicy(self, request):
        if isinstance(request, addcachepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcachepolicyResponse.typecode.ofwhat, pyclass=addcachepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcachepolicy
    def rmcachepolicy(self, request):
        if isinstance(request, rmcachepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcachepolicyResponse.typecode.ofwhat, pyclass=rmcachepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcachepolicy
    def getcachepolicy(self, request):
        if isinstance(request, getcachepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcachepolicyResponse.typecode.ofwhat, pyclass=getcachepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindcacheglobal_policy
    def bindcacheglobal_policy(self, request):
        if isinstance(request, bindcacheglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindcacheglobalResponse.typecode.ofwhat, pyclass=bindcacheglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindcacheglobal_policy
    def unbindcacheglobal_policy(self, request):
        if isinstance(request, unbindcacheglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindcacheglobalResponse.typecode.ofwhat, pyclass=unbindcacheglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcacheglobal
    def getcacheglobal(self, request):
        if isinstance(request, getcacheglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcacheglobalResponse.typecode.ofwhat, pyclass=getcacheglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcachecontentgroup
    def addcachecontentgroup(self, request):
        if isinstance(request, addcachecontentgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcachecontentgroupResponse.typecode.ofwhat, pyclass=addcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcachecontentgroup
    def rmcachecontentgroup(self, request):
        if isinstance(request, rmcachecontentgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcachecontentgroupResponse.typecode.ofwhat, pyclass=rmcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_weakposrelexpiry
    def setcachecontentgroup_weakposrelexpiry(self, request):
        if isinstance(request, setcachecontentgroup_weakposrelexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_heurexpiryparam
    def setcachecontentgroup_heurexpiryparam(self, request):
        if isinstance(request, setcachecontentgroup_heurexpiryparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_relexpiry
    def setcachecontentgroup_relexpiry(self, request):
        if isinstance(request, setcachecontentgroup_relexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_relexpirymillisec
    def setcachecontentgroup_relexpirymillisec(self, request):
        if isinstance(request, setcachecontentgroup_relexpirymillisec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_absexpiry
    def setcachecontentgroup_absexpiry(self, request):
        if isinstance(request, setcachecontentgroup_absexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_absexpirygmt
    def setcachecontentgroup_absexpirygmt(self, request):
        if isinstance(request, setcachecontentgroup_absexpirygmt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_weaknegrelexpiry
    def setcachecontentgroup_weaknegrelexpiry(self, request):
        if isinstance(request, setcachecontentgroup_weaknegrelexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_hitparams
    def setcachecontentgroup_hitparams(self, request):
        if isinstance(request, setcachecontentgroup_hitparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_invalparams
    def setcachecontentgroup_invalparams(self, request):
        if isinstance(request, setcachecontentgroup_invalparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_ignoreparamvaluecase
    def setcachecontentgroup_ignoreparamvaluecase(self, request):
        if isinstance(request, setcachecontentgroup_ignoreparamvaluecase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_matchcookies
    def setcachecontentgroup_matchcookies(self, request):
        if isinstance(request, setcachecontentgroup_matchcookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_invalrestrictedtohost
    def setcachecontentgroup_invalrestrictedtohost(self, request):
        if isinstance(request, setcachecontentgroup_invalrestrictedtohost) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_polleverytime
    def setcachecontentgroup_polleverytime(self, request):
        if isinstance(request, setcachecontentgroup_polleverytime) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_ignorereloadreq
    def setcachecontentgroup_ignorereloadreq(self, request):
        if isinstance(request, setcachecontentgroup_ignorereloadreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_removecookies
    def setcachecontentgroup_removecookies(self, request):
        if isinstance(request, setcachecontentgroup_removecookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_prefetch
    def setcachecontentgroup_prefetch(self, request):
        if isinstance(request, setcachecontentgroup_prefetch) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_prefetchperiod
    def setcachecontentgroup_prefetchperiod(self, request):
        if isinstance(request, setcachecontentgroup_prefetchperiod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_prefetchperiodmillisec
    def setcachecontentgroup_prefetchperiodmillisec(self, request):
        if isinstance(request, setcachecontentgroup_prefetchperiodmillisec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_prefetchmaxpending
    def setcachecontentgroup_prefetchmaxpending(self, request):
        if isinstance(request, setcachecontentgroup_prefetchmaxpending) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_flashcache
    def setcachecontentgroup_flashcache(self, request):
        if isinstance(request, setcachecontentgroup_flashcache) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_expireatlastbyte
    def setcachecontentgroup_expireatlastbyte(self, request):
        if isinstance(request, setcachecontentgroup_expireatlastbyte) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_insertvia
    def setcachecontentgroup_insertvia(self, request):
        if isinstance(request, setcachecontentgroup_insertvia) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_insertage
    def setcachecontentgroup_insertage(self, request):
        if isinstance(request, setcachecontentgroup_insertage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_insertetag
    def setcachecontentgroup_insertetag(self, request):
        if isinstance(request, setcachecontentgroup_insertetag) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_cachecontrol
    def setcachecontentgroup_cachecontrol(self, request):
        if isinstance(request, setcachecontentgroup_cachecontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_quickabortsize
    def setcachecontentgroup_quickabortsize(self, request):
        if isinstance(request, setcachecontentgroup_quickabortsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_minressize
    def setcachecontentgroup_minressize(self, request):
        if isinstance(request, setcachecontentgroup_minressize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_maxressize
    def setcachecontentgroup_maxressize(self, request):
        if isinstance(request, setcachecontentgroup_maxressize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_memlimit
    def setcachecontentgroup_memlimit(self, request):
        if isinstance(request, setcachecontentgroup_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_ignorereqcachinghdrs
    def setcachecontentgroup_ignorereqcachinghdrs(self, request):
        if isinstance(request, setcachecontentgroup_ignorereqcachinghdrs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_minhits
    def setcachecontentgroup_minhits(self, request):
        if isinstance(request, setcachecontentgroup_minhits) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_alwaysevalpolicies
    def setcachecontentgroup_alwaysevalpolicies(self, request):
        if isinstance(request, setcachecontentgroup_alwaysevalpolicies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_pinned
    def setcachecontentgroup_pinned(self, request):
        if isinstance(request, setcachecontentgroup_pinned) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_lazydnsresolve
    def setcachecontentgroup_lazydnsresolve(self, request):
        if isinstance(request, setcachecontentgroup_lazydnsresolve) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_hitselector
    def setcachecontentgroup_hitselector(self, request):
        if isinstance(request, setcachecontentgroup_hitselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcachecontentgroup_invalselector
    def setcachecontentgroup_invalselector(self, request):
        if isinstance(request, setcachecontentgroup_invalselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcachecontentgroupResponse.typecode.ofwhat, pyclass=setcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_weakposrelexpiry
    def unsetcachecontentgroup_weakposrelexpiry(self, request):
        if isinstance(request, unsetcachecontentgroup_weakposrelexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_heurexpiryparam
    def unsetcachecontentgroup_heurexpiryparam(self, request):
        if isinstance(request, unsetcachecontentgroup_heurexpiryparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_relexpiry
    def unsetcachecontentgroup_relexpiry(self, request):
        if isinstance(request, unsetcachecontentgroup_relexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_relexpirymillisec
    def unsetcachecontentgroup_relexpirymillisec(self, request):
        if isinstance(request, unsetcachecontentgroup_relexpirymillisec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_absexpiry
    def unsetcachecontentgroup_absexpiry(self, request):
        if isinstance(request, unsetcachecontentgroup_absexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_absexpirygmt
    def unsetcachecontentgroup_absexpirygmt(self, request):
        if isinstance(request, unsetcachecontentgroup_absexpirygmt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_weaknegrelexpiry
    def unsetcachecontentgroup_weaknegrelexpiry(self, request):
        if isinstance(request, unsetcachecontentgroup_weaknegrelexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_hitparams
    def unsetcachecontentgroup_hitparams(self, request):
        if isinstance(request, unsetcachecontentgroup_hitparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_invalparams
    def unsetcachecontentgroup_invalparams(self, request):
        if isinstance(request, unsetcachecontentgroup_invalparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_ignoreparamvaluecase
    def unsetcachecontentgroup_ignoreparamvaluecase(self, request):
        if isinstance(request, unsetcachecontentgroup_ignoreparamvaluecase) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_matchcookies
    def unsetcachecontentgroup_matchcookies(self, request):
        if isinstance(request, unsetcachecontentgroup_matchcookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_invalrestrictedtohost
    def unsetcachecontentgroup_invalrestrictedtohost(self, request):
        if isinstance(request, unsetcachecontentgroup_invalrestrictedtohost) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_polleverytime
    def unsetcachecontentgroup_polleverytime(self, request):
        if isinstance(request, unsetcachecontentgroup_polleverytime) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_ignorereloadreq
    def unsetcachecontentgroup_ignorereloadreq(self, request):
        if isinstance(request, unsetcachecontentgroup_ignorereloadreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_removecookies
    def unsetcachecontentgroup_removecookies(self, request):
        if isinstance(request, unsetcachecontentgroup_removecookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_prefetch
    def unsetcachecontentgroup_prefetch(self, request):
        if isinstance(request, unsetcachecontentgroup_prefetch) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_prefetchperiod
    def unsetcachecontentgroup_prefetchperiod(self, request):
        if isinstance(request, unsetcachecontentgroup_prefetchperiod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_prefetchperiodmillisec
    def unsetcachecontentgroup_prefetchperiodmillisec(self, request):
        if isinstance(request, unsetcachecontentgroup_prefetchperiodmillisec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_prefetchmaxpending
    def unsetcachecontentgroup_prefetchmaxpending(self, request):
        if isinstance(request, unsetcachecontentgroup_prefetchmaxpending) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_flashcache
    def unsetcachecontentgroup_flashcache(self, request):
        if isinstance(request, unsetcachecontentgroup_flashcache) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_expireatlastbyte
    def unsetcachecontentgroup_expireatlastbyte(self, request):
        if isinstance(request, unsetcachecontentgroup_expireatlastbyte) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_insertvia
    def unsetcachecontentgroup_insertvia(self, request):
        if isinstance(request, unsetcachecontentgroup_insertvia) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_insertage
    def unsetcachecontentgroup_insertage(self, request):
        if isinstance(request, unsetcachecontentgroup_insertage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_insertetag
    def unsetcachecontentgroup_insertetag(self, request):
        if isinstance(request, unsetcachecontentgroup_insertetag) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_cachecontrol
    def unsetcachecontentgroup_cachecontrol(self, request):
        if isinstance(request, unsetcachecontentgroup_cachecontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_quickabortsize
    def unsetcachecontentgroup_quickabortsize(self, request):
        if isinstance(request, unsetcachecontentgroup_quickabortsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_minressize
    def unsetcachecontentgroup_minressize(self, request):
        if isinstance(request, unsetcachecontentgroup_minressize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_maxressize
    def unsetcachecontentgroup_maxressize(self, request):
        if isinstance(request, unsetcachecontentgroup_maxressize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_memlimit
    def unsetcachecontentgroup_memlimit(self, request):
        if isinstance(request, unsetcachecontentgroup_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_ignorereqcachinghdrs
    def unsetcachecontentgroup_ignorereqcachinghdrs(self, request):
        if isinstance(request, unsetcachecontentgroup_ignorereqcachinghdrs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_minhits
    def unsetcachecontentgroup_minhits(self, request):
        if isinstance(request, unsetcachecontentgroup_minhits) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_alwaysevalpolicies
    def unsetcachecontentgroup_alwaysevalpolicies(self, request):
        if isinstance(request, unsetcachecontentgroup_alwaysevalpolicies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_pinned
    def unsetcachecontentgroup_pinned(self, request):
        if isinstance(request, unsetcachecontentgroup_pinned) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_lazydnsresolve
    def unsetcachecontentgroup_lazydnsresolve(self, request):
        if isinstance(request, unsetcachecontentgroup_lazydnsresolve) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_hitselector
    def unsetcachecontentgroup_hitselector(self, request):
        if isinstance(request, unsetcachecontentgroup_hitselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcachecontentgroup_invalselector
    def unsetcachecontentgroup_invalselector(self, request):
        if isinstance(request, unsetcachecontentgroup_invalselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcachecontentgroupResponse.typecode.ofwhat, pyclass=unsetcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcachecontentgroup
    def getcachecontentgroup(self, request):
        if isinstance(request, getcachecontentgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcachecontentgroupResponse.typecode.ofwhat, pyclass=getcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: expirecachecontentgroup
    def expirecachecontentgroup(self, request):
        if isinstance(request, expirecachecontentgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=expirecachecontentgroupResponse.typecode.ofwhat, pyclass=expirecachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: flushcachecontentgroup
    def flushcachecontentgroup(self, request):
        if isinstance(request, flushcachecontentgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=flushcachecontentgroupResponse.typecode.ofwhat, pyclass=flushcachecontentgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcacheforwardproxy
    def addcacheforwardproxy(self, request):
        if isinstance(request, addcacheforwardproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcacheforwardproxyResponse.typecode.ofwhat, pyclass=addcacheforwardproxyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcacheforwardproxy
    def rmcacheforwardproxy(self, request):
        if isinstance(request, rmcacheforwardproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcacheforwardproxyResponse.typecode.ofwhat, pyclass=rmcacheforwardproxyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcacheforwardproxy
    def getcacheforwardproxy(self, request):
        if isinstance(request, getcacheforwardproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcacheforwardproxyResponse.typecode.ofwhat, pyclass=getcacheforwardproxyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcacheselector
    def addcacheselector(self, request):
        if isinstance(request, addcacheselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcacheselectorResponse.typecode.ofwhat, pyclass=addcacheselectorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcacheselector
    def rmcacheselector(self, request):
        if isinstance(request, rmcacheselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcacheselectorResponse.typecode.ofwhat, pyclass=rmcacheselectorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheselector_rule
    def setcacheselector_rule(self, request):
        if isinstance(request, setcacheselector_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheselectorResponse.typecode.ofwhat, pyclass=setcacheselectorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcacheselector
    def getcacheselector(self, request):
        if isinstance(request, getcacheselector) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcacheselectorResponse.typecode.ofwhat, pyclass=getcacheselectorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_memlimit
    def setcacheparameter_memlimit(self, request):
        if isinstance(request, setcacheparameter_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_via
    def setcacheparameter_via(self, request):
        if isinstance(request, setcacheparameter_via) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_verifyusing
    def setcacheparameter_verifyusing(self, request):
        if isinstance(request, setcacheparameter_verifyusing) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_maxpostlen
    def setcacheparameter_maxpostlen(self, request):
        if isinstance(request, setcacheparameter_maxpostlen) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_prefetchmaxpending
    def setcacheparameter_prefetchmaxpending(self, request):
        if isinstance(request, setcacheparameter_prefetchmaxpending) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcacheparameter_enablebypass
    def setcacheparameter_enablebypass(self, request):
        if isinstance(request, setcacheparameter_enablebypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcacheparameterResponse.typecode.ofwhat, pyclass=setcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_memlimit
    def unsetcacheparameter_memlimit(self, request):
        if isinstance(request, unsetcacheparameter_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_via
    def unsetcacheparameter_via(self, request):
        if isinstance(request, unsetcacheparameter_via) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_verifyusing
    def unsetcacheparameter_verifyusing(self, request):
        if isinstance(request, unsetcacheparameter_verifyusing) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_maxpostlen
    def unsetcacheparameter_maxpostlen(self, request):
        if isinstance(request, unsetcacheparameter_maxpostlen) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_prefetchmaxpending
    def unsetcacheparameter_prefetchmaxpending(self, request):
        if isinstance(request, unsetcacheparameter_prefetchmaxpending) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcacheparameter_enablebypass
    def unsetcacheparameter_enablebypass(self, request):
        if isinstance(request, unsetcacheparameter_enablebypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcacheparameterResponse.typecode.ofwhat, pyclass=unsetcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcacheparameter
    def getcacheparameter(self, request):
        if isinstance(request, getcacheparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcacheparameterResponse.typecode.ofwhat, pyclass=getcacheparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getclioutput
    def getclioutput(self, request):
        if isinstance(request, getclioutput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getclioutputResponse.typecode.ofwhat, pyclass=getclioutputResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcmpaction
    def addcmpaction(self, request):
        if isinstance(request, addcmpaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcmpactionResponse.typecode.ofwhat, pyclass=addcmpactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcmpaction
    def rmcmpaction(self, request):
        if isinstance(request, rmcmpaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcmpactionResponse.typecode.ofwhat, pyclass=rmcmpactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcmpaction
    def getcmpaction(self, request):
        if isinstance(request, getcmpaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcmpactionResponse.typecode.ofwhat, pyclass=getcmpactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcmppolicy
    def addcmppolicy(self, request):
        if isinstance(request, addcmppolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcmppolicyResponse.typecode.ofwhat, pyclass=addcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcmppolicy
    def rmcmppolicy(self, request):
        if isinstance(request, rmcmppolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcmppolicyResponse.typecode.ofwhat, pyclass=rmcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmppolicy_rule
    def setcmppolicy_rule(self, request):
        if isinstance(request, setcmppolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmppolicyResponse.typecode.ofwhat, pyclass=setcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmppolicy_resaction
    def setcmppolicy_resaction(self, request):
        if isinstance(request, setcmppolicy_resaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmppolicyResponse.typecode.ofwhat, pyclass=setcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmppolicy_rule
    def unsetcmppolicy_rule(self, request):
        if isinstance(request, unsetcmppolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmppolicyResponse.typecode.ofwhat, pyclass=unsetcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmppolicy_resaction
    def unsetcmppolicy_resaction(self, request):
        if isinstance(request, unsetcmppolicy_resaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmppolicyResponse.typecode.ofwhat, pyclass=unsetcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcmppolicy
    def getcmppolicy(self, request):
        if isinstance(request, getcmppolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcmppolicyResponse.typecode.ofwhat, pyclass=getcmppolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindcmpglobal_policy
    def bindcmpglobal_policy(self, request):
        if isinstance(request, bindcmpglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindcmpglobalResponse.typecode.ofwhat, pyclass=bindcmpglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindcmpglobal_policy
    def unbindcmpglobal_policy(self, request):
        if isinstance(request, unbindcmpglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindcmpglobalResponse.typecode.ofwhat, pyclass=unbindcmpglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcmpglobal
    def getcmpglobal(self, request):
        if isinstance(request, getcmpglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcmpglobalResponse.typecode.ofwhat, pyclass=getcmpglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_cmplevel
    def setcmpparameter_cmplevel(self, request):
        if isinstance(request, setcmpparameter_cmplevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_quantumsize
    def setcmpparameter_quantumsize(self, request):
        if isinstance(request, setcmpparameter_quantumsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_servercmp
    def setcmpparameter_servercmp(self, request):
        if isinstance(request, setcmpparameter_servercmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_heurexpiry
    def setcmpparameter_heurexpiry(self, request):
        if isinstance(request, setcmpparameter_heurexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_heurexpirythres
    def setcmpparameter_heurexpirythres(self, request):
        if isinstance(request, setcmpparameter_heurexpirythres) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcmpparameter_heurexpiryhistwt
    def setcmpparameter_heurexpiryhistwt(self, request):
        if isinstance(request, setcmpparameter_heurexpiryhistwt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcmpparameterResponse.typecode.ofwhat, pyclass=setcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_cmplevel
    def unsetcmpparameter_cmplevel(self, request):
        if isinstance(request, unsetcmpparameter_cmplevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_quantumsize
    def unsetcmpparameter_quantumsize(self, request):
        if isinstance(request, unsetcmpparameter_quantumsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_servercmp
    def unsetcmpparameter_servercmp(self, request):
        if isinstance(request, unsetcmpparameter_servercmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_heurexpiry
    def unsetcmpparameter_heurexpiry(self, request):
        if isinstance(request, unsetcmpparameter_heurexpiry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_heurexpirythres
    def unsetcmpparameter_heurexpirythres(self, request):
        if isinstance(request, unsetcmpparameter_heurexpirythres) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcmpparameter_heurexpiryhistwt
    def unsetcmpparameter_heurexpiryhistwt(self, request):
        if isinstance(request, unsetcmpparameter_heurexpiryhistwt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcmpparameterResponse.typecode.ofwhat, pyclass=unsetcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcmpparameter
    def getcmpparameter(self, request):
        if isinstance(request, getcmpparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcmpparameterResponse.typecode.ofwhat, pyclass=getcmpparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcrpolicy
    def addcrpolicy(self, request):
        if isinstance(request, addcrpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcrpolicyResponse.typecode.ofwhat, pyclass=addcrpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcrpolicy
    def rmcrpolicy(self, request):
        if isinstance(request, rmcrpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcrpolicyResponse.typecode.ofwhat, pyclass=rmcrpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrpolicy_rule
    def setcrpolicy_rule(self, request):
        if isinstance(request, setcrpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrpolicyResponse.typecode.ofwhat, pyclass=setcrpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcrpolicy
    def getcrpolicy(self, request):
        if isinstance(request, getcrpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcrpolicyResponse.typecode.ofwhat, pyclass=getcrpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcrvserver
    def addcrvserver(self, request):
        if isinstance(request, addcrvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcrvserverResponse.typecode.ofwhat, pyclass=addcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcrvserver
    def rmcrvserver(self, request):
        if isinstance(request, rmcrvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcrvserverResponse.typecode.ofwhat, pyclass=rmcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_ipaddress
    def setcrvserver_ipaddress(self, request):
        if isinstance(request, setcrvserver_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_redirect
    def setcrvserver_redirect(self, request):
        if isinstance(request, setcrvserver_redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_precedence
    def setcrvserver_precedence(self, request):
        if isinstance(request, setcrvserver_precedence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_via
    def setcrvserver_via(self, request):
        if isinstance(request, setcrvserver_via) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_cachevserver
    def setcrvserver_cachevserver(self, request):
        if isinstance(request, setcrvserver_cachevserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_dnsvservername
    def setcrvserver_dnsvservername(self, request):
        if isinstance(request, setcrvserver_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_destinationvserver
    def setcrvserver_destinationvserver(self, request):
        if isinstance(request, setcrvserver_destinationvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_domain
    def setcrvserver_domain(self, request):
        if isinstance(request, setcrvserver_domain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_reuse
    def setcrvserver_reuse(self, request):
        if isinstance(request, setcrvserver_reuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_backupvserver
    def setcrvserver_backupvserver(self, request):
        if isinstance(request, setcrvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_redirecturl
    def setcrvserver_redirecturl(self, request):
        if isinstance(request, setcrvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_clttimeout
    def setcrvserver_clttimeout(self, request):
        if isinstance(request, setcrvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcrvserver_downstateflush
    def setcrvserver_downstateflush(self, request):
        if isinstance(request, setcrvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcrvserverResponse.typecode.ofwhat, pyclass=setcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_cachevserver
    def unsetcrvserver_cachevserver(self, request):
        if isinstance(request, unsetcrvserver_cachevserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_dnsvserver
    def unsetcrvserver_dnsvserver(self, request):
        if isinstance(request, unsetcrvserver_dnsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_destinationvserver
    def unsetcrvserver_destinationvserver(self, request):
        if isinstance(request, unsetcrvserver_destinationvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_domainname
    def unsetcrvserver_domainname(self, request):
        if isinstance(request, unsetcrvserver_domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_backupvserver
    def unsetcrvserver_backupvserver(self, request):
        if isinstance(request, unsetcrvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_redirecturl
    def unsetcrvserver_redirecturl(self, request):
        if isinstance(request, unsetcrvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_redirect
    def unsetcrvserver_redirect(self, request):
        if isinstance(request, unsetcrvserver_redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_precedence
    def unsetcrvserver_precedence(self, request):
        if isinstance(request, unsetcrvserver_precedence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_via
    def unsetcrvserver_via(self, request):
        if isinstance(request, unsetcrvserver_via) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_cachevserver2
    def unsetcrvserver_cachevserver2(self, request):
        if isinstance(request, unsetcrvserver_cachevserver2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_dnsvservername
    def unsetcrvserver_dnsvservername(self, request):
        if isinstance(request, unsetcrvserver_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_destinationvserver2
    def unsetcrvserver_destinationvserver2(self, request):
        if isinstance(request, unsetcrvserver_destinationvserver2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_domain
    def unsetcrvserver_domain(self, request):
        if isinstance(request, unsetcrvserver_domain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_reuse
    def unsetcrvserver_reuse(self, request):
        if isinstance(request, unsetcrvserver_reuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_clttimeout
    def unsetcrvserver_clttimeout(self, request):
        if isinstance(request, unsetcrvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcrvserver_downstateflush
    def unsetcrvserver_downstateflush(self, request):
        if isinstance(request, unsetcrvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcrvserverResponse.typecode.ofwhat, pyclass=unsetcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindcrvserver_policy
    def bindcrvserver_policy(self, request):
        if isinstance(request, bindcrvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindcrvserverResponse.typecode.ofwhat, pyclass=bindcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindcrvserver_policy
    def unbindcrvserver_policy(self, request):
        if isinstance(request, unbindcrvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindcrvserverResponse.typecode.ofwhat, pyclass=unbindcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablecrvserver
    def enablecrvserver(self, request):
        if isinstance(request, enablecrvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablecrvserverResponse.typecode.ofwhat, pyclass=enablecrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablecrvserver
    def disablecrvserver(self, request):
        if isinstance(request, disablecrvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablecrvserverResponse.typecode.ofwhat, pyclass=disablecrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcrvserver
    def getcrvserver(self, request):
        if isinstance(request, getcrvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcrvserverResponse.typecode.ofwhat, pyclass=getcrvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcspolicy
    def addcspolicy(self, request):
        if isinstance(request, addcspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcspolicyResponse.typecode.ofwhat, pyclass=addcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcspolicy
    def rmcspolicy(self, request):
        if isinstance(request, rmcspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcspolicyResponse.typecode.ofwhat, pyclass=rmcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcspolicy_url
    def setcspolicy_url(self, request):
        if isinstance(request, setcspolicy_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcspolicyResponse.typecode.ofwhat, pyclass=setcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcspolicy_rule
    def setcspolicy_rule(self, request):
        if isinstance(request, setcspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcspolicyResponse.typecode.ofwhat, pyclass=setcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcspolicy_domain
    def setcspolicy_domain(self, request):
        if isinstance(request, setcspolicy_domain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcspolicyResponse.typecode.ofwhat, pyclass=setcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcspolicy_url
    def unsetcspolicy_url(self, request):
        if isinstance(request, unsetcspolicy_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcspolicyResponse.typecode.ofwhat, pyclass=unsetcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcspolicy_rule
    def unsetcspolicy_rule(self, request):
        if isinstance(request, unsetcspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcspolicyResponse.typecode.ofwhat, pyclass=unsetcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcspolicy_domain
    def unsetcspolicy_domain(self, request):
        if isinstance(request, unsetcspolicy_domain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcspolicyResponse.typecode.ofwhat, pyclass=unsetcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcspolicy
    def getcspolicy(self, request):
        if isinstance(request, getcspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcspolicyResponse.typecode.ofwhat, pyclass=getcspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcsvserver
    def addcsvserver(self, request):
        if isinstance(request, addcsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcsvserverResponse.typecode.ofwhat, pyclass=addcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addcsvserverEx
    def addcsvserverEx(self, request):
        if isinstance(request, addcsvserverEx) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addcsvserverResponse.typecode.ofwhat, pyclass=addcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmcsvserver
    def rmcsvserver(self, request):
        if isinstance(request, rmcsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmcsvserverResponse.typecode.ofwhat, pyclass=rmcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_ipaddress
    def setcsvserver_ipaddress(self, request):
        if isinstance(request, setcsvserver_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_ippattern
    def setcsvserver_ippattern(self, request):
        if isinstance(request, setcsvserver_ippattern) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_ipmask
    def setcsvserver_ipmask(self, request):
        if isinstance(request, setcsvserver_ipmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_stateupdate
    def setcsvserver_stateupdate(self, request):
        if isinstance(request, setcsvserver_stateupdate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_precedence
    def setcsvserver_precedence(self, request):
        if isinstance(request, setcsvserver_precedence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_casesensitive
    def setcsvserver_casesensitive(self, request):
        if isinstance(request, setcsvserver_casesensitive) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_backupvserver
    def setcsvserver_backupvserver(self, request):
        if isinstance(request, setcsvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_redirecturl
    def setcsvserver_redirecturl(self, request):
        if isinstance(request, setcsvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_cacheable
    def setcsvserver_cacheable(self, request):
        if isinstance(request, setcsvserver_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_clttimeout
    def setcsvserver_clttimeout(self, request):
        if isinstance(request, setcsvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_somethod
    def setcsvserver_somethod(self, request):
        if isinstance(request, setcsvserver_somethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_sopersistence
    def setcsvserver_sopersistence(self, request):
        if isinstance(request, setcsvserver_sopersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_sopersistencetimeout
    def setcsvserver_sopersistencetimeout(self, request):
        if isinstance(request, setcsvserver_sopersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_sothreshold
    def setcsvserver_sothreshold(self, request):
        if isinstance(request, setcsvserver_sothreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_redirectportrewrite
    def setcsvserver_redirectportrewrite(self, request):
        if isinstance(request, setcsvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_downstateflush
    def setcsvserver_downstateflush(self, request):
        if isinstance(request, setcsvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setcsvserver_insertvserveripport
    def setcsvserver_insertvserveripport(self, request):
        if isinstance(request, setcsvserver_insertvserveripport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setcsvserverResponse.typecode.ofwhat, pyclass=setcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_casesensitive
    def unsetcsvserver_casesensitive(self, request):
        if isinstance(request, unsetcsvserver_casesensitive) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_backupvserver
    def unsetcsvserver_backupvserver(self, request):
        if isinstance(request, unsetcsvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_redirecturl
    def unsetcsvserver_redirecturl(self, request):
        if isinstance(request, unsetcsvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_stateupdate
    def unsetcsvserver_stateupdate(self, request):
        if isinstance(request, unsetcsvserver_stateupdate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_precedence
    def unsetcsvserver_precedence(self, request):
        if isinstance(request, unsetcsvserver_precedence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_cacheable
    def unsetcsvserver_cacheable(self, request):
        if isinstance(request, unsetcsvserver_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_clttimeout
    def unsetcsvserver_clttimeout(self, request):
        if isinstance(request, unsetcsvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_somethod
    def unsetcsvserver_somethod(self, request):
        if isinstance(request, unsetcsvserver_somethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_sopersistence
    def unsetcsvserver_sopersistence(self, request):
        if isinstance(request, unsetcsvserver_sopersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_sopersistencetimeout
    def unsetcsvserver_sopersistencetimeout(self, request):
        if isinstance(request, unsetcsvserver_sopersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_sothreshold
    def unsetcsvserver_sothreshold(self, request):
        if isinstance(request, unsetcsvserver_sothreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_redirectportrewrite
    def unsetcsvserver_redirectportrewrite(self, request):
        if isinstance(request, unsetcsvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_downstateflush
    def unsetcsvserver_downstateflush(self, request):
        if isinstance(request, unsetcsvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_insertvserveripport
    def unsetcsvserver_insertvserveripport(self, request):
        if isinstance(request, unsetcsvserver_insertvserveripport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetcsvserver_vipheader
    def unsetcsvserver_vipheader(self, request):
        if isinstance(request, unsetcsvserver_vipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetcsvserverResponse.typecode.ofwhat, pyclass=unsetcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindcsvserver_targetvserver
    def bindcsvserver_targetvserver(self, request):
        if isinstance(request, bindcsvserver_targetvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindcsvserverResponse.typecode.ofwhat, pyclass=bindcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindcsvserver_policy
    def unbindcsvserver_policy(self, request):
        if isinstance(request, unbindcsvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindcsvserverResponse.typecode.ofwhat, pyclass=unbindcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablecsvserver
    def enablecsvserver(self, request):
        if isinstance(request, enablecsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablecsvserverResponse.typecode.ofwhat, pyclass=enablecsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablecsvserver
    def disablecsvserver(self, request):
        if isinstance(request, disablecsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablecsvserverResponse.typecode.ofwhat, pyclass=disablecsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getcsvserver
    def getcsvserver(self, request):
        if isinstance(request, getcsvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getcsvserverResponse.typecode.ofwhat, pyclass=getcsvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: flushdnsproxyrecords
    def flushdnsproxyrecords(self, request):
        if isinstance(request, flushdnsproxyrecords) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=flushdnsproxyrecordsResponse.typecode.ofwhat, pyclass=flushdnsproxyrecordsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsaaaarec
    def adddnsaaaarec(self, request):
        if isinstance(request, adddnsaaaarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsaaaarecResponse.typecode.ofwhat, pyclass=adddnsaaaarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsaaaarec
    def rmdnsaaaarec(self, request):
        if isinstance(request, rmdnsaaaarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsaaaarecResponse.typecode.ofwhat, pyclass=rmdnsaaaarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsaaaarec
    def getdnsaaaarec(self, request):
        if isinstance(request, getdnsaaaarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsaaaarecResponse.typecode.ofwhat, pyclass=getdnsaaaarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsaddrec
    def adddnsaddrec(self, request):
        if isinstance(request, adddnsaddrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsaddrecResponse.typecode.ofwhat, pyclass=adddnsaddrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsaddrec
    def rmdnsaddrec(self, request):
        if isinstance(request, rmdnsaddrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsaddrecResponse.typecode.ofwhat, pyclass=rmdnsaddrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsaddrec
    def getdnsaddrec(self, request):
        if isinstance(request, getdnsaddrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsaddrecResponse.typecode.ofwhat, pyclass=getdnsaddrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnscnamerec
    def adddnscnamerec(self, request):
        if isinstance(request, adddnscnamerec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnscnamerecResponse.typecode.ofwhat, pyclass=adddnscnamerecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnscnamerec
    def rmdnscnamerec(self, request):
        if isinstance(request, rmdnscnamerec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnscnamerecResponse.typecode.ofwhat, pyclass=rmdnscnamerecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnscnamerec
    def getdnscnamerec(self, request):
        if isinstance(request, getdnscnamerec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnscnamerecResponse.typecode.ofwhat, pyclass=getdnscnamerecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsmxrec
    def adddnsmxrec(self, request):
        if isinstance(request, adddnsmxrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsmxrecResponse.typecode.ofwhat, pyclass=adddnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsmxrec
    def rmdnsmxrec(self, request):
        if isinstance(request, rmdnsmxrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsmxrecResponse.typecode.ofwhat, pyclass=rmdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsmxrec_mx
    def setdnsmxrec_mx(self, request):
        if isinstance(request, setdnsmxrec_mx) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsmxrecResponse.typecode.ofwhat, pyclass=setdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsmxrec_pref
    def setdnsmxrec_pref(self, request):
        if isinstance(request, setdnsmxrec_pref) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsmxrecResponse.typecode.ofwhat, pyclass=setdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsmxrec_ttl
    def setdnsmxrec_ttl(self, request):
        if isinstance(request, setdnsmxrec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsmxrecResponse.typecode.ofwhat, pyclass=setdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsmxrec_ttl
    def unsetdnsmxrec_ttl(self, request):
        if isinstance(request, unsetdnsmxrec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsmxrecResponse.typecode.ofwhat, pyclass=unsetdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsmxrec
    def getdnsmxrec(self, request):
        if isinstance(request, getdnsmxrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsmxrecResponse.typecode.ofwhat, pyclass=getdnsmxrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsnsrec
    def adddnsnsrec(self, request):
        if isinstance(request, adddnsnsrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsnsrecResponse.typecode.ofwhat, pyclass=adddnsnsrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsnsrec
    def rmdnsnsrec(self, request):
        if isinstance(request, rmdnsnsrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsnsrecResponse.typecode.ofwhat, pyclass=rmdnsnsrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsnsrec
    def getdnsnsrec(self, request):
        if isinstance(request, getdnsnsrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsnsrecResponse.typecode.ofwhat, pyclass=getdnsnsrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsptrrec
    def adddnsptrrec(self, request):
        if isinstance(request, adddnsptrrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsptrrecResponse.typecode.ofwhat, pyclass=adddnsptrrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsptrrec
    def rmdnsptrrec(self, request):
        if isinstance(request, rmdnsptrrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsptrrecResponse.typecode.ofwhat, pyclass=rmdnsptrrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsptrrec
    def getdnsptrrec(self, request):
        if isinstance(request, getdnsptrrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsptrrecResponse.typecode.ofwhat, pyclass=getdnsptrrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnssrvrec
    def adddnssrvrec(self, request):
        if isinstance(request, adddnssrvrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnssrvrecResponse.typecode.ofwhat, pyclass=adddnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnssrvrec
    def rmdnssrvrec(self, request):
        if isinstance(request, rmdnssrvrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnssrvrecResponse.typecode.ofwhat, pyclass=rmdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssrvrec_priority
    def setdnssrvrec_priority(self, request):
        if isinstance(request, setdnssrvrec_priority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssrvrecResponse.typecode.ofwhat, pyclass=setdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssrvrec_weight
    def setdnssrvrec_weight(self, request):
        if isinstance(request, setdnssrvrec_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssrvrecResponse.typecode.ofwhat, pyclass=setdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssrvrec_port
    def setdnssrvrec_port(self, request):
        if isinstance(request, setdnssrvrec_port) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssrvrecResponse.typecode.ofwhat, pyclass=setdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssrvrec_ttl
    def setdnssrvrec_ttl(self, request):
        if isinstance(request, setdnssrvrec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssrvrecResponse.typecode.ofwhat, pyclass=setdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssrvrec_ttl
    def unsetdnssrvrec_ttl(self, request):
        if isinstance(request, unsetdnssrvrec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssrvrecResponse.typecode.ofwhat, pyclass=unsetdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnssrvrec
    def getdnssrvrec(self, request):
        if isinstance(request, getdnssrvrec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnssrvrecResponse.typecode.ofwhat, pyclass=getdnssrvrecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_retries
    def setdnsparameter_retries(self, request):
        if isinstance(request, setdnsparameter_retries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_minttl
    def setdnsparameter_minttl(self, request):
        if isinstance(request, setdnsparameter_minttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_maxttl
    def setdnsparameter_maxttl(self, request):
        if isinstance(request, setdnsparameter_maxttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_cacherecords
    def setdnsparameter_cacherecords(self, request):
        if isinstance(request, setdnsparameter_cacherecords) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_namelookuppriority
    def setdnsparameter_namelookuppriority(self, request):
        if isinstance(request, setdnsparameter_namelookuppriority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnsparameter_recursion
    def setdnsparameter_recursion(self, request):
        if isinstance(request, setdnsparameter_recursion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnsparameterResponse.typecode.ofwhat, pyclass=setdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_retries
    def unsetdnsparameter_retries(self, request):
        if isinstance(request, unsetdnsparameter_retries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_minttl
    def unsetdnsparameter_minttl(self, request):
        if isinstance(request, unsetdnsparameter_minttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_maxttl
    def unsetdnsparameter_maxttl(self, request):
        if isinstance(request, unsetdnsparameter_maxttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_cacherecords
    def unsetdnsparameter_cacherecords(self, request):
        if isinstance(request, unsetdnsparameter_cacherecords) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_namelookuppriority
    def unsetdnsparameter_namelookuppriority(self, request):
        if isinstance(request, unsetdnsparameter_namelookuppriority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnsparameter_recursion
    def unsetdnsparameter_recursion(self, request):
        if isinstance(request, unsetdnsparameter_recursion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnsparameterResponse.typecode.ofwhat, pyclass=unsetdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsparameter
    def getdnsparameter(self, request):
        if isinstance(request, getdnsparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsparameterResponse.typecode.ofwhat, pyclass=getdnsparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnssoarec
    def adddnssoarec(self, request):
        if isinstance(request, adddnssoarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnssoarecResponse.typecode.ofwhat, pyclass=adddnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnssoarec
    def rmdnssoarec(self, request):
        if isinstance(request, rmdnssoarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnssoarecResponse.typecode.ofwhat, pyclass=rmdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_originserver
    def setdnssoarec_originserver(self, request):
        if isinstance(request, setdnssoarec_originserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_contact
    def setdnssoarec_contact(self, request):
        if isinstance(request, setdnssoarec_contact) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_serial
    def setdnssoarec_serial(self, request):
        if isinstance(request, setdnssoarec_serial) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_refresh
    def setdnssoarec_refresh(self, request):
        if isinstance(request, setdnssoarec_refresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_retry
    def setdnssoarec_retry(self, request):
        if isinstance(request, setdnssoarec_retry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_expire
    def setdnssoarec_expire(self, request):
        if isinstance(request, setdnssoarec_expire) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_minimum
    def setdnssoarec_minimum(self, request):
        if isinstance(request, setdnssoarec_minimum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnssoarec_ttl
    def setdnssoarec_ttl(self, request):
        if isinstance(request, setdnssoarec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnssoarecResponse.typecode.ofwhat, pyclass=setdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_serial
    def unsetdnssoarec_serial(self, request):
        if isinstance(request, unsetdnssoarec_serial) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_refresh
    def unsetdnssoarec_refresh(self, request):
        if isinstance(request, unsetdnssoarec_refresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_retry
    def unsetdnssoarec_retry(self, request):
        if isinstance(request, unsetdnssoarec_retry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_expire
    def unsetdnssoarec_expire(self, request):
        if isinstance(request, unsetdnssoarec_expire) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_minimum
    def unsetdnssoarec_minimum(self, request):
        if isinstance(request, unsetdnssoarec_minimum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdnssoarec_ttl
    def unsetdnssoarec_ttl(self, request):
        if isinstance(request, unsetdnssoarec_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdnssoarecResponse.typecode.ofwhat, pyclass=unsetdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnssoarec
    def getdnssoarec(self, request):
        if isinstance(request, getdnssoarec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnssoarecResponse.typecode.ofwhat, pyclass=getdnssoarecResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnssuffix
    def adddnssuffix(self, request):
        if isinstance(request, adddnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnssuffixResponse.typecode.ofwhat, pyclass=adddnssuffixResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnssuffix
    def rmdnssuffix(self, request):
        if isinstance(request, rmdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnssuffixResponse.typecode.ofwhat, pyclass=rmdnssuffixResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnssuffix
    def getdnssuffix(self, request):
        if isinstance(request, getdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnssuffixResponse.typecode.ofwhat, pyclass=getdnssuffixResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsnameserver
    def adddnsnameserver(self, request):
        if isinstance(request, adddnsnameserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsnameserverResponse.typecode.ofwhat, pyclass=adddnsnameserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsnameserver
    def rmdnsnameserver(self, request):
        if isinstance(request, rmdnsnameserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsnameserverResponse.typecode.ofwhat, pyclass=rmdnsnameserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablednsnameserver
    def enablednsnameserver(self, request):
        if isinstance(request, enablednsnameserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablednsnameserverResponse.typecode.ofwhat, pyclass=enablednsnameserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablednsnameserver
    def disablednsnameserver(self, request):
        if isinstance(request, disablednsnameserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablednsnameserverResponse.typecode.ofwhat, pyclass=disablednsnameserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsnameserver
    def getdnsnameserver(self, request):
        if isinstance(request, getdnsnameserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsnameserverResponse.typecode.ofwhat, pyclass=getdnsnameserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnsview
    def adddnsview(self, request):
        if isinstance(request, adddnsview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnsviewResponse.typecode.ofwhat, pyclass=adddnsviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnsview
    def rmdnsview(self, request):
        if isinstance(request, rmdnsview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnsviewResponse.typecode.ofwhat, pyclass=rmdnsviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsview
    def getdnsview(self, request):
        if isinstance(request, getdnsview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsviewResponse.typecode.ofwhat, pyclass=getdnsviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddnspolicy
    def adddnspolicy(self, request):
        if isinstance(request, adddnspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddnspolicyResponse.typecode.ofwhat, pyclass=adddnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdnspolicy
    def rmdnspolicy(self, request):
        if isinstance(request, rmdnspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdnspolicyResponse.typecode.ofwhat, pyclass=rmdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnspolicy_rule
    def setdnspolicy_rule(self, request):
        if isinstance(request, setdnspolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnspolicyResponse.typecode.ofwhat, pyclass=setdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnspolicy_viewname
    def setdnspolicy_viewname(self, request):
        if isinstance(request, setdnspolicy_viewname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnspolicyResponse.typecode.ofwhat, pyclass=setdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnspolicy_preferredlocation
    def setdnspolicy_preferredlocation(self, request):
        if isinstance(request, setdnspolicy_preferredlocation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnspolicyResponse.typecode.ofwhat, pyclass=setdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdnspolicy_drop
    def setdnspolicy_drop(self, request):
        if isinstance(request, setdnspolicy_drop) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdnspolicyResponse.typecode.ofwhat, pyclass=setdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnspolicy
    def getdnspolicy(self, request):
        if isinstance(request, getdnspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnspolicyResponse.typecode.ofwhat, pyclass=getdnspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: binddnsglobal_policyname
    def binddnsglobal_policyname(self, request):
        if isinstance(request, binddnsglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=binddnsglobalResponse.typecode.ofwhat, pyclass=binddnsglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbinddnsglobal_policyname
    def unbinddnsglobal_policyname(self, request):
        if isinstance(request, unbinddnsglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbinddnsglobalResponse.typecode.ofwhat, pyclass=unbinddnsglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdnsglobal
    def getdnsglobal(self, request):
        if isinstance(request, getdnsglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdnsglobalResponse.typecode.ofwhat, pyclass=getdnsglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: adddospolicy
    def adddospolicy(self, request):
        if isinstance(request, adddospolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=adddospolicyResponse.typecode.ofwhat, pyclass=adddospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmdospolicy
    def rmdospolicy(self, request):
        if isinstance(request, rmdospolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmdospolicyResponse.typecode.ofwhat, pyclass=rmdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdospolicy_qdepth
    def setdospolicy_qdepth(self, request):
        if isinstance(request, setdospolicy_qdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdospolicyResponse.typecode.ofwhat, pyclass=setdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setdospolicy_cltdetectrate
    def setdospolicy_cltdetectrate(self, request):
        if isinstance(request, setdospolicy_cltdetectrate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setdospolicyResponse.typecode.ofwhat, pyclass=setdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdospolicy_qdepth
    def unsetdospolicy_qdepth(self, request):
        if isinstance(request, unsetdospolicy_qdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdospolicyResponse.typecode.ofwhat, pyclass=unsetdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetdospolicy_cltdetectrate
    def unsetdospolicy_cltdetectrate(self, request):
        if isinstance(request, unsetdospolicy_cltdetectrate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetdospolicyResponse.typecode.ofwhat, pyclass=unsetdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getdospolicy
    def getdospolicy(self, request):
        if isinstance(request, getdospolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getdospolicyResponse.typecode.ofwhat, pyclass=getdospolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilterprebodyinjection_prebody
    def setfilterprebodyinjection_prebody(self, request):
        if isinstance(request, setfilterprebodyinjection_prebody) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilterprebodyinjectionResponse.typecode.ofwhat, pyclass=setfilterprebodyinjectionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfilterprebodyinjection
    def getfilterprebodyinjection(self, request):
        if isinstance(request, getfilterprebodyinjection) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfilterprebodyinjectionResponse.typecode.ofwhat, pyclass=getfilterprebodyinjectionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilterpostbodyinjection_postbody
    def setfilterpostbodyinjection_postbody(self, request):
        if isinstance(request, setfilterpostbodyinjection_postbody) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilterpostbodyinjectionResponse.typecode.ofwhat, pyclass=setfilterpostbodyinjectionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfilterpostbodyinjection
    def getfilterpostbodyinjection(self, request):
        if isinstance(request, getfilterpostbodyinjection) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfilterpostbodyinjectionResponse.typecode.ofwhat, pyclass=getfilterpostbodyinjectionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addfilteraction
    def addfilteraction(self, request):
        if isinstance(request, addfilteraction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addfilteractionResponse.typecode.ofwhat, pyclass=addfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmfilteraction
    def rmfilteraction(self, request):
        if isinstance(request, rmfilteraction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmfilteractionResponse.typecode.ofwhat, pyclass=rmfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilteraction_servicename
    def setfilteraction_servicename(self, request):
        if isinstance(request, setfilteraction_servicename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilteractionResponse.typecode.ofwhat, pyclass=setfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilteraction_value
    def setfilteraction_value(self, request):
        if isinstance(request, setfilteraction_value) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilteractionResponse.typecode.ofwhat, pyclass=setfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilteraction_respcode
    def setfilteraction_respcode(self, request):
        if isinstance(request, setfilteraction_respcode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilteractionResponse.typecode.ofwhat, pyclass=setfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilteraction_page
    def setfilteraction_page(self, request):
        if isinstance(request, setfilteraction_page) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilteractionResponse.typecode.ofwhat, pyclass=setfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetfilteraction_page
    def unsetfilteraction_page(self, request):
        if isinstance(request, unsetfilteraction_page) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetfilteractionResponse.typecode.ofwhat, pyclass=unsetfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfilteraction
    def getfilteraction(self, request):
        if isinstance(request, getfilteraction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfilteractionResponse.typecode.ofwhat, pyclass=getfilteractionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addfilterpolicy
    def addfilterpolicy(self, request):
        if isinstance(request, addfilterpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addfilterpolicyResponse.typecode.ofwhat, pyclass=addfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmfilterpolicy
    def rmfilterpolicy(self, request):
        if isinstance(request, rmfilterpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmfilterpolicyResponse.typecode.ofwhat, pyclass=rmfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilterpolicy_rule
    def setfilterpolicy_rule(self, request):
        if isinstance(request, setfilterpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilterpolicyResponse.typecode.ofwhat, pyclass=setfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilterpolicy_reqaction
    def setfilterpolicy_reqaction(self, request):
        if isinstance(request, setfilterpolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilterpolicyResponse.typecode.ofwhat, pyclass=setfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setfilterpolicy_resaction
    def setfilterpolicy_resaction(self, request):
        if isinstance(request, setfilterpolicy_resaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setfilterpolicyResponse.typecode.ofwhat, pyclass=setfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetfilterpolicy_rule
    def unsetfilterpolicy_rule(self, request):
        if isinstance(request, unsetfilterpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetfilterpolicyResponse.typecode.ofwhat, pyclass=unsetfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetfilterpolicy_reqaction
    def unsetfilterpolicy_reqaction(self, request):
        if isinstance(request, unsetfilterpolicy_reqaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetfilterpolicyResponse.typecode.ofwhat, pyclass=unsetfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetfilterpolicy_resaction
    def unsetfilterpolicy_resaction(self, request):
        if isinstance(request, unsetfilterpolicy_resaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetfilterpolicyResponse.typecode.ofwhat, pyclass=unsetfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfilterpolicy
    def getfilterpolicy(self, request):
        if isinstance(request, getfilterpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfilterpolicyResponse.typecode.ofwhat, pyclass=getfilterpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindfilterglobal_policy
    def bindfilterglobal_policy(self, request):
        if isinstance(request, bindfilterglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindfilterglobalResponse.typecode.ofwhat, pyclass=bindfilterglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindfilterglobal_policy
    def unbindfilterglobal_policy(self, request):
        if isinstance(request, unbindfilterglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindfilterglobalResponse.typecode.ofwhat, pyclass=unbindfilterglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfilterglobal
    def getfilterglobal(self, request):
        if isinstance(request, getfilterglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfilterglobalResponse.typecode.ofwhat, pyclass=getfilterglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addgslbsite
    def addgslbsite(self, request):
        if isinstance(request, addgslbsite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addgslbsiteResponse.typecode.ofwhat, pyclass=addgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbsite
    def rmgslbsite(self, request):
        if isinstance(request, rmgslbsite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbsiteResponse.typecode.ofwhat, pyclass=rmgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbsite_metricexchange
    def setgslbsite_metricexchange(self, request):
        if isinstance(request, setgslbsite_metricexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbsiteResponse.typecode.ofwhat, pyclass=setgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbsite_nwmetricexchange
    def setgslbsite_nwmetricexchange(self, request):
        if isinstance(request, setgslbsite_nwmetricexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbsiteResponse.typecode.ofwhat, pyclass=setgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbsite_sessionexchange
    def setgslbsite_sessionexchange(self, request):
        if isinstance(request, setgslbsite_sessionexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbsiteResponse.typecode.ofwhat, pyclass=setgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbsite_triggermonitor
    def setgslbsite_triggermonitor(self, request):
        if isinstance(request, setgslbsite_triggermonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbsiteResponse.typecode.ofwhat, pyclass=setgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbsite_metricexchange
    def unsetgslbsite_metricexchange(self, request):
        if isinstance(request, unsetgslbsite_metricexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbsiteResponse.typecode.ofwhat, pyclass=unsetgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbsite_nwmetricexchange
    def unsetgslbsite_nwmetricexchange(self, request):
        if isinstance(request, unsetgslbsite_nwmetricexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbsiteResponse.typecode.ofwhat, pyclass=unsetgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbsite_sessionexchange
    def unsetgslbsite_sessionexchange(self, request):
        if isinstance(request, unsetgslbsite_sessionexchange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbsiteResponse.typecode.ofwhat, pyclass=unsetgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbsite_triggermonitor
    def unsetgslbsite_triggermonitor(self, request):
        if isinstance(request, unsetgslbsite_triggermonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbsiteResponse.typecode.ofwhat, pyclass=unsetgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbsite
    def getgslbsite(self, request):
        if isinstance(request, getgslbsite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbsiteResponse.typecode.ofwhat, pyclass=getgslbsiteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addgslbservice
    def addgslbservice(self, request):
        if isinstance(request, addgslbservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addgslbserviceResponse.typecode.ofwhat, pyclass=addgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbservice
    def rmgslbservice(self, request):
        if isinstance(request, rmgslbservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbserviceResponse.typecode.ofwhat, pyclass=rmgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_ipaddress
    def setgslbservice_ipaddress(self, request):
        if isinstance(request, setgslbservice_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_publicip
    def setgslbservice_publicip(self, request):
        if isinstance(request, setgslbservice_publicip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_publicport
    def setgslbservice_publicport(self, request):
        if isinstance(request, setgslbservice_publicport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_cip
    def setgslbservice_cip(self, request):
        if isinstance(request, setgslbservice_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_sitepersistence
    def setgslbservice_sitepersistence(self, request):
        if isinstance(request, setgslbservice_sitepersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_siteprefix
    def setgslbservice_siteprefix(self, request):
        if isinstance(request, setgslbservice_siteprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_maxclient
    def setgslbservice_maxclient(self, request):
        if isinstance(request, setgslbservice_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_maxbandwidth
    def setgslbservice_maxbandwidth(self, request):
        if isinstance(request, setgslbservice_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_downstateflush
    def setgslbservice_downstateflush(self, request):
        if isinstance(request, setgslbservice_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_view
    def setgslbservice_view(self, request):
        if isinstance(request, setgslbservice_view) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_monthreshold
    def setgslbservice_monthreshold(self, request):
        if isinstance(request, setgslbservice_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbservice_weight
    def setgslbservice_weight(self, request):
        if isinstance(request, setgslbservice_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbserviceResponse.typecode.ofwhat, pyclass=setgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_publicip
    def unsetgslbservice_publicip(self, request):
        if isinstance(request, unsetgslbservice_publicip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_publicport
    def unsetgslbservice_publicport(self, request):
        if isinstance(request, unsetgslbservice_publicport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_cip
    def unsetgslbservice_cip(self, request):
        if isinstance(request, unsetgslbservice_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_cipheader
    def unsetgslbservice_cipheader(self, request):
        if isinstance(request, unsetgslbservice_cipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_sitepersistence
    def unsetgslbservice_sitepersistence(self, request):
        if isinstance(request, unsetgslbservice_sitepersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_siteprefix
    def unsetgslbservice_siteprefix(self, request):
        if isinstance(request, unsetgslbservice_siteprefix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_maxclient
    def unsetgslbservice_maxclient(self, request):
        if isinstance(request, unsetgslbservice_maxclient) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_maxbandwidth
    def unsetgslbservice_maxbandwidth(self, request):
        if isinstance(request, unsetgslbservice_maxbandwidth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_downstateflush
    def unsetgslbservice_downstateflush(self, request):
        if isinstance(request, unsetgslbservice_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_viewip
    def unsetgslbservice_viewip(self, request):
        if isinstance(request, unsetgslbservice_viewip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_monthreshold
    def unsetgslbservice_monthreshold(self, request):
        if isinstance(request, unsetgslbservice_monthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbservice_monitorname
    def unsetgslbservice_monitorname(self, request):
        if isinstance(request, unsetgslbservice_monitorname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbserviceResponse.typecode.ofwhat, pyclass=unsetgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindgslbservice_view
    def bindgslbservice_view(self, request):
        if isinstance(request, bindgslbservice_view) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindgslbserviceResponse.typecode.ofwhat, pyclass=bindgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindgslbservice_view
    def unbindgslbservice_view(self, request):
        if isinstance(request, unbindgslbservice_view) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindgslbserviceResponse.typecode.ofwhat, pyclass=unbindgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbservice
    def getgslbservice(self, request):
        if isinstance(request, getgslbservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbserviceResponse.typecode.ofwhat, pyclass=getgslbserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addgslbvserver
    def addgslbvserver(self, request):
        if isinstance(request, addgslbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addgslbvserverResponse.typecode.ofwhat, pyclass=addgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbvserver
    def rmgslbvserver(self, request):
        if isinstance(request, rmgslbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbvserverResponse.typecode.ofwhat, pyclass=rmgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_backupvserver
    def setgslbvserver_backupvserver(self, request):
        if isinstance(request, setgslbvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_backupsessiontimeout
    def setgslbvserver_backupsessiontimeout(self, request):
        if isinstance(request, setgslbvserver_backupsessiontimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_lbmethod
    def setgslbvserver_lbmethod(self, request):
        if isinstance(request, setgslbvserver_lbmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_netmask
    def setgslbvserver_netmask(self, request):
        if isinstance(request, setgslbvserver_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_tolerance
    def setgslbvserver_tolerance(self, request):
        if isinstance(request, setgslbvserver_tolerance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_persistencetype
    def setgslbvserver_persistencetype(self, request):
        if isinstance(request, setgslbvserver_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_persistenceid
    def setgslbvserver_persistenceid(self, request):
        if isinstance(request, setgslbvserver_persistenceid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_persistmask
    def setgslbvserver_persistmask(self, request):
        if isinstance(request, setgslbvserver_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_timeout
    def setgslbvserver_timeout(self, request):
        if isinstance(request, setgslbvserver_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_edr
    def setgslbvserver_edr(self, request):
        if isinstance(request, setgslbvserver_edr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_mir
    def setgslbvserver_mir(self, request):
        if isinstance(request, setgslbvserver_mir) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_disableprimaryondown
    def setgslbvserver_disableprimaryondown(self, request):
        if isinstance(request, setgslbvserver_disableprimaryondown) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_dynamicweight
    def setgslbvserver_dynamicweight(self, request):
        if isinstance(request, setgslbvserver_dynamicweight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_considereffectivestate
    def setgslbvserver_considereffectivestate(self, request):
        if isinstance(request, setgslbvserver_considereffectivestate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_service
    def setgslbvserver_service(self, request):
        if isinstance(request, setgslbvserver_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbvserver_domainname
    def setgslbvserver_domainname(self, request):
        if isinstance(request, setgslbvserver_domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbvserverResponse.typecode.ofwhat, pyclass=setgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_backupvserver
    def unsetgslbvserver_backupvserver(self, request):
        if isinstance(request, unsetgslbvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_backupsessiontimeout
    def unsetgslbvserver_backupsessiontimeout(self, request):
        if isinstance(request, unsetgslbvserver_backupsessiontimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_lbmethod
    def unsetgslbvserver_lbmethod(self, request):
        if isinstance(request, unsetgslbvserver_lbmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_backuplbmethod
    def unsetgslbvserver_backuplbmethod(self, request):
        if isinstance(request, unsetgslbvserver_backuplbmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_netmask
    def unsetgslbvserver_netmask(self, request):
        if isinstance(request, unsetgslbvserver_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_tolerance
    def unsetgslbvserver_tolerance(self, request):
        if isinstance(request, unsetgslbvserver_tolerance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_persistencetype
    def unsetgslbvserver_persistencetype(self, request):
        if isinstance(request, unsetgslbvserver_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_persistenceid
    def unsetgslbvserver_persistenceid(self, request):
        if isinstance(request, unsetgslbvserver_persistenceid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_persistmask
    def unsetgslbvserver_persistmask(self, request):
        if isinstance(request, unsetgslbvserver_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_timeout
    def unsetgslbvserver_timeout(self, request):
        if isinstance(request, unsetgslbvserver_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_edr
    def unsetgslbvserver_edr(self, request):
        if isinstance(request, unsetgslbvserver_edr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_mir
    def unsetgslbvserver_mir(self, request):
        if isinstance(request, unsetgslbvserver_mir) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_disableprimaryondown
    def unsetgslbvserver_disableprimaryondown(self, request):
        if isinstance(request, unsetgslbvserver_disableprimaryondown) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_dynamicweight
    def unsetgslbvserver_dynamicweight(self, request):
        if isinstance(request, unsetgslbvserver_dynamicweight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_considereffectivestate
    def unsetgslbvserver_considereffectivestate(self, request):
        if isinstance(request, unsetgslbvserver_considereffectivestate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_servicename
    def unsetgslbvserver_servicename(self, request):
        if isinstance(request, unsetgslbvserver_servicename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_weight
    def unsetgslbvserver_weight(self, request):
        if isinstance(request, unsetgslbvserver_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_domainname
    def unsetgslbvserver_domainname(self, request):
        if isinstance(request, unsetgslbvserver_domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_ttl
    def unsetgslbvserver_ttl(self, request):
        if isinstance(request, unsetgslbvserver_ttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_backupip
    def unsetgslbvserver_backupip(self, request):
        if isinstance(request, unsetgslbvserver_backupip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_cookiedomain
    def unsetgslbvserver_cookiedomain(self, request):
        if isinstance(request, unsetgslbvserver_cookiedomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_cookietimeout
    def unsetgslbvserver_cookietimeout(self, request):
        if isinstance(request, unsetgslbvserver_cookietimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbvserver_sitedomainttl
    def unsetgslbvserver_sitedomainttl(self, request):
        if isinstance(request, unsetgslbvserver_sitedomainttl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbvserverResponse.typecode.ofwhat, pyclass=unsetgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindgslbvserver_service
    def bindgslbvserver_service(self, request):
        if isinstance(request, bindgslbvserver_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindgslbvserverResponse.typecode.ofwhat, pyclass=bindgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindgslbvserver_domainname
    def bindgslbvserver_domainname(self, request):
        if isinstance(request, bindgslbvserver_domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindgslbvserverResponse.typecode.ofwhat, pyclass=bindgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindgslbvserver_service
    def unbindgslbvserver_service(self, request):
        if isinstance(request, unbindgslbvserver_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindgslbvserverResponse.typecode.ofwhat, pyclass=unbindgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindgslbvserver_domainname
    def unbindgslbvserver_domainname(self, request):
        if isinstance(request, unbindgslbvserver_domainname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindgslbvserverResponse.typecode.ofwhat, pyclass=unbindgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablegslbvserver
    def enablegslbvserver(self, request):
        if isinstance(request, enablegslbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablegslbvserverResponse.typecode.ofwhat, pyclass=enablegslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablegslbvserver
    def disablegslbvserver(self, request):
        if isinstance(request, disablegslbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablegslbvserverResponse.typecode.ofwhat, pyclass=disablegslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbvserver
    def getgslbvserver(self, request):
        if isinstance(request, getgslbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbvserverResponse.typecode.ofwhat, pyclass=getgslbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbparameter_ldnsentrytimeout
    def setgslbparameter_ldnsentrytimeout(self, request):
        if isinstance(request, setgslbparameter_ldnsentrytimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbparameterResponse.typecode.ofwhat, pyclass=setgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbparameter_rtttolerance
    def setgslbparameter_rtttolerance(self, request):
        if isinstance(request, setgslbparameter_rtttolerance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbparameterResponse.typecode.ofwhat, pyclass=setgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbparameter_ldnsmask
    def setgslbparameter_ldnsmask(self, request):
        if isinstance(request, setgslbparameter_ldnsmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbparameterResponse.typecode.ofwhat, pyclass=setgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbparameter_ldnsentrytimeout
    def unsetgslbparameter_ldnsentrytimeout(self, request):
        if isinstance(request, unsetgslbparameter_ldnsentrytimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbparameterResponse.typecode.ofwhat, pyclass=unsetgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbparameter_rtttolerance
    def unsetgslbparameter_rtttolerance(self, request):
        if isinstance(request, unsetgslbparameter_rtttolerance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbparameterResponse.typecode.ofwhat, pyclass=unsetgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetgslbparameter_ldnsmask
    def unsetgslbparameter_ldnsmask(self, request):
        if isinstance(request, unsetgslbparameter_ldnsmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetgslbparameterResponse.typecode.ofwhat, pyclass=unsetgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbparameter
    def getgslbparameter(self, request):
        if isinstance(request, getgslbparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbparameterResponse.typecode.ofwhat, pyclass=getgslbparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addgslbpolicy
    def addgslbpolicy(self, request):
        if isinstance(request, addgslbpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addgslbpolicyResponse.typecode.ofwhat, pyclass=addgslbpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbpolicy
    def rmgslbpolicy(self, request):
        if isinstance(request, rmgslbpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbpolicyResponse.typecode.ofwhat, pyclass=rmgslbpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbpolicy_action
    def setgslbpolicy_action(self, request):
        if isinstance(request, setgslbpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbpolicyResponse.typecode.ofwhat, pyclass=setgslbpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbpolicy
    def getgslbpolicy(self, request):
        if isinstance(request, getgslbpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbpolicyResponse.typecode.ofwhat, pyclass=getgslbpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addgslbaction
    def addgslbaction(self, request):
        if isinstance(request, addgslbaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addgslbactionResponse.typecode.ofwhat, pyclass=addgslbactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbaction
    def rmgslbaction(self, request):
        if isinstance(request, rmgslbaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbactionResponse.typecode.ofwhat, pyclass=rmgslbactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setgslbaction_preferredlocation
    def setgslbaction_preferredlocation(self, request):
        if isinstance(request, setgslbaction_preferredlocation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setgslbactionResponse.typecode.ofwhat, pyclass=setgslbactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbaction
    def getgslbaction(self, request):
        if isinstance(request, getgslbaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbactionResponse.typecode.ofwhat, pyclass=getgslbactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getgslbldnsentries
    def getgslbldnsentries(self, request):
        if isinstance(request, getgslbldnsentries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getgslbldnsentriesResponse.typecode.ofwhat, pyclass=getgslbldnsentriesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmgslbldnsentry
    def rmgslbldnsentry(self, request):
        if isinstance(request, rmgslbldnsentry) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmgslbldnsentryResponse.typecode.ofwhat, pyclass=rmgslbldnsentryResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: forcehafailover
    def forcehafailover(self, request):
        if isinstance(request, forcehafailover) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=forcehafailoverResponse.typecode.ofwhat, pyclass=forcehafailoverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: forcehasync
    def forcehasync(self, request):
        if isinstance(request, forcehasync) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=forcehasyncResponse.typecode.ofwhat, pyclass=forcehasyncResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: synchafiles
    def synchafiles(self, request):
        if isinstance(request, synchafiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=synchafilesResponse.typecode.ofwhat, pyclass=synchafilesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addhanode
    def addhanode(self, request):
        if isinstance(request, addhanode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addhanodeResponse.typecode.ofwhat, pyclass=addhanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmhanode
    def rmhanode(self, request):
        if isinstance(request, rmhanode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmhanodeResponse.typecode.ofwhat, pyclass=rmhanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sethanode_hastatus
    def sethanode_hastatus(self, request):
        if isinstance(request, sethanode_hastatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sethanodeResponse.typecode.ofwhat, pyclass=sethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sethanode_hasync
    def sethanode_hasync(self, request):
        if isinstance(request, sethanode_hasync) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sethanodeResponse.typecode.ofwhat, pyclass=sethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sethanode_haprop
    def sethanode_haprop(self, request):
        if isinstance(request, sethanode_haprop) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sethanodeResponse.typecode.ofwhat, pyclass=sethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sethanode_hellointerval
    def sethanode_hellointerval(self, request):
        if isinstance(request, sethanode_hellointerval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sethanodeResponse.typecode.ofwhat, pyclass=sethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sethanode_deadinterval
    def sethanode_deadinterval(self, request):
        if isinstance(request, sethanode_deadinterval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sethanodeResponse.typecode.ofwhat, pyclass=sethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsethanode_hastatus
    def unsethanode_hastatus(self, request):
        if isinstance(request, unsethanode_hastatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsethanodeResponse.typecode.ofwhat, pyclass=unsethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsethanode_hasync
    def unsethanode_hasync(self, request):
        if isinstance(request, unsethanode_hasync) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsethanodeResponse.typecode.ofwhat, pyclass=unsethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsethanode_haprop
    def unsethanode_haprop(self, request):
        if isinstance(request, unsethanode_haprop) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsethanodeResponse.typecode.ofwhat, pyclass=unsethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsethanode_hellointerval
    def unsethanode_hellointerval(self, request):
        if isinstance(request, unsethanode_hellointerval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsethanodeResponse.typecode.ofwhat, pyclass=unsethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsethanode_deadinterval
    def unsethanode_deadinterval(self, request):
        if isinstance(request, unsethanode_deadinterval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsethanodeResponse.typecode.ofwhat, pyclass=unsethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindhanode_routemonitor
    def bindhanode_routemonitor(self, request):
        if isinstance(request, bindhanode_routemonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindhanodeResponse.typecode.ofwhat, pyclass=bindhanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindhanode_routemonitor
    def unbindhanode_routemonitor(self, request):
        if isinstance(request, unbindhanode_routemonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindhanodeResponse.typecode.ofwhat, pyclass=unbindhanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: gethanode
    def gethanode(self, request):
        if isinstance(request, gethanode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=gethanodeResponse.typecode.ofwhat, pyclass=gethanodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbmonbindings
    def getlbmonbindings(self, request):
        if isinstance(request, getlbmonbindings) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbmonbindingsResponse.typecode.ofwhat, pyclass=getlbmonbindingsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlbmonitor
    def rmlbmonitor(self, request):
        if isinstance(request, rmlbmonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlbmonitorResponse.typecode.ofwhat, pyclass=rmlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablelbmonitor
    def enablelbmonitor(self, request):
        if isinstance(request, enablelbmonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablelbmonitorResponse.typecode.ofwhat, pyclass=enablelbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablelbmonitor
    def disablelbmonitor(self, request):
        if isinstance(request, disablelbmonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablelbmonitorResponse.typecode.ofwhat, pyclass=disablelbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_persistencetype
    def setlbgroup_persistencetype(self, request):
        if isinstance(request, setlbgroup_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_persistencebackup
    def setlbgroup_persistencebackup(self, request):
        if isinstance(request, setlbgroup_persistencebackup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_backuppersistencetimeout
    def setlbgroup_backuppersistencetimeout(self, request):
        if isinstance(request, setlbgroup_backuppersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_persistmask
    def setlbgroup_persistmask(self, request):
        if isinstance(request, setlbgroup_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_cookiedomain
    def setlbgroup_cookiedomain(self, request):
        if isinstance(request, setlbgroup_cookiedomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbgroup_timeout
    def setlbgroup_timeout(self, request):
        if isinstance(request, setlbgroup_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbgroupResponse.typecode.ofwhat, pyclass=setlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_persistencetype
    def unsetlbgroup_persistencetype(self, request):
        if isinstance(request, unsetlbgroup_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_persistencebackup
    def unsetlbgroup_persistencebackup(self, request):
        if isinstance(request, unsetlbgroup_persistencebackup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_backuppersistencetimeout
    def unsetlbgroup_backuppersistencetimeout(self, request):
        if isinstance(request, unsetlbgroup_backuppersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_persistmask
    def unsetlbgroup_persistmask(self, request):
        if isinstance(request, unsetlbgroup_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_cookiedomain
    def unsetlbgroup_cookiedomain(self, request):
        if isinstance(request, unsetlbgroup_cookiedomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbgroup_timeout
    def unsetlbgroup_timeout(self, request):
        if isinstance(request, unsetlbgroup_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbgroupResponse.typecode.ofwhat, pyclass=unsetlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbgroup_vserver
    def bindlbgroup_vserver(self, request):
        if isinstance(request, bindlbgroup_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbgroupResponse.typecode.ofwhat, pyclass=bindlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbgroup_vserver
    def unbindlbgroup_vserver(self, request):
        if isinstance(request, unbindlbgroup_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbgroupResponse.typecode.ofwhat, pyclass=unbindlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbgroup
    def getlbgroup(self, request):
        if isinstance(request, getlbgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbgroupResponse.typecode.ofwhat, pyclass=getlbgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlbmonitor
    def addlbmonitor(self, request):
        if isinstance(request, addlbmonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlbmonitorResponse.typecode.ofwhat, pyclass=addlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_action
    def setlbmonitor_action(self, request):
        if isinstance(request, setlbmonitor_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_respcode
    def setlbmonitor_respcode(self, request):
        if isinstance(request, setlbmonitor_respcode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_httprequest
    def setlbmonitor_httprequest(self, request):
        if isinstance(request, setlbmonitor_httprequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_customheaders
    def setlbmonitor_customheaders(self, request):
        if isinstance(request, setlbmonitor_customheaders) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_maxforwards
    def setlbmonitor_maxforwards(self, request):
        if isinstance(request, setlbmonitor_maxforwards) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_sipmethod
    def setlbmonitor_sipmethod(self, request):
        if isinstance(request, setlbmonitor_sipmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_sipuri
    def setlbmonitor_sipuri(self, request):
        if isinstance(request, setlbmonitor_sipuri) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_send
    def setlbmonitor_send(self, request):
        if isinstance(request, setlbmonitor_send) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_recv
    def setlbmonitor_recv(self, request):
        if isinstance(request, setlbmonitor_recv) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_query
    def setlbmonitor_query(self, request):
        if isinstance(request, setlbmonitor_query) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_querytype
    def setlbmonitor_querytype(self, request):
        if isinstance(request, setlbmonitor_querytype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_username
    def setlbmonitor_username(self, request):
        if isinstance(request, setlbmonitor_username) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_password
    def setlbmonitor_password(self, request):
        if isinstance(request, setlbmonitor_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_radkey
    def setlbmonitor_radkey(self, request):
        if isinstance(request, setlbmonitor_radkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_radnasid
    def setlbmonitor_radnasid(self, request):
        if isinstance(request, setlbmonitor_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_radnasip
    def setlbmonitor_radnasip(self, request):
        if isinstance(request, setlbmonitor_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_lrtm
    def setlbmonitor_lrtm(self, request):
        if isinstance(request, setlbmonitor_lrtm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_deviation
    def setlbmonitor_deviation(self, request):
        if isinstance(request, setlbmonitor_deviation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_scriptname
    def setlbmonitor_scriptname(self, request):
        if isinstance(request, setlbmonitor_scriptname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_scriptargs
    def setlbmonitor_scriptargs(self, request):
        if isinstance(request, setlbmonitor_scriptargs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_dispatcherip
    def setlbmonitor_dispatcherip(self, request):
        if isinstance(request, setlbmonitor_dispatcherip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_dispatcherport
    def setlbmonitor_dispatcherport(self, request):
        if isinstance(request, setlbmonitor_dispatcherport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_interval
    def setlbmonitor_interval(self, request):
        if isinstance(request, setlbmonitor_interval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_resptimeout
    def setlbmonitor_resptimeout(self, request):
        if isinstance(request, setlbmonitor_resptimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_resptimeoutthresh
    def setlbmonitor_resptimeoutthresh(self, request):
        if isinstance(request, setlbmonitor_resptimeoutthresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_retries
    def setlbmonitor_retries(self, request):
        if isinstance(request, setlbmonitor_retries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_downtime
    def setlbmonitor_downtime(self, request):
        if isinstance(request, setlbmonitor_downtime) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_destip
    def setlbmonitor_destip(self, request):
        if isinstance(request, setlbmonitor_destip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_destport
    def setlbmonitor_destport(self, request):
        if isinstance(request, setlbmonitor_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_state
    def setlbmonitor_state(self, request):
        if isinstance(request, setlbmonitor_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_reverse
    def setlbmonitor_reverse(self, request):
        if isinstance(request, setlbmonitor_reverse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_transparent
    def setlbmonitor_transparent(self, request):
        if isinstance(request, setlbmonitor_transparent) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_iptunnel
    def setlbmonitor_iptunnel(self, request):
        if isinstance(request, setlbmonitor_iptunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_tos
    def setlbmonitor_tos(self, request):
        if isinstance(request, setlbmonitor_tos) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_tosid
    def setlbmonitor_tosid(self, request):
        if isinstance(request, setlbmonitor_tosid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_secure
    def setlbmonitor_secure(self, request):
        if isinstance(request, setlbmonitor_secure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_ipaddress
    def setlbmonitor_ipaddress(self, request):
        if isinstance(request, setlbmonitor_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_group
    def setlbmonitor_group(self, request):
        if isinstance(request, setlbmonitor_group) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_filename
    def setlbmonitor_filename(self, request):
        if isinstance(request, setlbmonitor_filename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_basedn
    def setlbmonitor_basedn(self, request):
        if isinstance(request, setlbmonitor_basedn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_binddn
    def setlbmonitor_binddn(self, request):
        if isinstance(request, setlbmonitor_binddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_filter
    def setlbmonitor_filter(self, request):
        if isinstance(request, setlbmonitor_filter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_attribute
    def setlbmonitor_attribute(self, request):
        if isinstance(request, setlbmonitor_attribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_database
    def setlbmonitor_database(self, request):
        if isinstance(request, setlbmonitor_database) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_sqlquery
    def setlbmonitor_sqlquery(self, request):
        if isinstance(request, setlbmonitor_sqlquery) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_snmpoid
    def setlbmonitor_snmpoid(self, request):
        if isinstance(request, setlbmonitor_snmpoid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_snmpcommunity
    def setlbmonitor_snmpcommunity(self, request):
        if isinstance(request, setlbmonitor_snmpcommunity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_snmpthreshold
    def setlbmonitor_snmpthreshold(self, request):
        if isinstance(request, setlbmonitor_snmpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_snmpversion
    def setlbmonitor_snmpversion(self, request):
        if isinstance(request, setlbmonitor_snmpversion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_metrictable
    def setlbmonitor_metrictable(self, request):
        if isinstance(request, setlbmonitor_metrictable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_metric
    def setlbmonitor_metric(self, request):
        if isinstance(request, setlbmonitor_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_application
    def setlbmonitor_application(self, request):
        if isinstance(request, setlbmonitor_application) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbmonitor_sitepath
    def setlbmonitor_sitepath(self, request):
        if isinstance(request, setlbmonitor_sitepath) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbmonitorResponse.typecode.ofwhat, pyclass=setlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_ipaddress
    def unsetlbmonitor_ipaddress(self, request):
        if isinstance(request, unsetlbmonitor_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_action
    def unsetlbmonitor_action(self, request):
        if isinstance(request, unsetlbmonitor_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_respcode
    def unsetlbmonitor_respcode(self, request):
        if isinstance(request, unsetlbmonitor_respcode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_httprequest
    def unsetlbmonitor_httprequest(self, request):
        if isinstance(request, unsetlbmonitor_httprequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_customheaders
    def unsetlbmonitor_customheaders(self, request):
        if isinstance(request, unsetlbmonitor_customheaders) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_maxforwards
    def unsetlbmonitor_maxforwards(self, request):
        if isinstance(request, unsetlbmonitor_maxforwards) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_sipmethod
    def unsetlbmonitor_sipmethod(self, request):
        if isinstance(request, unsetlbmonitor_sipmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_sipreguri
    def unsetlbmonitor_sipreguri(self, request):
        if isinstance(request, unsetlbmonitor_sipreguri) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_sipuri
    def unsetlbmonitor_sipuri(self, request):
        if isinstance(request, unsetlbmonitor_sipuri) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_send
    def unsetlbmonitor_send(self, request):
        if isinstance(request, unsetlbmonitor_send) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_recv
    def unsetlbmonitor_recv(self, request):
        if isinstance(request, unsetlbmonitor_recv) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_query
    def unsetlbmonitor_query(self, request):
        if isinstance(request, unsetlbmonitor_query) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_querytype
    def unsetlbmonitor_querytype(self, request):
        if isinstance(request, unsetlbmonitor_querytype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_username
    def unsetlbmonitor_username(self, request):
        if isinstance(request, unsetlbmonitor_username) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_password
    def unsetlbmonitor_password(self, request):
        if isinstance(request, unsetlbmonitor_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_radkey
    def unsetlbmonitor_radkey(self, request):
        if isinstance(request, unsetlbmonitor_radkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_radnasid
    def unsetlbmonitor_radnasid(self, request):
        if isinstance(request, unsetlbmonitor_radnasid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_radnasip
    def unsetlbmonitor_radnasip(self, request):
        if isinstance(request, unsetlbmonitor_radnasip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_lrtm
    def unsetlbmonitor_lrtm(self, request):
        if isinstance(request, unsetlbmonitor_lrtm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_deviation
    def unsetlbmonitor_deviation(self, request):
        if isinstance(request, unsetlbmonitor_deviation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_scriptname
    def unsetlbmonitor_scriptname(self, request):
        if isinstance(request, unsetlbmonitor_scriptname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_scriptargs
    def unsetlbmonitor_scriptargs(self, request):
        if isinstance(request, unsetlbmonitor_scriptargs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_dispatcherip
    def unsetlbmonitor_dispatcherip(self, request):
        if isinstance(request, unsetlbmonitor_dispatcherip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_dispatcherport
    def unsetlbmonitor_dispatcherport(self, request):
        if isinstance(request, unsetlbmonitor_dispatcherport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_interval
    def unsetlbmonitor_interval(self, request):
        if isinstance(request, unsetlbmonitor_interval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_resptimeout
    def unsetlbmonitor_resptimeout(self, request):
        if isinstance(request, unsetlbmonitor_resptimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_resptimeoutthresh
    def unsetlbmonitor_resptimeoutthresh(self, request):
        if isinstance(request, unsetlbmonitor_resptimeoutthresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_retries
    def unsetlbmonitor_retries(self, request):
        if isinstance(request, unsetlbmonitor_retries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_downtime
    def unsetlbmonitor_downtime(self, request):
        if isinstance(request, unsetlbmonitor_downtime) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_destip
    def unsetlbmonitor_destip(self, request):
        if isinstance(request, unsetlbmonitor_destip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_destport
    def unsetlbmonitor_destport(self, request):
        if isinstance(request, unsetlbmonitor_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_state
    def unsetlbmonitor_state(self, request):
        if isinstance(request, unsetlbmonitor_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_reverse
    def unsetlbmonitor_reverse(self, request):
        if isinstance(request, unsetlbmonitor_reverse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_transparent
    def unsetlbmonitor_transparent(self, request):
        if isinstance(request, unsetlbmonitor_transparent) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_iptunnel
    def unsetlbmonitor_iptunnel(self, request):
        if isinstance(request, unsetlbmonitor_iptunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_tos
    def unsetlbmonitor_tos(self, request):
        if isinstance(request, unsetlbmonitor_tos) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_tosid
    def unsetlbmonitor_tosid(self, request):
        if isinstance(request, unsetlbmonitor_tosid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_secure
    def unsetlbmonitor_secure(self, request):
        if isinstance(request, unsetlbmonitor_secure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_group
    def unsetlbmonitor_group(self, request):
        if isinstance(request, unsetlbmonitor_group) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_filename
    def unsetlbmonitor_filename(self, request):
        if isinstance(request, unsetlbmonitor_filename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_basedn
    def unsetlbmonitor_basedn(self, request):
        if isinstance(request, unsetlbmonitor_basedn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_binddn
    def unsetlbmonitor_binddn(self, request):
        if isinstance(request, unsetlbmonitor_binddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_filter
    def unsetlbmonitor_filter(self, request):
        if isinstance(request, unsetlbmonitor_filter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_attribute
    def unsetlbmonitor_attribute(self, request):
        if isinstance(request, unsetlbmonitor_attribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_database
    def unsetlbmonitor_database(self, request):
        if isinstance(request, unsetlbmonitor_database) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_sqlquery
    def unsetlbmonitor_sqlquery(self, request):
        if isinstance(request, unsetlbmonitor_sqlquery) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_snmpoid
    def unsetlbmonitor_snmpoid(self, request):
        if isinstance(request, unsetlbmonitor_snmpoid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_snmpcommunity
    def unsetlbmonitor_snmpcommunity(self, request):
        if isinstance(request, unsetlbmonitor_snmpcommunity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_snmpthreshold
    def unsetlbmonitor_snmpthreshold(self, request):
        if isinstance(request, unsetlbmonitor_snmpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_snmpversion
    def unsetlbmonitor_snmpversion(self, request):
        if isinstance(request, unsetlbmonitor_snmpversion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbmonitor_metrictable
    def unsetlbmonitor_metrictable(self, request):
        if isinstance(request, unsetlbmonitor_metrictable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbmonitorResponse.typecode.ofwhat, pyclass=unsetlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbmonitor_service
    def bindlbmonitor_service(self, request):
        if isinstance(request, bindlbmonitor_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbmonitorResponse.typecode.ofwhat, pyclass=bindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbmonitor_servicegroup
    def bindlbmonitor_servicegroup(self, request):
        if isinstance(request, bindlbmonitor_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbmonitorResponse.typecode.ofwhat, pyclass=bindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbmonitor_metric
    def bindlbmonitor_metric(self, request):
        if isinstance(request, bindlbmonitor_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbmonitorResponse.typecode.ofwhat, pyclass=bindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbmonitor_service
    def unbindlbmonitor_service(self, request):
        if isinstance(request, unbindlbmonitor_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbmonitorResponse.typecode.ofwhat, pyclass=unbindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbmonitor_servicegroup
    def unbindlbmonitor_servicegroup(self, request):
        if isinstance(request, unbindlbmonitor_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbmonitorResponse.typecode.ofwhat, pyclass=unbindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbmonitor_metric
    def unbindlbmonitor_metric(self, request):
        if isinstance(request, unbindlbmonitor_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbmonitorResponse.typecode.ofwhat, pyclass=unbindlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbmonitor
    def getlbmonitor(self, request):
        if isinstance(request, getlbmonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbmonitorResponse.typecode.ofwhat, pyclass=getlbmonitorResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlbroute
    def addlbroute(self, request):
        if isinstance(request, addlbroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlbrouteResponse.typecode.ofwhat, pyclass=addlbrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlbroute
    def rmlbroute(self, request):
        if isinstance(request, rmlbroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlbrouteResponse.typecode.ofwhat, pyclass=rmlbrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbroute
    def getlbroute(self, request):
        if isinstance(request, getlbroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbrouteResponse.typecode.ofwhat, pyclass=getlbrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlbvserver
    def addlbvserver(self, request):
        if isinstance(request, addlbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlbvserverResponse.typecode.ofwhat, pyclass=addlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlbvserver
    def rmlbvserver(self, request):
        if isinstance(request, rmlbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlbvserverResponse.typecode.ofwhat, pyclass=rmlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_ipaddress
    def setlbvserver_ipaddress(self, request):
        if isinstance(request, setlbvserver_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_ippattern
    def setlbvserver_ippattern(self, request):
        if isinstance(request, setlbvserver_ippattern) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_ipmask
    def setlbvserver_ipmask(self, request):
        if isinstance(request, setlbvserver_ipmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_weight
    def setlbvserver_weight(self, request):
        if isinstance(request, setlbvserver_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_persistencetype
    def setlbvserver_persistencetype(self, request):
        if isinstance(request, setlbvserver_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_timeout
    def setlbvserver_timeout(self, request):
        if isinstance(request, setlbvserver_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_persistencebackup
    def setlbvserver_persistencebackup(self, request):
        if isinstance(request, setlbvserver_persistencebackup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_backuppersistencetimeout
    def setlbvserver_backuppersistencetimeout(self, request):
        if isinstance(request, setlbvserver_backuppersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_lbmethod
    def setlbvserver_lbmethod(self, request):
        if isinstance(request, setlbvserver_lbmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_rule
    def setlbvserver_rule(self, request):
        if isinstance(request, setlbvserver_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_persistmask
    def setlbvserver_persistmask(self, request):
        if isinstance(request, setlbvserver_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_pq
    def setlbvserver_pq(self, request):
        if isinstance(request, setlbvserver_pq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_sc
    def setlbvserver_sc(self, request):
        if isinstance(request, setlbvserver_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_m
    def setlbvserver_m(self, request):
        if isinstance(request, setlbvserver_m) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_tosid
    def setlbvserver_tosid(self, request):
        if isinstance(request, setlbvserver_tosid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_datalength
    def setlbvserver_datalength(self, request):
        if isinstance(request, setlbvserver_datalength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_dataoffset
    def setlbvserver_dataoffset(self, request):
        if isinstance(request, setlbvserver_dataoffset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_sessionless
    def setlbvserver_sessionless(self, request):
        if isinstance(request, setlbvserver_sessionless) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_connfailover
    def setlbvserver_connfailover(self, request):
        if isinstance(request, setlbvserver_connfailover) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_backupvserver
    def setlbvserver_backupvserver(self, request):
        if isinstance(request, setlbvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_redirecturl
    def setlbvserver_redirecturl(self, request):
        if isinstance(request, setlbvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_cacheable
    def setlbvserver_cacheable(self, request):
        if isinstance(request, setlbvserver_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_clttimeout
    def setlbvserver_clttimeout(self, request):
        if isinstance(request, setlbvserver_clttimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_somethod
    def setlbvserver_somethod(self, request):
        if isinstance(request, setlbvserver_somethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_sopersistence
    def setlbvserver_sopersistence(self, request):
        if isinstance(request, setlbvserver_sopersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_sopersistencetimeout
    def setlbvserver_sopersistencetimeout(self, request):
        if isinstance(request, setlbvserver_sopersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_sothreshold
    def setlbvserver_sothreshold(self, request):
        if isinstance(request, setlbvserver_sothreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_redirectportrewrite
    def setlbvserver_redirectportrewrite(self, request):
        if isinstance(request, setlbvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_downstateflush
    def setlbvserver_downstateflush(self, request):
        if isinstance(request, setlbvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbvserver_insertvserveripport
    def setlbvserver_insertvserveripport(self, request):
        if isinstance(request, setlbvserver_insertvserveripport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbvserverResponse.typecode.ofwhat, pyclass=setlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_backupvserver
    def unsetlbvserver_backupvserver(self, request):
        if isinstance(request, unsetlbvserver_backupvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_redirecturl
    def unsetlbvserver_redirecturl(self, request):
        if isinstance(request, unsetlbvserver_redirecturl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_servicename
    def unsetlbvserver_servicename(self, request):
        if isinstance(request, unsetlbvserver_servicename) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_persistencetype
    def unsetlbvserver_persistencetype(self, request):
        if isinstance(request, unsetlbvserver_persistencetype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_timeout
    def unsetlbvserver_timeout(self, request):
        if isinstance(request, unsetlbvserver_timeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_persistencebackup
    def unsetlbvserver_persistencebackup(self, request):
        if isinstance(request, unsetlbvserver_persistencebackup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_backuppersistencetimeout
    def unsetlbvserver_backuppersistencetimeout(self, request):
        if isinstance(request, unsetlbvserver_backuppersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_lbmethod
    def unsetlbvserver_lbmethod(self, request):
        if isinstance(request, unsetlbvserver_lbmethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_hashlength
    def unsetlbvserver_hashlength(self, request):
        if isinstance(request, unsetlbvserver_hashlength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_netmask
    def unsetlbvserver_netmask(self, request):
        if isinstance(request, unsetlbvserver_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_rule
    def unsetlbvserver_rule(self, request):
        if isinstance(request, unsetlbvserver_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_persistmask
    def unsetlbvserver_persistmask(self, request):
        if isinstance(request, unsetlbvserver_persistmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_pq
    def unsetlbvserver_pq(self, request):
        if isinstance(request, unsetlbvserver_pq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_sc
    def unsetlbvserver_sc(self, request):
        if isinstance(request, unsetlbvserver_sc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_m
    def unsetlbvserver_m(self, request):
        if isinstance(request, unsetlbvserver_m) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_tosid
    def unsetlbvserver_tosid(self, request):
        if isinstance(request, unsetlbvserver_tosid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_datalength
    def unsetlbvserver_datalength(self, request):
        if isinstance(request, unsetlbvserver_datalength) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_dataoffset
    def unsetlbvserver_dataoffset(self, request):
        if isinstance(request, unsetlbvserver_dataoffset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_sessionless
    def unsetlbvserver_sessionless(self, request):
        if isinstance(request, unsetlbvserver_sessionless) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_connfailover
    def unsetlbvserver_connfailover(self, request):
        if isinstance(request, unsetlbvserver_connfailover) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_redirecturl2
    def unsetlbvserver_redirecturl2(self, request):
        if isinstance(request, unsetlbvserver_redirecturl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_cacheable
    def unsetlbvserver_cacheable(self, request):
        if isinstance(request, unsetlbvserver_cacheable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_somethod
    def unsetlbvserver_somethod(self, request):
        if isinstance(request, unsetlbvserver_somethod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_sopersistence
    def unsetlbvserver_sopersistence(self, request):
        if isinstance(request, unsetlbvserver_sopersistence) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_sopersistencetimeout
    def unsetlbvserver_sopersistencetimeout(self, request):
        if isinstance(request, unsetlbvserver_sopersistencetimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_sothreshold
    def unsetlbvserver_sothreshold(self, request):
        if isinstance(request, unsetlbvserver_sothreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_redirectportrewrite
    def unsetlbvserver_redirectportrewrite(self, request):
        if isinstance(request, unsetlbvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_downstateflush
    def unsetlbvserver_downstateflush(self, request):
        if isinstance(request, unsetlbvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_insertvserveripport
    def unsetlbvserver_insertvserveripport(self, request):
        if isinstance(request, unsetlbvserver_insertvserveripport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbvserver_vipheader
    def unsetlbvserver_vipheader(self, request):
        if isinstance(request, unsetlbvserver_vipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbvserverResponse.typecode.ofwhat, pyclass=unsetlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbvserver_service
    def bindlbvserver_service(self, request):
        if isinstance(request, bindlbvserver_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbvserverResponse.typecode.ofwhat, pyclass=bindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbvserver_servicegroup
    def bindlbvserver_servicegroup(self, request):
        if isinstance(request, bindlbvserver_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbvserverResponse.typecode.ofwhat, pyclass=bindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbvserver_policy
    def bindlbvserver_policy(self, request):
        if isinstance(request, bindlbvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbvserverResponse.typecode.ofwhat, pyclass=bindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbvserver_service
    def unbindlbvserver_service(self, request):
        if isinstance(request, unbindlbvserver_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbvserverResponse.typecode.ofwhat, pyclass=unbindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbvserver_servicegroup
    def unbindlbvserver_servicegroup(self, request):
        if isinstance(request, unbindlbvserver_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbvserverResponse.typecode.ofwhat, pyclass=unbindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbvserver_policy
    def unbindlbvserver_policy(self, request):
        if isinstance(request, unbindlbvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbvserverResponse.typecode.ofwhat, pyclass=unbindlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablelbvserver
    def enablelbvserver(self, request):
        if isinstance(request, enablelbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablelbvserverResponse.typecode.ofwhat, pyclass=enablelbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablelbvserver
    def disablelbvserver(self, request):
        if isinstance(request, disablelbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablelbvserverResponse.typecode.ofwhat, pyclass=disablelbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbvserver
    def getlbvserver(self, request):
        if isinstance(request, getlbvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbvserverResponse.typecode.ofwhat, pyclass=getlbvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbsipparameters_rnatsrcport
    def setlbsipparameters_rnatsrcport(self, request):
        if isinstance(request, setlbsipparameters_rnatsrcport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbsipparametersResponse.typecode.ofwhat, pyclass=setlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbsipparameters_rnatdstport
    def setlbsipparameters_rnatdstport(self, request):
        if isinstance(request, setlbsipparameters_rnatdstport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbsipparametersResponse.typecode.ofwhat, pyclass=setlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbsipparameters_retrydur
    def setlbsipparameters_retrydur(self, request):
        if isinstance(request, setlbsipparameters_retrydur) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbsipparametersResponse.typecode.ofwhat, pyclass=setlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbsipparameters_addrportvip
    def setlbsipparameters_addrportvip(self, request):
        if isinstance(request, setlbsipparameters_addrportvip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbsipparametersResponse.typecode.ofwhat, pyclass=setlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbsipparameters_rnatsrcport
    def unsetlbsipparameters_rnatsrcport(self, request):
        if isinstance(request, unsetlbsipparameters_rnatsrcport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbsipparametersResponse.typecode.ofwhat, pyclass=unsetlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbsipparameters_rnatdstport
    def unsetlbsipparameters_rnatdstport(self, request):
        if isinstance(request, unsetlbsipparameters_rnatdstport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbsipparametersResponse.typecode.ofwhat, pyclass=unsetlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbsipparameters_retrydur
    def unsetlbsipparameters_retrydur(self, request):
        if isinstance(request, unsetlbsipparameters_retrydur) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbsipparametersResponse.typecode.ofwhat, pyclass=unsetlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbsipparameters_addrportvip
    def unsetlbsipparameters_addrportvip(self, request):
        if isinstance(request, unsetlbsipparameters_addrportvip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbsipparametersResponse.typecode.ofwhat, pyclass=unsetlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbsipparameters
    def getlbsipparameters(self, request):
        if isinstance(request, getlbsipparameters) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbsipparametersResponse.typecode.ofwhat, pyclass=getlbsipparametersResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlbmetrictable
    def addlbmetrictable(self, request):
        if isinstance(request, addlbmetrictable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlbmetrictableResponse.typecode.ofwhat, pyclass=addlbmetrictableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlbmetrictable
    def rmlbmetrictable(self, request):
        if isinstance(request, rmlbmetrictable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlbmetrictableResponse.typecode.ofwhat, pyclass=rmlbmetrictableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbmetrictable_metric
    def bindlbmetrictable_metric(self, request):
        if isinstance(request, bindlbmetrictable_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbmetrictableResponse.typecode.ofwhat, pyclass=bindlbmetrictableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbmetrictable_metric
    def unbindlbmetrictable_metric(self, request):
        if isinstance(request, unbindlbmetrictable_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbmetrictableResponse.typecode.ofwhat, pyclass=unbindlbmetrictableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbmetrictable
    def getlbmetrictable(self, request):
        if isinstance(request, getlbmetrictable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbmetrictableResponse.typecode.ofwhat, pyclass=getlbmetrictableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addlbwlm
    def addlbwlm(self, request):
        if isinstance(request, addlbwlm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addlbwlmResponse.typecode.ofwhat, pyclass=addlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmlbwlm
    def rmlbwlm(self, request):
        if isinstance(request, rmlbwlm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmlbwlmResponse.typecode.ofwhat, pyclass=rmlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlbwlm_katimeout
    def setlbwlm_katimeout(self, request):
        if isinstance(request, setlbwlm_katimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlbwlmResponse.typecode.ofwhat, pyclass=setlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetlbwlm_katimeout
    def unsetlbwlm_katimeout(self, request):
        if isinstance(request, unsetlbwlm_katimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetlbwlmResponse.typecode.ofwhat, pyclass=unsetlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlbwlm
    def getlbwlm(self, request):
        if isinstance(request, getlbwlm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlbwlmResponse.typecode.ofwhat, pyclass=getlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindlbwlm_vserver
    def bindlbwlm_vserver(self, request):
        if isinstance(request, bindlbwlm_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindlbwlmResponse.typecode.ofwhat, pyclass=bindlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindlbwlm_vserver
    def unbindlbwlm_vserver(self, request):
        if isinstance(request, unbindlbwlm_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindlbwlmResponse.typecode.ofwhat, pyclass=unbindlbwlmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearnd6
    def clearnd6(self, request):
        if isinstance(request, clearnd6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearnd6Response.typecode.ofwhat, pyclass=clearnd6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addarp
    def addarp(self, request):
        if isinstance(request, addarp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addarpResponse.typecode.ofwhat, pyclass=addarpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmarp
    def rmarp(self, request):
        if isinstance(request, rmarp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmarpResponse.typecode.ofwhat, pyclass=rmarpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: sendarp
    def sendarp(self, request):
        if isinstance(request, sendarp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=sendarpResponse.typecode.ofwhat, pyclass=sendarpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getarp
    def getarp(self, request):
        if isinstance(request, getarp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getarpResponse.typecode.ofwhat, pyclass=getarpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getci
    def getci(self, request):
        if isinstance(request, getci) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getciResponse.typecode.ofwhat, pyclass=getciResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearinterface
    def clearinterface(self, request):
        if isinstance(request, clearinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearinterfaceResponse.typecode.ofwhat, pyclass=clearinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearroute
    def clearroute(self, request):
        if isinstance(request, clearroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearrouteResponse.typecode.ofwhat, pyclass=clearrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearrnat
    def clearrnat(self, request):
        if isinstance(request, clearrnat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearrnatResponse.typecode.ofwhat, pyclass=clearrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setbridgetable_bridgeage
    def setbridgetable_bridgeage(self, request):
        if isinstance(request, setbridgetable_bridgeage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setbridgetableResponse.typecode.ofwhat, pyclass=setbridgetableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetbridgetable_bridgeage
    def unsetbridgetable_bridgeage(self, request):
        if isinstance(request, unsetbridgetable_bridgeage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetbridgetableResponse.typecode.ofwhat, pyclass=unsetbridgetableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getbridgetable
    def getbridgetable(self, request):
        if isinstance(request, getbridgetable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getbridgetableResponse.typecode.ofwhat, pyclass=getbridgetableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addchannel
    def addchannel(self, request):
        if isinstance(request, addchannel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addchannelResponse.typecode.ofwhat, pyclass=addchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmchannel
    def rmchannel(self, request):
        if isinstance(request, rmchannel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmchannelResponse.typecode.ofwhat, pyclass=rmchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_state
    def setchannel_state(self, request):
        if isinstance(request, setchannel_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_mode
    def setchannel_mode(self, request):
        if isinstance(request, setchannel_mode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_conndistr
    def setchannel_conndistr(self, request):
        if isinstance(request, setchannel_conndistr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_macdistr
    def setchannel_macdistr(self, request):
        if isinstance(request, setchannel_macdistr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_speed
    def setchannel_speed(self, request):
        if isinstance(request, setchannel_speed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_flowcontrol
    def setchannel_flowcontrol(self, request):
        if isinstance(request, setchannel_flowcontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_hamonitor
    def setchannel_hamonitor(self, request):
        if isinstance(request, setchannel_hamonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_trunk
    def setchannel_trunk(self, request):
        if isinstance(request, setchannel_trunk) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_ifalias
    def setchannel_ifalias(self, request):
        if isinstance(request, setchannel_ifalias) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setchannel_throughput
    def setchannel_throughput(self, request):
        if isinstance(request, setchannel_throughput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setchannelResponse.typecode.ofwhat, pyclass=setchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_state
    def unsetchannel_state(self, request):
        if isinstance(request, unsetchannel_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_mode
    def unsetchannel_mode(self, request):
        if isinstance(request, unsetchannel_mode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_conndistr
    def unsetchannel_conndistr(self, request):
        if isinstance(request, unsetchannel_conndistr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_macdistr
    def unsetchannel_macdistr(self, request):
        if isinstance(request, unsetchannel_macdistr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_speed
    def unsetchannel_speed(self, request):
        if isinstance(request, unsetchannel_speed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_flowcontrol
    def unsetchannel_flowcontrol(self, request):
        if isinstance(request, unsetchannel_flowcontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_hamonitor
    def unsetchannel_hamonitor(self, request):
        if isinstance(request, unsetchannel_hamonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_trunk
    def unsetchannel_trunk(self, request):
        if isinstance(request, unsetchannel_trunk) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_ifalias
    def unsetchannel_ifalias(self, request):
        if isinstance(request, unsetchannel_ifalias) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetchannel_throughput
    def unsetchannel_throughput(self, request):
        if isinstance(request, unsetchannel_throughput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetchannelResponse.typecode.ofwhat, pyclass=unsetchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindchannel_ifnum
    def bindchannel_ifnum(self, request):
        if isinstance(request, bindchannel_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindchannelResponse.typecode.ofwhat, pyclass=bindchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindchannel_ifnum
    def unbindchannel_ifnum(self, request):
        if isinstance(request, unbindchannel_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindchannelResponse.typecode.ofwhat, pyclass=unbindchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getchannel
    def getchannel(self, request):
        if isinstance(request, getchannel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getchannelResponse.typecode.ofwhat, pyclass=getchannelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addfis
    def addfis(self, request):
        if isinstance(request, addfis) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addfisResponse.typecode.ofwhat, pyclass=addfisResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmfis
    def rmfis(self, request):
        if isinstance(request, rmfis) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmfisResponse.typecode.ofwhat, pyclass=rmfisResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindfis_ifnum
    def bindfis_ifnum(self, request):
        if isinstance(request, bindfis_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindfisResponse.typecode.ofwhat, pyclass=bindfisResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindfis_ifnum
    def unbindfis_ifnum(self, request):
        if isinstance(request, unbindfis_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindfisResponse.typecode.ofwhat, pyclass=unbindfisResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getfis
    def getfis(self, request):
        if isinstance(request, getfis) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getfisResponse.typecode.ofwhat, pyclass=getfisResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_speed
    def setinterface_speed(self, request):
        if isinstance(request, setinterface_speed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_duplex
    def setinterface_duplex(self, request):
        if isinstance(request, setinterface_duplex) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_flowcontrol
    def setinterface_flowcontrol(self, request):
        if isinstance(request, setinterface_flowcontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_autoneg
    def setinterface_autoneg(self, request):
        if isinstance(request, setinterface_autoneg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_hamonitor
    def setinterface_hamonitor(self, request):
        if isinstance(request, setinterface_hamonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_trunk
    def setinterface_trunk(self, request):
        if isinstance(request, setinterface_trunk) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_lacpmode
    def setinterface_lacpmode(self, request):
        if isinstance(request, setinterface_lacpmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_lacpkey
    def setinterface_lacpkey(self, request):
        if isinstance(request, setinterface_lacpkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_lacppriority
    def setinterface_lacppriority(self, request):
        if isinstance(request, setinterface_lacppriority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_lacptimeout
    def setinterface_lacptimeout(self, request):
        if isinstance(request, setinterface_lacptimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_ifalias
    def setinterface_ifalias(self, request):
        if isinstance(request, setinterface_ifalias) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setinterface_throughput
    def setinterface_throughput(self, request):
        if isinstance(request, setinterface_throughput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setinterfaceResponse.typecode.ofwhat, pyclass=setinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_speed
    def unsetinterface_speed(self, request):
        if isinstance(request, unsetinterface_speed) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_duplex
    def unsetinterface_duplex(self, request):
        if isinstance(request, unsetinterface_duplex) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_flowcontrol
    def unsetinterface_flowcontrol(self, request):
        if isinstance(request, unsetinterface_flowcontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_autoneg
    def unsetinterface_autoneg(self, request):
        if isinstance(request, unsetinterface_autoneg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_hamonitor
    def unsetinterface_hamonitor(self, request):
        if isinstance(request, unsetinterface_hamonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_trunk
    def unsetinterface_trunk(self, request):
        if isinstance(request, unsetinterface_trunk) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_lacpmode
    def unsetinterface_lacpmode(self, request):
        if isinstance(request, unsetinterface_lacpmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_lacpkey
    def unsetinterface_lacpkey(self, request):
        if isinstance(request, unsetinterface_lacpkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_lacppriority
    def unsetinterface_lacppriority(self, request):
        if isinstance(request, unsetinterface_lacppriority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_lacptimeout
    def unsetinterface_lacptimeout(self, request):
        if isinstance(request, unsetinterface_lacptimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_ifalias
    def unsetinterface_ifalias(self, request):
        if isinstance(request, unsetinterface_ifalias) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetinterface_throughput
    def unsetinterface_throughput(self, request):
        if isinstance(request, unsetinterface_throughput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetinterfaceResponse.typecode.ofwhat, pyclass=unsetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enableinterface
    def enableinterface(self, request):
        if isinstance(request, enableinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enableinterfaceResponse.typecode.ofwhat, pyclass=enableinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disableinterface
    def disableinterface(self, request):
        if isinstance(request, disableinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disableinterfaceResponse.typecode.ofwhat, pyclass=disableinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: resetinterface
    def resetinterface(self, request):
        if isinstance(request, resetinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=resetinterfaceResponse.typecode.ofwhat, pyclass=resetinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getinterface
    def getinterface(self, request):
        if isinstance(request, getinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getinterfaceResponse.typecode.ofwhat, pyclass=getinterfaceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setlacp_syspriority
    def setlacp_syspriority(self, request):
        if isinstance(request, setlacp_syspriority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setlacpResponse.typecode.ofwhat, pyclass=setlacpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getlacp
    def getlacp(self, request):
        if isinstance(request, getlacp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getlacpResponse.typecode.ofwhat, pyclass=getlacpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrnatparam_tcpproxy
    def setrnatparam_tcpproxy(self, request):
        if isinstance(request, setrnatparam_tcpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrnatparamResponse.typecode.ofwhat, pyclass=setrnatparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnatparam_tcpproxy
    def unsetrnatparam_tcpproxy(self, request):
        if isinstance(request, unsetrnatparam_tcpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatparamResponse.typecode.ofwhat, pyclass=unsetrnatparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrnatparam
    def getrnatparam(self, request):
        if isinstance(request, getrnatparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrnatparamResponse.typecode.ofwhat, pyclass=getrnatparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addroute
    def addroute(self, request):
        if isinstance(request, addroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addrouteResponse.typecode.ofwhat, pyclass=addrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmroute
    def rmroute(self, request):
        if isinstance(request, rmroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmrouteResponse.typecode.ofwhat, pyclass=rmrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setroute_distance
    def setroute_distance(self, request):
        if isinstance(request, setroute_distance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouteResponse.typecode.ofwhat, pyclass=setrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setroute_cost
    def setroute_cost(self, request):
        if isinstance(request, setroute_cost) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouteResponse.typecode.ofwhat, pyclass=setrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setroute_advertise
    def setroute_advertise(self, request):
        if isinstance(request, setroute_advertise) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouteResponse.typecode.ofwhat, pyclass=setrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setroute_protocol
    def setroute_protocol(self, request):
        if isinstance(request, setroute_protocol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouteResponse.typecode.ofwhat, pyclass=setrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetroute_advertise
    def unsetroute_advertise(self, request):
        if isinstance(request, unsetroute_advertise) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouteResponse.typecode.ofwhat, pyclass=unsetrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetroute_protocol
    def unsetroute_protocol(self, request):
        if isinstance(request, unsetroute_protocol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouteResponse.typecode.ofwhat, pyclass=unsetrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetroute_distance
    def unsetroute_distance(self, request):
        if isinstance(request, unsetroute_distance) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouteResponse.typecode.ofwhat, pyclass=unsetrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetroute_cost
    def unsetroute_cost(self, request):
        if isinstance(request, unsetroute_cost) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouteResponse.typecode.ofwhat, pyclass=unsetrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getroute
    def getroute(self, request):
        if isinstance(request, getroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrouteResponse.typecode.ofwhat, pyclass=getrouteResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrnat_network
    def setrnat_network(self, request):
        if isinstance(request, setrnat_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrnatResponse.typecode.ofwhat, pyclass=setrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrnat_aclname
    def setrnat_aclname(self, request):
        if isinstance(request, setrnat_aclname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrnatResponse.typecode.ofwhat, pyclass=setrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_network
    def unsetrnat_network(self, request):
        if isinstance(request, unsetrnat_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_netmask
    def unsetrnat_netmask(self, request):
        if isinstance(request, unsetrnat_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_natip
    def unsetrnat_natip(self, request):
        if isinstance(request, unsetrnat_natip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_aclname
    def unsetrnat_aclname(self, request):
        if isinstance(request, unsetrnat_aclname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_redirectport
    def unsetrnat_redirectport(self, request):
        if isinstance(request, unsetrnat_redirectport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrnat_natip2
    def unsetrnat_natip2(self, request):
        if isinstance(request, unsetrnat_natip2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrnatResponse.typecode.ofwhat, pyclass=unsetrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrnat
    def getrnat(self, request):
        if isinstance(request, getrnat) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrnatResponse.typecode.ofwhat, pyclass=getrnatResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvlan
    def addvlan(self, request):
        if isinstance(request, addvlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvlanResponse.typecode.ofwhat, pyclass=addvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvlan
    def rmvlan(self, request):
        if isinstance(request, rmvlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvlanResponse.typecode.ofwhat, pyclass=rmvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvlan_ifnum
    def bindvlan_ifnum(self, request):
        if isinstance(request, bindvlan_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvlanResponse.typecode.ofwhat, pyclass=bindvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvlan_ipaddress
    def bindvlan_ipaddress(self, request):
        if isinstance(request, bindvlan_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvlanResponse.typecode.ofwhat, pyclass=bindvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvlan_ifnum
    def unbindvlan_ifnum(self, request):
        if isinstance(request, unbindvlan_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvlanResponse.typecode.ofwhat, pyclass=unbindvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvlan_ipaddress
    def unbindvlan_ipaddress(self, request):
        if isinstance(request, unbindvlan_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvlanResponse.typecode.ofwhat, pyclass=unbindvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvlan
    def getvlan(self, request):
        if isinstance(request, getvlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvlanResponse.typecode.ofwhat, pyclass=getvlanResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvrid
    def addvrid(self, request):
        if isinstance(request, addvrid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvridResponse.typecode.ofwhat, pyclass=addvridResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvrid
    def rmvrid(self, request):
        if isinstance(request, rmvrid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvridResponse.typecode.ofwhat, pyclass=rmvridResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvrid_ifnum
    def bindvrid_ifnum(self, request):
        if isinstance(request, bindvrid_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvridResponse.typecode.ofwhat, pyclass=bindvridResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvrid_ifnum
    def unbindvrid_ifnum(self, request):
        if isinstance(request, unbindvrid_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvridResponse.typecode.ofwhat, pyclass=unbindvridResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvrid
    def getvrid(self, request):
        if isinstance(request, getvrid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvridResponse.typecode.ofwhat, pyclass=getvridResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addroute6
    def addroute6(self, request):
        if isinstance(request, addroute6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addroute6Response.typecode.ofwhat, pyclass=addroute6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmroute6
    def rmroute6(self, request):
        if isinstance(request, rmroute6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmroute6Response.typecode.ofwhat, pyclass=rmroute6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getroute6
    def getroute6(self, request):
        if isinstance(request, getroute6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getroute6Response.typecode.ofwhat, pyclass=getroute6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnd6
    def getnd6(self, request):
        if isinstance(request, getnd6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnd6Response.typecode.ofwhat, pyclass=getnd6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setipv6_ralearning
    def setipv6_ralearning(self, request):
        if isinstance(request, setipv6_ralearning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setipv6Response.typecode.ofwhat, pyclass=setipv6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetipv6_ralearning
    def unsetipv6_ralearning(self, request):
        if isinstance(request, unsetipv6_ralearning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetipv6Response.typecode.ofwhat, pyclass=unsetipv6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getipv6
    def getipv6(self, request):
        if isinstance(request, getipv6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getipv6Response.typecode.ofwhat, pyclass=getipv6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setiptunnelparam_srcip
    def setiptunnelparam_srcip(self, request):
        if isinstance(request, setiptunnelparam_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setiptunnelparamResponse.typecode.ofwhat, pyclass=setiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setiptunnelparam_dropfrag
    def setiptunnelparam_dropfrag(self, request):
        if isinstance(request, setiptunnelparam_dropfrag) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setiptunnelparamResponse.typecode.ofwhat, pyclass=setiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setiptunnelparam_dropfragcputhreshold
    def setiptunnelparam_dropfragcputhreshold(self, request):
        if isinstance(request, setiptunnelparam_dropfragcputhreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setiptunnelparamResponse.typecode.ofwhat, pyclass=setiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetiptunnelparam_srcip
    def unsetiptunnelparam_srcip(self, request):
        if isinstance(request, unsetiptunnelparam_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetiptunnelparamResponse.typecode.ofwhat, pyclass=unsetiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetiptunnelparam_dropfrag
    def unsetiptunnelparam_dropfrag(self, request):
        if isinstance(request, unsetiptunnelparam_dropfrag) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetiptunnelparamResponse.typecode.ofwhat, pyclass=unsetiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetiptunnelparam_dropfragcputhreshold
    def unsetiptunnelparam_dropfragcputhreshold(self, request):
        if isinstance(request, unsetiptunnelparam_dropfragcputhreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetiptunnelparamResponse.typecode.ofwhat, pyclass=unsetiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getiptunnelparam
    def getiptunnelparam(self, request):
        if isinstance(request, getiptunnelparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getiptunnelparamResponse.typecode.ofwhat, pyclass=getiptunnelparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addiptunnel
    def addiptunnel(self, request):
        if isinstance(request, addiptunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addiptunnelResponse.typecode.ofwhat, pyclass=addiptunnelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmiptunnel
    def rmiptunnel(self, request):
        if isinstance(request, rmiptunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmiptunnelResponse.typecode.ofwhat, pyclass=rmiptunnelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getiptunnel
    def getiptunnel(self, request):
        if isinstance(request, getiptunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getiptunnelResponse.typecode.ofwhat, pyclass=getiptunnelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsns
    def getnsns(self, request):
        if isinstance(request, getnsns) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsnsResponse.typecode.ofwhat, pyclass=getnsnsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: renumbernsacls
    def renumbernsacls(self, request):
        if isinstance(request, renumbernsacls) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=renumbernsaclsResponse.typecode.ofwhat, pyclass=renumbernsaclsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearnsacls
    def clearnsacls(self, request):
        if isinstance(request, clearnsacls) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearnsaclsResponse.typecode.ofwhat, pyclass=clearnsaclsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearnssimpleacl
    def clearnssimpleacl(self, request):
        if isinstance(request, clearnssimpleacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearnssimpleaclResponse.typecode.ofwhat, pyclass=clearnssimpleaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: applynsacls
    def applynsacls(self, request):
        if isinstance(request, applynsacls) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=applynsaclsResponse.typecode.ofwhat, pyclass=applynsaclsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnslicense
    def getnslicense(self, request):
        if isinstance(request, getnslicense) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnslicenseResponse.typecode.ofwhat, pyclass=getnslicenseResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsversion
    def getnsversion(self, request):
        if isinstance(request, getnsversion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsversionResponse.typecode.ofwhat, pyclass=getnsversionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: login
    def login(self, request):
        if isinstance(request, login) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=loginResponse.typecode.ofwhat, pyclass=loginResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: loginchallengeresponse
    def loginchallengeresponse(self, request):
        if isinstance(request, loginchallengeresponse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=loginchallengeresponseResponse.typecode.ofwhat, pyclass=loginchallengeresponseResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: logout
    def logout(self, request):
        if isinstance(request, logout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=logoutResponse.typecode.ofwhat, pyclass=logoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: reboot
    def reboot(self, request):
        if isinstance(request, reboot) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rebootResponse.typecode.ofwhat, pyclass=rebootResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearnsconfig
    def clearnsconfig(self, request):
        if isinstance(request, clearnsconfig) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearnsconfigResponse.typecode.ofwhat, pyclass=clearnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsconnectiontable
    def getnsconnectiontable(self, request):
        if isinstance(request, getnsconnectiontable) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsconnectiontableResponse.typecode.ofwhat, pyclass=getnsconnectiontableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsconnectiontableEx
    def getnsconnectiontableEx(self, request):
        if isinstance(request, getnsconnectiontableEx) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsconnectiontableResponse.typecode.ofwhat, pyclass=getnsconnectiontableResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnspersistencesession
    def getnspersistencesession(self, request):
        if isinstance(request, getnspersistencesession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnspersistencesessionResponse.typecode.ofwhat, pyclass=getnspersistencesessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_ipaddress
    def setnsconfig_ipaddress(self, request):
        if isinstance(request, setnsconfig_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_nsvlan
    def setnsconfig_nsvlan(self, request):
        if isinstance(request, setnsconfig_nsvlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_httpport
    def setnsconfig_httpport(self, request):
        if isinstance(request, setnsconfig_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_maxconn
    def setnsconfig_maxconn(self, request):
        if isinstance(request, setnsconfig_maxconn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_maxreq
    def setnsconfig_maxreq(self, request):
        if isinstance(request, setnsconfig_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_cip
    def setnsconfig_cip(self, request):
        if isinstance(request, setnsconfig_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_cookieversion
    def setnsconfig_cookieversion(self, request):
        if isinstance(request, setnsconfig_cookieversion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_pmtumin
    def setnsconfig_pmtumin(self, request):
        if isinstance(request, setnsconfig_pmtumin) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_pmtutimeout
    def setnsconfig_pmtutimeout(self, request):
        if isinstance(request, setnsconfig_pmtutimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsconfig_ftpportrange
    def setnsconfig_ftpportrange(self, request):
        if isinstance(request, setnsconfig_ftpportrange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsconfigResponse.typecode.ofwhat, pyclass=setnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_nsvlan
    def unsetnsconfig_nsvlan(self, request):
        if isinstance(request, unsetnsconfig_nsvlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_ftpportrange
    def unsetnsconfig_ftpportrange(self, request):
        if isinstance(request, unsetnsconfig_ftpportrange) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_ipaddress
    def unsetnsconfig_ipaddress(self, request):
        if isinstance(request, unsetnsconfig_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_netmask
    def unsetnsconfig_netmask(self, request):
        if isinstance(request, unsetnsconfig_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_ifnum
    def unsetnsconfig_ifnum(self, request):
        if isinstance(request, unsetnsconfig_ifnum) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_httpport
    def unsetnsconfig_httpport(self, request):
        if isinstance(request, unsetnsconfig_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_maxconn
    def unsetnsconfig_maxconn(self, request):
        if isinstance(request, unsetnsconfig_maxconn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_maxreq
    def unsetnsconfig_maxreq(self, request):
        if isinstance(request, unsetnsconfig_maxreq) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_cip
    def unsetnsconfig_cip(self, request):
        if isinstance(request, unsetnsconfig_cip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_cipheader
    def unsetnsconfig_cipheader(self, request):
        if isinstance(request, unsetnsconfig_cipheader) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_cookieversion
    def unsetnsconfig_cookieversion(self, request):
        if isinstance(request, unsetnsconfig_cookieversion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_pmtumin
    def unsetnsconfig_pmtumin(self, request):
        if isinstance(request, unsetnsconfig_pmtumin) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsconfig_pmtutimeout
    def unsetnsconfig_pmtutimeout(self, request):
        if isinstance(request, unsetnsconfig_pmtutimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsconfigResponse.typecode.ofwhat, pyclass=unsetnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: savensconfig
    def savensconfig(self, request):
        if isinstance(request, savensconfig) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=savensconfigResponse.typecode.ofwhat, pyclass=savensconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsconfig
    def getnsconfig(self, request):
        if isinstance(request, getnsconfig) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsconfigResponse.typecode.ofwhat, pyclass=getnsconfigResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnshostname_hostname
    def setnshostname_hostname(self, request):
        if isinstance(request, setnshostname_hostname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnshostnameResponse.typecode.ofwhat, pyclass=setnshostnameResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnshostname
    def getnshostname(self, request):
        if isinstance(request, getnshostname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnshostnameResponse.typecode.ofwhat, pyclass=getnshostnameResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addnsacl
    def addnsacl(self, request):
        if isinstance(request, addnsacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addnsaclResponse.typecode.ofwhat, pyclass=addnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmnsacl
    def rmnsacl(self, request):
        if isinstance(request, rmnsacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmnsaclResponse.typecode.ofwhat, pyclass=rmnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_aclaction
    def setnsacl_aclaction(self, request):
        if isinstance(request, setnsacl_aclaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_srcip
    def setnsacl_srcip(self, request):
        if isinstance(request, setnsacl_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_srcport
    def setnsacl_srcport(self, request):
        if isinstance(request, setnsacl_srcport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_destip
    def setnsacl_destip(self, request):
        if isinstance(request, setnsacl_destip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_destport
    def setnsacl_destport(self, request):
        if isinstance(request, setnsacl_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_srcmac
    def setnsacl_srcmac(self, request):
        if isinstance(request, setnsacl_srcmac) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_protocol
    def setnsacl_protocol(self, request):
        if isinstance(request, setnsacl_protocol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_protocolnumber
    def setnsacl_protocolnumber(self, request):
        if isinstance(request, setnsacl_protocolnumber) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_icmptype
    def setnsacl_icmptype(self, request):
        if isinstance(request, setnsacl_icmptype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_vlan
    def setnsacl_vlan(self, request):
        if isinstance(request, setnsacl_vlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_interface
    def setnsacl_interface(self, request):
        if isinstance(request, setnsacl_interface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_priority
    def setnsacl_priority(self, request):
        if isinstance(request, setnsacl_priority) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsacl_state
    def setnsacl_state(self, request):
        if isinstance(request, setnsacl_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsaclResponse.typecode.ofwhat, pyclass=setnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_srcip
    def unsetnsacl_srcip(self, request):
        if isinstance(request, unsetnsacl_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_srcport
    def unsetnsacl_srcport(self, request):
        if isinstance(request, unsetnsacl_srcport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_destip
    def unsetnsacl_destip(self, request):
        if isinstance(request, unsetnsacl_destip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_destport
    def unsetnsacl_destport(self, request):
        if isinstance(request, unsetnsacl_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_srcmac
    def unsetnsacl_srcmac(self, request):
        if isinstance(request, unsetnsacl_srcmac) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_protocol
    def unsetnsacl_protocol(self, request):
        if isinstance(request, unsetnsacl_protocol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_icmptype
    def unsetnsacl_icmptype(self, request):
        if isinstance(request, unsetnsacl_icmptype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_icmpcode
    def unsetnsacl_icmpcode(self, request):
        if isinstance(request, unsetnsacl_icmpcode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_vlan
    def unsetnsacl_vlan(self, request):
        if isinstance(request, unsetnsacl_vlan) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsacl_interface
    def unsetnsacl_interface(self, request):
        if isinstance(request, unsetnsacl_interface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsaclResponse.typecode.ofwhat, pyclass=unsetnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablensacl
    def enablensacl(self, request):
        if isinstance(request, enablensacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablensaclResponse.typecode.ofwhat, pyclass=enablensaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablensacl
    def disablensacl(self, request):
        if isinstance(request, disablensacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablensaclResponse.typecode.ofwhat, pyclass=disablensaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsacl
    def getnsacl(self, request):
        if isinstance(request, getnsacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsaclResponse.typecode.ofwhat, pyclass=getnsaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablensfeature
    def enablensfeature(self, request):
        if isinstance(request, enablensfeature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablensfeatureResponse.typecode.ofwhat, pyclass=enablensfeatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablensfeature
    def disablensfeature(self, request):
        if isinstance(request, disablensfeature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablensfeatureResponse.typecode.ofwhat, pyclass=disablensfeatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsfeature
    def getnsfeature(self, request):
        if isinstance(request, getnsfeature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsfeatureResponse.typecode.ofwhat, pyclass=getnsfeatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addnsip6
    def addnsip6(self, request):
        if isinstance(request, addnsip6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addnsip6Response.typecode.ofwhat, pyclass=addnsip6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmnsip6
    def rmnsip6(self, request):
        if isinstance(request, rmnsip6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmnsip6Response.typecode.ofwhat, pyclass=rmnsip6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip6_map
    def setnsip6_map(self, request):
        if isinstance(request, setnsip6_map) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsip6Response.typecode.ofwhat, pyclass=setnsip6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip6_map
    def unsetnsip6_map(self, request):
        if isinstance(request, unsetnsip6_map) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsip6Response.typecode.ofwhat, pyclass=unsetnsip6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsip6
    def getnsip6(self, request):
        if isinstance(request, getnsip6) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsip6Response.typecode.ofwhat, pyclass=getnsip6Response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addnsip
    def addnsip(self, request):
        if isinstance(request, addnsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addnsipResponse.typecode.ofwhat, pyclass=addnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmnsip
    def rmnsip(self, request):
        if isinstance(request, rmnsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmnsipResponse.typecode.ofwhat, pyclass=rmnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_netmask
    def setnsip_netmask(self, request):
        if isinstance(request, setnsip_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_arp
    def setnsip_arp(self, request):
        if isinstance(request, setnsip_arp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_icmp
    def setnsip_icmp(self, request):
        if isinstance(request, setnsip_icmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_vserver
    def setnsip_vserver(self, request):
        if isinstance(request, setnsip_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_telnet
    def setnsip_telnet(self, request):
        if isinstance(request, setnsip_telnet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_ftp
    def setnsip_ftp(self, request):
        if isinstance(request, setnsip_ftp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_gui
    def setnsip_gui(self, request):
        if isinstance(request, setnsip_gui) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_ssh
    def setnsip_ssh(self, request):
        if isinstance(request, setnsip_ssh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_snmp
    def setnsip_snmp(self, request):
        if isinstance(request, setnsip_snmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_mgmtaccess
    def setnsip_mgmtaccess(self, request):
        if isinstance(request, setnsip_mgmtaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_ospf
    def setnsip_ospf(self, request):
        if isinstance(request, setnsip_ospf) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_bgp
    def setnsip_bgp(self, request):
        if isinstance(request, setnsip_bgp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_rip
    def setnsip_rip(self, request):
        if isinstance(request, setnsip_rip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsip_hostroute
    def setnsip_hostroute(self, request):
        if isinstance(request, setnsip_hostroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsipResponse.typecode.ofwhat, pyclass=setnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_netmask
    def unsetnsip_netmask(self, request):
        if isinstance(request, unsetnsip_netmask) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_arp
    def unsetnsip_arp(self, request):
        if isinstance(request, unsetnsip_arp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_icmp
    def unsetnsip_icmp(self, request):
        if isinstance(request, unsetnsip_icmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_vserver
    def unsetnsip_vserver(self, request):
        if isinstance(request, unsetnsip_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_telnet
    def unsetnsip_telnet(self, request):
        if isinstance(request, unsetnsip_telnet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_ftp
    def unsetnsip_ftp(self, request):
        if isinstance(request, unsetnsip_ftp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_gui
    def unsetnsip_gui(self, request):
        if isinstance(request, unsetnsip_gui) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_ssh
    def unsetnsip_ssh(self, request):
        if isinstance(request, unsetnsip_ssh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_snmp
    def unsetnsip_snmp(self, request):
        if isinstance(request, unsetnsip_snmp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_mgmtaccess
    def unsetnsip_mgmtaccess(self, request):
        if isinstance(request, unsetnsip_mgmtaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_ospf
    def unsetnsip_ospf(self, request):
        if isinstance(request, unsetnsip_ospf) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_bgp
    def unsetnsip_bgp(self, request):
        if isinstance(request, unsetnsip_bgp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_rip
    def unsetnsip_rip(self, request):
        if isinstance(request, unsetnsip_rip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_hostroute
    def unsetnsip_hostroute(self, request):
        if isinstance(request, unsetnsip_hostroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_hostrtgw
    def unsetnsip_hostrtgw(self, request):
        if isinstance(request, unsetnsip_hostrtgw) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_metric
    def unsetnsip_metric(self, request):
        if isinstance(request, unsetnsip_metric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_vserverrhilevel
    def unsetnsip_vserverrhilevel(self, request):
        if isinstance(request, unsetnsip_vserverrhilevel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_ospflsatype
    def unsetnsip_ospflsatype(self, request):
        if isinstance(request, unsetnsip_ospflsatype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsip_ospfarea
    def unsetnsip_ospfarea(self, request):
        if isinstance(request, unsetnsip_ospfarea) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsipResponse.typecode.ofwhat, pyclass=unsetnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablensip
    def enablensip(self, request):
        if isinstance(request, enablensip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablensipResponse.typecode.ofwhat, pyclass=enablensipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablensip
    def disablensip(self, request):
        if isinstance(request, disablensip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablensipResponse.typecode.ofwhat, pyclass=disablensipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsip
    def getnsip(self, request):
        if isinstance(request, getnsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsipResponse.typecode.ofwhat, pyclass=getnsipResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablensmode
    def enablensmode(self, request):
        if isinstance(request, enablensmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablensmodeResponse.typecode.ofwhat, pyclass=enablensmodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablensmode
    def disablensmode(self, request):
        if isinstance(request, disablensmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablensmodeResponse.typecode.ofwhat, pyclass=disablensmodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsmode
    def getnsmode(self, request):
        if isinstance(request, getnsmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsmodeResponse.typecode.ofwhat, pyclass=getnsmodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsspparams_basethreshold
    def setnsspparams_basethreshold(self, request):
        if isinstance(request, setnsspparams_basethreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsspparamsResponse.typecode.ofwhat, pyclass=setnsspparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsspparams_throttle
    def setnsspparams_throttle(self, request):
        if isinstance(request, setnsspparams_throttle) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsspparamsResponse.typecode.ofwhat, pyclass=setnsspparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsspparams_basethreshold
    def unsetnsspparams_basethreshold(self, request):
        if isinstance(request, unsetnsspparams_basethreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsspparamsResponse.typecode.ofwhat, pyclass=unsetnsspparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsspparams_throttle
    def unsetnsspparams_throttle(self, request):
        if isinstance(request, unsetnsspparams_throttle) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsspparamsResponse.typecode.ofwhat, pyclass=unsetnsspparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsspparams
    def getnsspparams(self, request):
        if isinstance(request, getnsspparams) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsspparamsResponse.typecode.ofwhat, pyclass=getnsspparamsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpbufparam_size
    def setnstcpbufparam_size(self, request):
        if isinstance(request, setnstcpbufparam_size) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpbufparamResponse.typecode.ofwhat, pyclass=setnstcpbufparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpbufparam_memlimit
    def setnstcpbufparam_memlimit(self, request):
        if isinstance(request, setnstcpbufparam_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpbufparamResponse.typecode.ofwhat, pyclass=setnstcpbufparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpbufparam_size
    def unsetnstcpbufparam_size(self, request):
        if isinstance(request, unsetnstcpbufparam_size) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpbufparamResponse.typecode.ofwhat, pyclass=unsetnstcpbufparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpbufparam_memlimit
    def unsetnstcpbufparam_memlimit(self, request):
        if isinstance(request, unsetnstcpbufparam_memlimit) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpbufparamResponse.typecode.ofwhat, pyclass=unsetnstcpbufparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnstcpbufparam
    def getnstcpbufparam(self, request):
        if isinstance(request, getnstcpbufparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnstcpbufparamResponse.typecode.ofwhat, pyclass=getnstcpbufparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_ws
    def setnstcpparam_ws(self, request):
        if isinstance(request, setnstcpparam_ws) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_wsval
    def setnstcpparam_wsval(self, request):
        if isinstance(request, setnstcpparam_wsval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_sack
    def setnstcpparam_sack(self, request):
        if isinstance(request, setnstcpparam_sack) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_maxburst
    def setnstcpparam_maxburst(self, request):
        if isinstance(request, setnstcpparam_maxburst) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_initialcwnd
    def setnstcpparam_initialcwnd(self, request):
        if isinstance(request, setnstcpparam_initialcwnd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_recvbuffsize
    def setnstcpparam_recvbuffsize(self, request):
        if isinstance(request, setnstcpparam_recvbuffsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_delayedack
    def setnstcpparam_delayedack(self, request):
        if isinstance(request, setnstcpparam_delayedack) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstcpparam_downstaterst
    def setnstcpparam_downstaterst(self, request):
        if isinstance(request, setnstcpparam_downstaterst) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstcpparamResponse.typecode.ofwhat, pyclass=setnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_ws
    def unsetnstcpparam_ws(self, request):
        if isinstance(request, unsetnstcpparam_ws) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_wsval
    def unsetnstcpparam_wsval(self, request):
        if isinstance(request, unsetnstcpparam_wsval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_sack
    def unsetnstcpparam_sack(self, request):
        if isinstance(request, unsetnstcpparam_sack) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_maxburst
    def unsetnstcpparam_maxburst(self, request):
        if isinstance(request, unsetnstcpparam_maxburst) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_initialcwnd
    def unsetnstcpparam_initialcwnd(self, request):
        if isinstance(request, unsetnstcpparam_initialcwnd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_recvbuffsize
    def unsetnstcpparam_recvbuffsize(self, request):
        if isinstance(request, unsetnstcpparam_recvbuffsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_delayedack
    def unsetnstcpparam_delayedack(self, request):
        if isinstance(request, unsetnstcpparam_delayedack) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstcpparam_downstaterst
    def unsetnstcpparam_downstaterst(self, request):
        if isinstance(request, unsetnstcpparam_downstaterst) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstcpparamResponse.typecode.ofwhat, pyclass=unsetnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnstcpparam
    def getnstcpparam(self, request):
        if isinstance(request, getnstcpparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnstcpparamResponse.typecode.ofwhat, pyclass=getnstcpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnshttpparam_dropinvalreqs
    def setnshttpparam_dropinvalreqs(self, request):
        if isinstance(request, setnshttpparam_dropinvalreqs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnshttpparamResponse.typecode.ofwhat, pyclass=setnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnshttpparam_markhttp09inval
    def setnshttpparam_markhttp09inval(self, request):
        if isinstance(request, setnshttpparam_markhttp09inval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnshttpparamResponse.typecode.ofwhat, pyclass=setnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnshttpparam_markconnreqinval
    def setnshttpparam_markconnreqinval(self, request):
        if isinstance(request, setnshttpparam_markconnreqinval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnshttpparamResponse.typecode.ofwhat, pyclass=setnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnshttpparam_dropinvalreqs
    def unsetnshttpparam_dropinvalreqs(self, request):
        if isinstance(request, unsetnshttpparam_dropinvalreqs) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnshttpparamResponse.typecode.ofwhat, pyclass=unsetnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnshttpparam_markhttp09inval
    def unsetnshttpparam_markhttp09inval(self, request):
        if isinstance(request, unsetnshttpparam_markhttp09inval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnshttpparamResponse.typecode.ofwhat, pyclass=unsetnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnshttpparam_markconnreqinval
    def unsetnshttpparam_markconnreqinval(self, request):
        if isinstance(request, unsetnshttpparam_markconnreqinval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnshttpparamResponse.typecode.ofwhat, pyclass=unsetnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnshttpparam
    def getnshttpparam(self, request):
        if isinstance(request, getnshttpparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnshttpparamResponse.typecode.ofwhat, pyclass=getnshttpparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsweblogparam_buffersizemb
    def setnsweblogparam_buffersizemb(self, request):
        if isinstance(request, setnsweblogparam_buffersizemb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsweblogparamResponse.typecode.ofwhat, pyclass=setnsweblogparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsweblogparam
    def getnsweblogparam(self, request):
        if isinstance(request, getnsweblogparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsweblogparamResponse.typecode.ofwhat, pyclass=getnsweblogparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsratecontrol_tcpthreshold
    def setnsratecontrol_tcpthreshold(self, request):
        if isinstance(request, setnsratecontrol_tcpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsratecontrolResponse.typecode.ofwhat, pyclass=setnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsratecontrol_udpthreshold
    def setnsratecontrol_udpthreshold(self, request):
        if isinstance(request, setnsratecontrol_udpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsratecontrolResponse.typecode.ofwhat, pyclass=setnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsratecontrol_icmpthreshold
    def setnsratecontrol_icmpthreshold(self, request):
        if isinstance(request, setnsratecontrol_icmpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsratecontrolResponse.typecode.ofwhat, pyclass=setnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsratecontrol_tcpthreshold
    def unsetnsratecontrol_tcpthreshold(self, request):
        if isinstance(request, unsetnsratecontrol_tcpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsratecontrolResponse.typecode.ofwhat, pyclass=unsetnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsratecontrol_udpthreshold
    def unsetnsratecontrol_udpthreshold(self, request):
        if isinstance(request, unsetnsratecontrol_udpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsratecontrolResponse.typecode.ofwhat, pyclass=unsetnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsratecontrol_icmpthreshold
    def unsetnsratecontrol_icmpthreshold(self, request):
        if isinstance(request, unsetnsratecontrol_icmpthreshold) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsratecontrolResponse.typecode.ofwhat, pyclass=unsetnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsratecontrol
    def getnsratecontrol(self, request):
        if isinstance(request, getnsratecontrol) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsratecontrolResponse.typecode.ofwhat, pyclass=getnsratecontrolResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsrpcnode_ipaddress
    def setnsrpcnode_ipaddress(self, request):
        if isinstance(request, setnsrpcnode_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsrpcnodeResponse.typecode.ofwhat, pyclass=setnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsrpcnode_password
    def setnsrpcnode_password(self, request):
        if isinstance(request, setnsrpcnode_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsrpcnodeResponse.typecode.ofwhat, pyclass=setnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsrpcnode_srcip
    def setnsrpcnode_srcip(self, request):
        if isinstance(request, setnsrpcnode_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsrpcnodeResponse.typecode.ofwhat, pyclass=setnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsrpcnode_secure
    def setnsrpcnode_secure(self, request):
        if isinstance(request, setnsrpcnode_secure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsrpcnodeResponse.typecode.ofwhat, pyclass=setnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsrpcnode_password
    def unsetnsrpcnode_password(self, request):
        if isinstance(request, unsetnsrpcnode_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsrpcnodeResponse.typecode.ofwhat, pyclass=unsetnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsrpcnode_srcip
    def unsetnsrpcnode_srcip(self, request):
        if isinstance(request, unsetnsrpcnode_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsrpcnodeResponse.typecode.ofwhat, pyclass=unsetnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsrpcnode_secure
    def unsetnsrpcnode_secure(self, request):
        if isinstance(request, unsetnsrpcnode_secure) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsrpcnodeResponse.typecode.ofwhat, pyclass=unsetnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsrpcnode
    def getnsrpcnode(self, request):
        if isinstance(request, getnsrpcnode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsrpcnodeResponse.typecode.ofwhat, pyclass=getnsrpcnodeResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsidletimeout_tcpsvr
    def setnsidletimeout_tcpsvr(self, request):
        if isinstance(request, setnsidletimeout_tcpsvr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsidletimeoutResponse.typecode.ofwhat, pyclass=setnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsidletimeout_tcpclt
    def setnsidletimeout_tcpclt(self, request):
        if isinstance(request, setnsidletimeout_tcpclt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsidletimeoutResponse.typecode.ofwhat, pyclass=setnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnsidletimeout_nontcpsvrclt
    def setnsidletimeout_nontcpsvrclt(self, request):
        if isinstance(request, setnsidletimeout_nontcpsvrclt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnsidletimeoutResponse.typecode.ofwhat, pyclass=setnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsidletimeout_tcpsvr
    def unsetnsidletimeout_tcpsvr(self, request):
        if isinstance(request, unsetnsidletimeout_tcpsvr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsidletimeoutResponse.typecode.ofwhat, pyclass=unsetnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsidletimeout_tcpclt
    def unsetnsidletimeout_tcpclt(self, request):
        if isinstance(request, unsetnsidletimeout_tcpclt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsidletimeoutResponse.typecode.ofwhat, pyclass=unsetnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnsidletimeout_nontcpsvrclt
    def unsetnsidletimeout_nontcpsvrclt(self, request):
        if isinstance(request, unsetnsidletimeout_nontcpsvrclt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnsidletimeoutResponse.typecode.ofwhat, pyclass=unsetnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnsidletimeout
    def getnsidletimeout(self, request):
        if isinstance(request, getnsidletimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnsidletimeoutResponse.typecode.ofwhat, pyclass=getnsidletimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstimeout_zombie
    def setnstimeout_zombie(self, request):
        if isinstance(request, setnstimeout_zombie) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstimeoutResponse.typecode.ofwhat, pyclass=setnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstimeout_client
    def setnstimeout_client(self, request):
        if isinstance(request, setnstimeout_client) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstimeoutResponse.typecode.ofwhat, pyclass=setnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstimeout_server
    def setnstimeout_server(self, request):
        if isinstance(request, setnstimeout_server) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstimeoutResponse.typecode.ofwhat, pyclass=setnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstimeout_halfclose
    def setnstimeout_halfclose(self, request):
        if isinstance(request, setnstimeout_halfclose) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstimeoutResponse.typecode.ofwhat, pyclass=setnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setnstimeout_nontcpzombie
    def setnstimeout_nontcpzombie(self, request):
        if isinstance(request, setnstimeout_nontcpzombie) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setnstimeoutResponse.typecode.ofwhat, pyclass=setnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstimeout_zombie
    def unsetnstimeout_zombie(self, request):
        if isinstance(request, unsetnstimeout_zombie) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstimeoutResponse.typecode.ofwhat, pyclass=unsetnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstimeout_client
    def unsetnstimeout_client(self, request):
        if isinstance(request, unsetnstimeout_client) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstimeoutResponse.typecode.ofwhat, pyclass=unsetnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstimeout_server
    def unsetnstimeout_server(self, request):
        if isinstance(request, unsetnstimeout_server) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstimeoutResponse.typecode.ofwhat, pyclass=unsetnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstimeout_halfclose
    def unsetnstimeout_halfclose(self, request):
        if isinstance(request, unsetnstimeout_halfclose) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstimeoutResponse.typecode.ofwhat, pyclass=unsetnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetnstimeout_nontcpzombie
    def unsetnstimeout_nontcpzombie(self, request):
        if isinstance(request, unsetnstimeout_nontcpzombie) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetnstimeoutResponse.typecode.ofwhat, pyclass=unsetnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnstimeout
    def getnstimeout(self, request):
        if isinstance(request, getnstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnstimeoutResponse.typecode.ofwhat, pyclass=getnstimeoutResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addnssimpleacl
    def addnssimpleacl(self, request):
        if isinstance(request, addnssimpleacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addnssimpleaclResponse.typecode.ofwhat, pyclass=addnssimpleaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmnssimpleacl
    def rmnssimpleacl(self, request):
        if isinstance(request, rmnssimpleacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmnssimpleaclResponse.typecode.ofwhat, pyclass=rmnssimpleaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getnssimpleacl
    def getnssimpleacl(self, request):
        if isinstance(request, getnssimpleacl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getnssimpleaclResponse.typecode.ofwhat, pyclass=getnssimpleaclResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addpolicyexpression
    def addpolicyexpression(self, request):
        if isinstance(request, addpolicyexpression) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addpolicyexpressionResponse.typecode.ofwhat, pyclass=addpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmpolicyexpression
    def rmpolicyexpression(self, request):
        if isinstance(request, rmpolicyexpression) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmpolicyexpressionResponse.typecode.ofwhat, pyclass=rmpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpolicyexpression_value
    def setpolicyexpression_value(self, request):
        if isinstance(request, setpolicyexpression_value) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpolicyexpressionResponse.typecode.ofwhat, pyclass=setpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpolicyexpression_description
    def setpolicyexpression_description(self, request):
        if isinstance(request, setpolicyexpression_description) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpolicyexpressionResponse.typecode.ofwhat, pyclass=setpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpolicyexpression_clientsecuritymessage
    def setpolicyexpression_clientsecuritymessage(self, request):
        if isinstance(request, setpolicyexpression_clientsecuritymessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpolicyexpressionResponse.typecode.ofwhat, pyclass=setpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetpolicyexpression_description
    def unsetpolicyexpression_description(self, request):
        if isinstance(request, unsetpolicyexpression_description) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetpolicyexpressionResponse.typecode.ofwhat, pyclass=unsetpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetpolicyexpression_clientsecuritymessage
    def unsetpolicyexpression_clientsecuritymessage(self, request):
        if isinstance(request, unsetpolicyexpression_clientsecuritymessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetpolicyexpressionResponse.typecode.ofwhat, pyclass=unsetpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getpolicyexpression
    def getpolicyexpression(self, request):
        if isinstance(request, getpolicyexpression) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getpolicyexpressionResponse.typecode.ofwhat, pyclass=getpolicyexpressionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addpolicymap
    def addpolicymap(self, request):
        if isinstance(request, addpolicymap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addpolicymapResponse.typecode.ofwhat, pyclass=addpolicymapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmpolicymap
    def rmpolicymap(self, request):
        if isinstance(request, rmpolicymap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmpolicymapResponse.typecode.ofwhat, pyclass=rmpolicymapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getpolicymap
    def getpolicymap(self, request):
        if isinstance(request, getpolicymap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getpolicymapResponse.typecode.ofwhat, pyclass=getpolicymapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addpolicypatclass
    def addpolicypatclass(self, request):
        if isinstance(request, addpolicypatclass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addpolicypatclassResponse.typecode.ofwhat, pyclass=addpolicypatclassResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmpolicypatclass
    def rmpolicypatclass(self, request):
        if isinstance(request, rmpolicypatclass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmpolicypatclassResponse.typecode.ofwhat, pyclass=rmpolicypatclassResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindpolicypatclass_string
    def bindpolicypatclass_string(self, request):
        if isinstance(request, bindpolicypatclass_string) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindpolicypatclassResponse.typecode.ofwhat, pyclass=bindpolicypatclassResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindpolicypatclass_string
    def unbindpolicypatclass_string(self, request):
        if isinstance(request, unbindpolicypatclass_string) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindpolicypatclassResponse.typecode.ofwhat, pyclass=unbindpolicypatclassResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getpolicypatclass
    def getpolicypatclass(self, request):
        if isinstance(request, getpolicypatclass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getpolicypatclassResponse.typecode.ofwhat, pyclass=getpolicypatclassResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getpqbinding
    def getpqbinding(self, request):
        if isinstance(request, getpqbinding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getpqbindingResponse.typecode.ofwhat, pyclass=getpqbindingResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addpqpolicy
    def addpqpolicy(self, request):
        if isinstance(request, addpqpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addpqpolicyResponse.typecode.ofwhat, pyclass=addpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmpqpolicy
    def rmpqpolicy(self, request):
        if isinstance(request, rmpqpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmpqpolicyResponse.typecode.ofwhat, pyclass=rmpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpqpolicy_weight
    def setpqpolicy_weight(self, request):
        if isinstance(request, setpqpolicy_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpqpolicyResponse.typecode.ofwhat, pyclass=setpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpqpolicy_qdepth
    def setpqpolicy_qdepth(self, request):
        if isinstance(request, setpqpolicy_qdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpqpolicyResponse.typecode.ofwhat, pyclass=setpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setpqpolicy_polqdepth
    def setpqpolicy_polqdepth(self, request):
        if isinstance(request, setpqpolicy_polqdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setpqpolicyResponse.typecode.ofwhat, pyclass=setpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetpqpolicy_weight
    def unsetpqpolicy_weight(self, request):
        if isinstance(request, unsetpqpolicy_weight) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetpqpolicyResponse.typecode.ofwhat, pyclass=unsetpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetpqpolicy_qdepth
    def unsetpqpolicy_qdepth(self, request):
        if isinstance(request, unsetpqpolicy_qdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetpqpolicyResponse.typecode.ofwhat, pyclass=unsetpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetpqpolicy_polqdepth
    def unsetpqpolicy_polqdepth(self, request):
        if isinstance(request, unsetpqpolicy_polqdepth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetpqpolicyResponse.typecode.ofwhat, pyclass=unsetpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getpqpolicy
    def getpqpolicy(self, request):
        if isinstance(request, getpqpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getpqpolicyResponse.typecode.ofwhat, pyclass=getpqpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addresponderpolicy
    def addresponderpolicy(self, request):
        if isinstance(request, addresponderpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addresponderpolicyResponse.typecode.ofwhat, pyclass=addresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmresponderpolicy
    def rmresponderpolicy(self, request):
        if isinstance(request, rmresponderpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmresponderpolicyResponse.typecode.ofwhat, pyclass=rmresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setresponderpolicy_rule
    def setresponderpolicy_rule(self, request):
        if isinstance(request, setresponderpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setresponderpolicyResponse.typecode.ofwhat, pyclass=setresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setresponderpolicy_action
    def setresponderpolicy_action(self, request):
        if isinstance(request, setresponderpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setresponderpolicyResponse.typecode.ofwhat, pyclass=setresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setresponderpolicy_undefaction
    def setresponderpolicy_undefaction(self, request):
        if isinstance(request, setresponderpolicy_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setresponderpolicyResponse.typecode.ofwhat, pyclass=setresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetresponderpolicy_rule
    def unsetresponderpolicy_rule(self, request):
        if isinstance(request, unsetresponderpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetresponderpolicyResponse.typecode.ofwhat, pyclass=unsetresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetresponderpolicy_action
    def unsetresponderpolicy_action(self, request):
        if isinstance(request, unsetresponderpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetresponderpolicyResponse.typecode.ofwhat, pyclass=unsetresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetresponderpolicy_undefaction
    def unsetresponderpolicy_undefaction(self, request):
        if isinstance(request, unsetresponderpolicy_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetresponderpolicyResponse.typecode.ofwhat, pyclass=unsetresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getresponderpolicy
    def getresponderpolicy(self, request):
        if isinstance(request, getresponderpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getresponderpolicyResponse.typecode.ofwhat, pyclass=getresponderpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addresponderaction
    def addresponderaction(self, request):
        if isinstance(request, addresponderaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addresponderactionResponse.typecode.ofwhat, pyclass=addresponderactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmresponderaction
    def rmresponderaction(self, request):
        if isinstance(request, rmresponderaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmresponderactionResponse.typecode.ofwhat, pyclass=rmresponderactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setresponderaction_target
    def setresponderaction_target(self, request):
        if isinstance(request, setresponderaction_target) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setresponderactionResponse.typecode.ofwhat, pyclass=setresponderactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getresponderaction
    def getresponderaction(self, request):
        if isinstance(request, getresponderaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getresponderactionResponse.typecode.ofwhat, pyclass=getresponderactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindresponderglobal_policyname
    def bindresponderglobal_policyname(self, request):
        if isinstance(request, bindresponderglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindresponderglobalResponse.typecode.ofwhat, pyclass=bindresponderglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindresponderglobal_policyname
    def unbindresponderglobal_policyname(self, request):
        if isinstance(request, unbindresponderglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindresponderglobalResponse.typecode.ofwhat, pyclass=unbindresponderglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getresponderglobal
    def getresponderglobal(self, request):
        if isinstance(request, getresponderglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getresponderglobalResponse.typecode.ofwhat, pyclass=getresponderglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setresponderparam_undefaction
    def setresponderparam_undefaction(self, request):
        if isinstance(request, setresponderparam_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setresponderparamResponse.typecode.ofwhat, pyclass=setresponderparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetresponderparam_undefaction
    def unsetresponderparam_undefaction(self, request):
        if isinstance(request, unsetresponderparam_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetresponderparamResponse.typecode.ofwhat, pyclass=unsetresponderparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getresponderparam
    def getresponderparam(self, request):
        if isinstance(request, getresponderparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getresponderparamResponse.typecode.ofwhat, pyclass=getresponderparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addresponderpolicylabel
    def addresponderpolicylabel(self, request):
        if isinstance(request, addresponderpolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addresponderpolicylabelResponse.typecode.ofwhat, pyclass=addresponderpolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmresponderpolicylabel
    def rmresponderpolicylabel(self, request):
        if isinstance(request, rmresponderpolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmresponderpolicylabelResponse.typecode.ofwhat, pyclass=rmresponderpolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindresponderpolicylabel_policy
    def bindresponderpolicylabel_policy(self, request):
        if isinstance(request, bindresponderpolicylabel_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindresponderpolicylabelResponse.typecode.ofwhat, pyclass=bindresponderpolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindresponderpolicylabel_policy
    def unbindresponderpolicylabel_policy(self, request):
        if isinstance(request, unbindresponderpolicylabel_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindresponderpolicylabelResponse.typecode.ofwhat, pyclass=unbindresponderpolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getresponderpolicylabel
    def getresponderpolicylabel(self, request):
        if isinstance(request, getresponderpolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getresponderpolicylabelResponse.typecode.ofwhat, pyclass=getresponderpolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addrewritepolicy
    def addrewritepolicy(self, request):
        if isinstance(request, addrewritepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addrewritepolicyResponse.typecode.ofwhat, pyclass=addrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmrewritepolicy
    def rmrewritepolicy(self, request):
        if isinstance(request, rmrewritepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmrewritepolicyResponse.typecode.ofwhat, pyclass=rmrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewritepolicy_rule
    def setrewritepolicy_rule(self, request):
        if isinstance(request, setrewritepolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewritepolicyResponse.typecode.ofwhat, pyclass=setrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewritepolicy_action
    def setrewritepolicy_action(self, request):
        if isinstance(request, setrewritepolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewritepolicyResponse.typecode.ofwhat, pyclass=setrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewritepolicy_undefaction
    def setrewritepolicy_undefaction(self, request):
        if isinstance(request, setrewritepolicy_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewritepolicyResponse.typecode.ofwhat, pyclass=setrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrewritepolicy_undefaction
    def unsetrewritepolicy_undefaction(self, request):
        if isinstance(request, unsetrewritepolicy_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrewritepolicyResponse.typecode.ofwhat, pyclass=unsetrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrewritepolicy
    def getrewritepolicy(self, request):
        if isinstance(request, getrewritepolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrewritepolicyResponse.typecode.ofwhat, pyclass=getrewritepolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addrewriteaction
    def addrewriteaction(self, request):
        if isinstance(request, addrewriteaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addrewriteactionResponse.typecode.ofwhat, pyclass=addrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmrewriteaction
    def rmrewriteaction(self, request):
        if isinstance(request, rmrewriteaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmrewriteactionResponse.typecode.ofwhat, pyclass=rmrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewriteaction_target
    def setrewriteaction_target(self, request):
        if isinstance(request, setrewriteaction_target) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewriteactionResponse.typecode.ofwhat, pyclass=setrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewriteaction_stringbuilderexpr
    def setrewriteaction_stringbuilderexpr(self, request):
        if isinstance(request, setrewriteaction_stringbuilderexpr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewriteactionResponse.typecode.ofwhat, pyclass=setrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewriteaction_pattern
    def setrewriteaction_pattern(self, request):
        if isinstance(request, setrewriteaction_pattern) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewriteactionResponse.typecode.ofwhat, pyclass=setrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrewriteaction
    def getrewriteaction(self, request):
        if isinstance(request, getrewriteaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrewriteactionResponse.typecode.ofwhat, pyclass=getrewriteactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindrewriteglobal_policy
    def bindrewriteglobal_policy(self, request):
        if isinstance(request, bindrewriteglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindrewriteglobalResponse.typecode.ofwhat, pyclass=bindrewriteglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindrewriteglobal_policy
    def unbindrewriteglobal_policy(self, request):
        if isinstance(request, unbindrewriteglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindrewriteglobalResponse.typecode.ofwhat, pyclass=unbindrewriteglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrewriteglobal
    def getrewriteglobal(self, request):
        if isinstance(request, getrewriteglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrewriteglobalResponse.typecode.ofwhat, pyclass=getrewriteglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrewriteparam_undefaction
    def setrewriteparam_undefaction(self, request):
        if isinstance(request, setrewriteparam_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrewriteparamResponse.typecode.ofwhat, pyclass=setrewriteparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrewriteparam_undefaction
    def unsetrewriteparam_undefaction(self, request):
        if isinstance(request, unsetrewriteparam_undefaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrewriteparamResponse.typecode.ofwhat, pyclass=unsetrewriteparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrewriteparam
    def getrewriteparam(self, request):
        if isinstance(request, getrewriteparam) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrewriteparamResponse.typecode.ofwhat, pyclass=getrewriteparamResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addrewritepolicylabel
    def addrewritepolicylabel(self, request):
        if isinstance(request, addrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addrewritepolicylabelResponse.typecode.ofwhat, pyclass=addrewritepolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmrewritepolicylabel
    def rmrewritepolicylabel(self, request):
        if isinstance(request, rmrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmrewritepolicylabelResponse.typecode.ofwhat, pyclass=rmrewritepolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindrewritepolicylabel_policy
    def bindrewritepolicylabel_policy(self, request):
        if isinstance(request, bindrewritepolicylabel_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindrewritepolicylabelResponse.typecode.ofwhat, pyclass=bindrewritepolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindrewritepolicylabel_policy
    def unbindrewritepolicylabel_policy(self, request):
        if isinstance(request, unbindrewritepolicylabel_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindrewritepolicylabelResponse.typecode.ofwhat, pyclass=unbindrewritepolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrewritepolicylabel
    def getrewritepolicylabel(self, request):
        if isinstance(request, getrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrewritepolicylabelResponse.typecode.ofwhat, pyclass=getrewritepolicylabelResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearrouterbgp
    def clearrouterbgp(self, request):
        if isinstance(request, clearrouterbgp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearrouterbgpResponse.typecode.ofwhat, pyclass=clearrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: clearrouterbgpEx
    def clearrouterbgpEx(self, request):
        if isinstance(request, clearrouterbgpEx) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=clearrouterbgpResponse.typecode.ofwhat, pyclass=clearrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: vtysh
    def vtysh(self, request):
        if isinstance(request, vtysh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=vtyshResponse.typecode.ofwhat, pyclass=vtyshResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_routerid
    def setrouterospf_routerid(self, request):
        if isinstance(request, setrouterospf_routerid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_passiveinterface
    def setrouterospf_passiveinterface(self, request):
        if isinstance(request, setrouterospf_passiveinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_staticredistribute
    def setrouterospf_staticredistribute(self, request):
        if isinstance(request, setrouterospf_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_kernelredistribute
    def setrouterospf_kernelredistribute(self, request):
        if isinstance(request, setrouterospf_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_conredistribute
    def setrouterospf_conredistribute(self, request):
        if isinstance(request, setrouterospf_conredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_learnroute
    def setrouterospf_learnroute(self, request):
        if isinstance(request, setrouterospf_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_network
    def setrouterospf_network(self, request):
        if isinstance(request, setrouterospf_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterospf_host
    def setrouterospf_host(self, request):
        if isinstance(request, setrouterospf_host) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterospfResponse.typecode.ofwhat, pyclass=setrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_routerid
    def unsetrouterospf_routerid(self, request):
        if isinstance(request, unsetrouterospf_routerid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_learnroute
    def unsetrouterospf_learnroute(self, request):
        if isinstance(request, unsetrouterospf_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_conredistribute
    def unsetrouterospf_conredistribute(self, request):
        if isinstance(request, unsetrouterospf_conredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_kernelredistribute
    def unsetrouterospf_kernelredistribute(self, request):
        if isinstance(request, unsetrouterospf_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_staticredistribute
    def unsetrouterospf_staticredistribute(self, request):
        if isinstance(request, unsetrouterospf_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_network
    def unsetrouterospf_network(self, request):
        if isinstance(request, unsetrouterospf_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_host
    def unsetrouterospf_host(self, request):
        if isinstance(request, unsetrouterospf_host) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_passiveinterface
    def unsetrouterospf_passiveinterface(self, request):
        if isinstance(request, unsetrouterospf_passiveinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_staticmetrictype
    def unsetrouterospf_staticmetrictype(self, request):
        if isinstance(request, unsetrouterospf_staticmetrictype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_kernelmetrictype
    def unsetrouterospf_kernelmetrictype(self, request):
        if isinstance(request, unsetrouterospf_kernelmetrictype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterospf_conmetrictype
    def unsetrouterospf_conmetrictype(self, request):
        if isinstance(request, unsetrouterospf_conmetrictype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterospfResponse.typecode.ofwhat, pyclass=unsetrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrouterospf
    def getrouterospf(self, request):
        if isinstance(request, getrouterospf) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrouterospfResponse.typecode.ofwhat, pyclass=getrouterospfResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_defaultmetric
    def setrouterrip_defaultmetric(self, request):
        if isinstance(request, setrouterrip_defaultmetric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_passiveinterface
    def setrouterrip_passiveinterface(self, request):
        if isinstance(request, setrouterrip_passiveinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_learnroute
    def setrouterrip_learnroute(self, request):
        if isinstance(request, setrouterrip_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_staticredistribute
    def setrouterrip_staticredistribute(self, request):
        if isinstance(request, setrouterrip_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_kernelredistribute
    def setrouterrip_kernelredistribute(self, request):
        if isinstance(request, setrouterrip_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterrip_network
    def setrouterrip_network(self, request):
        if isinstance(request, setrouterrip_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterripResponse.typecode.ofwhat, pyclass=setrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_defaultmetric
    def unsetrouterrip_defaultmetric(self, request):
        if isinstance(request, unsetrouterrip_defaultmetric) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_staticredistribute
    def unsetrouterrip_staticredistribute(self, request):
        if isinstance(request, unsetrouterrip_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_learnroute
    def unsetrouterrip_learnroute(self, request):
        if isinstance(request, unsetrouterrip_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_kernelredistribute
    def unsetrouterrip_kernelredistribute(self, request):
        if isinstance(request, unsetrouterrip_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_passiveinterface
    def unsetrouterrip_passiveinterface(self, request):
        if isinstance(request, unsetrouterrip_passiveinterface) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterrip_network
    def unsetrouterrip_network(self, request):
        if isinstance(request, unsetrouterrip_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterripResponse.typecode.ofwhat, pyclass=unsetrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getrouterrip
    def getrouterrip(self, request):
        if isinstance(request, getrouterrip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getrouterripResponse.typecode.ofwhat, pyclass=getrouterripResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addrouterbgp
    def addrouterbgp(self, request):
        if isinstance(request, addrouterbgp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addrouterbgpResponse.typecode.ofwhat, pyclass=addrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmrouterbgp
    def rmrouterbgp(self, request):
        if isinstance(request, rmrouterbgp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmrouterbgpResponse.typecode.ofwhat, pyclass=rmrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_routerid
    def setrouterbgp_routerid(self, request):
        if isinstance(request, setrouterbgp_routerid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_learnroute
    def setrouterbgp_learnroute(self, request):
        if isinstance(request, setrouterbgp_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_staticredistribute
    def setrouterbgp_staticredistribute(self, request):
        if isinstance(request, setrouterbgp_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_kernelredistribute
    def setrouterbgp_kernelredistribute(self, request):
        if isinstance(request, setrouterbgp_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_conredistribute
    def setrouterbgp_conredistribute(self, request):
        if isinstance(request, setrouterbgp_conredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_neighbor
    def setrouterbgp_neighbor(self, request):
        if isinstance(request, setrouterbgp_neighbor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setrouterbgp_network
    def setrouterbgp_network(self, request):
        if isinstance(request, setrouterbgp_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setrouterbgpResponse.typecode.ofwhat, pyclass=setrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_routerid
    def unsetrouterbgp_routerid(self, request):
        if isinstance(request, unsetrouterbgp_routerid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_learnroute
    def unsetrouterbgp_learnroute(self, request):
        if isinstance(request, unsetrouterbgp_learnroute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_staticredistribute
    def unsetrouterbgp_staticredistribute(self, request):
        if isinstance(request, unsetrouterbgp_staticredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_kernelredistribute
    def unsetrouterbgp_kernelredistribute(self, request):
        if isinstance(request, unsetrouterbgp_kernelredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_conredistribute
    def unsetrouterbgp_conredistribute(self, request):
        if isinstance(request, unsetrouterbgp_conredistribute) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_neighbor
    def unsetrouterbgp_neighbor(self, request):
        if isinstance(request, unsetrouterbgp_neighbor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_network
    def unsetrouterbgp_network(self, request):
        if isinstance(request, unsetrouterbgp_network) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetrouterbgp_remoteas
    def unsetrouterbgp_remoteas(self, request):
        if isinstance(request, unsetrouterbgp_remoteas) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetrouterbgpResponse.typecode.ofwhat, pyclass=unsetrouterbgpResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpoid
    def getsnmpoid(self, request):
        if isinstance(request, getsnmpoid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpoidResponse.typecode.ofwhat, pyclass=getsnmpoidResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpalarm_thresholdvalue
    def setsnmpalarm_thresholdvalue(self, request):
        if isinstance(request, setsnmpalarm_thresholdvalue) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpalarmResponse.typecode.ofwhat, pyclass=setsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpalarm_time
    def setsnmpalarm_time(self, request):
        if isinstance(request, setsnmpalarm_time) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpalarmResponse.typecode.ofwhat, pyclass=setsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpalarm_state
    def setsnmpalarm_state(self, request):
        if isinstance(request, setsnmpalarm_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpalarmResponse.typecode.ofwhat, pyclass=setsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpalarm_severity
    def setsnmpalarm_severity(self, request):
        if isinstance(request, setsnmpalarm_severity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpalarmResponse.typecode.ofwhat, pyclass=setsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpalarm_thresholdvalue
    def unsetsnmpalarm_thresholdvalue(self, request):
        if isinstance(request, unsetsnmpalarm_thresholdvalue) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpalarmResponse.typecode.ofwhat, pyclass=unsetsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpalarm_normalvalue
    def unsetsnmpalarm_normalvalue(self, request):
        if isinstance(request, unsetsnmpalarm_normalvalue) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpalarmResponse.typecode.ofwhat, pyclass=unsetsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpalarm_time
    def unsetsnmpalarm_time(self, request):
        if isinstance(request, unsetsnmpalarm_time) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpalarmResponse.typecode.ofwhat, pyclass=unsetsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpalarm_state
    def unsetsnmpalarm_state(self, request):
        if isinstance(request, unsetsnmpalarm_state) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpalarmResponse.typecode.ofwhat, pyclass=unsetsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpalarm_severity
    def unsetsnmpalarm_severity(self, request):
        if isinstance(request, unsetsnmpalarm_severity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpalarmResponse.typecode.ofwhat, pyclass=unsetsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablesnmpalarm
    def enablesnmpalarm(self, request):
        if isinstance(request, enablesnmpalarm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablesnmpalarmResponse.typecode.ofwhat, pyclass=enablesnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablesnmpalarm
    def disablesnmpalarm(self, request):
        if isinstance(request, disablesnmpalarm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablesnmpalarmResponse.typecode.ofwhat, pyclass=disablesnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpalarm
    def getsnmpalarm(self, request):
        if isinstance(request, getsnmpalarm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpalarmResponse.typecode.ofwhat, pyclass=getsnmpalarmResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmpcommunity
    def addsnmpcommunity(self, request):
        if isinstance(request, addsnmpcommunity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmpcommunityResponse.typecode.ofwhat, pyclass=addsnmpcommunityResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmpcommunity
    def rmsnmpcommunity(self, request):
        if isinstance(request, rmsnmpcommunity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmpcommunityResponse.typecode.ofwhat, pyclass=rmsnmpcommunityResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpcommunity
    def getsnmpcommunity(self, request):
        if isinstance(request, getsnmpcommunity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpcommunityResponse.typecode.ofwhat, pyclass=getsnmpcommunityResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmpmanager
    def addsnmpmanager(self, request):
        if isinstance(request, addsnmpmanager) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmpmanagerResponse.typecode.ofwhat, pyclass=addsnmpmanagerResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmpmanager
    def rmsnmpmanager(self, request):
        if isinstance(request, rmsnmpmanager) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmpmanagerResponse.typecode.ofwhat, pyclass=rmsnmpmanagerResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpmanager
    def getsnmpmanager(self, request):
        if isinstance(request, getsnmpmanager) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpmanagerResponse.typecode.ofwhat, pyclass=getsnmpmanagerResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpmib_contact
    def setsnmpmib_contact(self, request):
        if isinstance(request, setsnmpmib_contact) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpmibResponse.typecode.ofwhat, pyclass=setsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpmib_name
    def setsnmpmib_name(self, request):
        if isinstance(request, setsnmpmib_name) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpmibResponse.typecode.ofwhat, pyclass=setsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpmib_location
    def setsnmpmib_location(self, request):
        if isinstance(request, setsnmpmib_location) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpmibResponse.typecode.ofwhat, pyclass=setsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpmib_customid
    def setsnmpmib_customid(self, request):
        if isinstance(request, setsnmpmib_customid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpmibResponse.typecode.ofwhat, pyclass=setsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpmib_contact
    def unsetsnmpmib_contact(self, request):
        if isinstance(request, unsetsnmpmib_contact) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpmibResponse.typecode.ofwhat, pyclass=unsetsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpmib_name
    def unsetsnmpmib_name(self, request):
        if isinstance(request, unsetsnmpmib_name) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpmibResponse.typecode.ofwhat, pyclass=unsetsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpmib_location
    def unsetsnmpmib_location(self, request):
        if isinstance(request, unsetsnmpmib_location) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpmibResponse.typecode.ofwhat, pyclass=unsetsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpmib_customid
    def unsetsnmpmib_customid(self, request):
        if isinstance(request, unsetsnmpmib_customid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpmibResponse.typecode.ofwhat, pyclass=unsetsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpmib
    def getsnmpmib(self, request):
        if isinstance(request, getsnmpmib) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpmibResponse.typecode.ofwhat, pyclass=getsnmpmibResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmptrap
    def addsnmptrap(self, request):
        if isinstance(request, addsnmptrap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmptrapResponse.typecode.ofwhat, pyclass=addsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmptrap
    def rmsnmptrap(self, request):
        if isinstance(request, rmsnmptrap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmptrapResponse.typecode.ofwhat, pyclass=rmsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmptrap_destport
    def setsnmptrap_destport(self, request):
        if isinstance(request, setsnmptrap_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmptrapResponse.typecode.ofwhat, pyclass=setsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmptrap_version
    def setsnmptrap_version(self, request):
        if isinstance(request, setsnmptrap_version) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmptrapResponse.typecode.ofwhat, pyclass=setsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmptrap_communityname
    def setsnmptrap_communityname(self, request):
        if isinstance(request, setsnmptrap_communityname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmptrapResponse.typecode.ofwhat, pyclass=setsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmptrap_srcip
    def setsnmptrap_srcip(self, request):
        if isinstance(request, setsnmptrap_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmptrapResponse.typecode.ofwhat, pyclass=setsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmptrap_severity
    def setsnmptrap_severity(self, request):
        if isinstance(request, setsnmptrap_severity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmptrapResponse.typecode.ofwhat, pyclass=setsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmptrap_destport
    def unsetsnmptrap_destport(self, request):
        if isinstance(request, unsetsnmptrap_destport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmptrapResponse.typecode.ofwhat, pyclass=unsetsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmptrap_version
    def unsetsnmptrap_version(self, request):
        if isinstance(request, unsetsnmptrap_version) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmptrapResponse.typecode.ofwhat, pyclass=unsetsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmptrap_communityname
    def unsetsnmptrap_communityname(self, request):
        if isinstance(request, unsetsnmptrap_communityname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmptrapResponse.typecode.ofwhat, pyclass=unsetsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmptrap_srcip
    def unsetsnmptrap_srcip(self, request):
        if isinstance(request, unsetsnmptrap_srcip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmptrapResponse.typecode.ofwhat, pyclass=unsetsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmptrap_severity
    def unsetsnmptrap_severity(self, request):
        if isinstance(request, unsetsnmptrap_severity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmptrapResponse.typecode.ofwhat, pyclass=unsetsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmptrap
    def getsnmptrap(self, request):
        if isinstance(request, getsnmptrap) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmptrapResponse.typecode.ofwhat, pyclass=getsnmptrapResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmpgroup
    def addsnmpgroup(self, request):
        if isinstance(request, addsnmpgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmpgroupResponse.typecode.ofwhat, pyclass=addsnmpgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmpgroup
    def rmsnmpgroup(self, request):
        if isinstance(request, rmsnmpgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmpgroupResponse.typecode.ofwhat, pyclass=rmsnmpgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpgroup_readviewname
    def setsnmpgroup_readviewname(self, request):
        if isinstance(request, setsnmpgroup_readviewname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpgroupResponse.typecode.ofwhat, pyclass=setsnmpgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpgroup
    def getsnmpgroup(self, request):
        if isinstance(request, getsnmpgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpgroupResponse.typecode.ofwhat, pyclass=getsnmpgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmpview
    def addsnmpview(self, request):
        if isinstance(request, addsnmpview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmpviewResponse.typecode.ofwhat, pyclass=addsnmpviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmpview
    def rmsnmpview(self, request):
        if isinstance(request, rmsnmpview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmpviewResponse.typecode.ofwhat, pyclass=rmsnmpviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpview_type
    def setsnmpview_type(self, request):
        if isinstance(request, setsnmpview_type) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpviewResponse.typecode.ofwhat, pyclass=setsnmpviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpview
    def getsnmpview(self, request):
        if isinstance(request, getsnmpview) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpviewResponse.typecode.ofwhat, pyclass=getsnmpviewResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsnmpuser
    def addsnmpuser(self, request):
        if isinstance(request, addsnmpuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsnmpuserResponse.typecode.ofwhat, pyclass=addsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsnmpuser
    def rmsnmpuser(self, request):
        if isinstance(request, rmsnmpuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsnmpuserResponse.typecode.ofwhat, pyclass=rmsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpuser_group
    def setsnmpuser_group(self, request):
        if isinstance(request, setsnmpuser_group) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpuserResponse.typecode.ofwhat, pyclass=setsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpuser_authtype
    def setsnmpuser_authtype(self, request):
        if isinstance(request, setsnmpuser_authtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpuserResponse.typecode.ofwhat, pyclass=setsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpuser_privtype
    def setsnmpuser_privtype(self, request):
        if isinstance(request, setsnmpuser_privtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpuserResponse.typecode.ofwhat, pyclass=setsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpuser_authtype
    def unsetsnmpuser_authtype(self, request):
        if isinstance(request, unsetsnmpuser_authtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpuserResponse.typecode.ofwhat, pyclass=unsetsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpuser_privtype
    def unsetsnmpuser_privtype(self, request):
        if isinstance(request, unsetsnmpuser_privtype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpuserResponse.typecode.ofwhat, pyclass=unsetsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpuser_authpasswd
    def unsetsnmpuser_authpasswd(self, request):
        if isinstance(request, unsetsnmpuser_authpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpuserResponse.typecode.ofwhat, pyclass=unsetsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsnmpuser_privpasswd
    def unsetsnmpuser_privpasswd(self, request):
        if isinstance(request, unsetsnmpuser_privpasswd) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsnmpuserResponse.typecode.ofwhat, pyclass=unsetsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpuser
    def getsnmpuser(self, request):
        if isinstance(request, getsnmpuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpuserResponse.typecode.ofwhat, pyclass=getsnmpuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsnmpengineid_engineid
    def setsnmpengineid_engineid(self, request):
        if isinstance(request, setsnmpengineid_engineid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsnmpengineidResponse.typecode.ofwhat, pyclass=setsnmpengineidResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsnmpengineid
    def getsnmpengineid(self, request):
        if isinstance(request, getsnmpengineid) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsnmpengineidResponse.typecode.ofwhat, pyclass=getsnmpengineidResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscparameter_sessionlife
    def setscparameter_sessionlife(self, request):
        if isinstance(request, setscparameter_sessionlife) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscparameterResponse.typecode.ofwhat, pyclass=setscparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscparameter_vsr
    def setscparameter_vsr(self, request):
        if isinstance(request, setscparameter_vsr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscparameterResponse.typecode.ofwhat, pyclass=setscparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetscparameter_sessionlife
    def unsetscparameter_sessionlife(self, request):
        if isinstance(request, unsetscparameter_sessionlife) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetscparameterResponse.typecode.ofwhat, pyclass=unsetscparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetscparameter_vsr
    def unsetscparameter_vsr(self, request):
        if isinstance(request, unsetscparameter_vsr) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetscparameterResponse.typecode.ofwhat, pyclass=unsetscparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getscparameter
    def getscparameter(self, request):
        if isinstance(request, getscparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getscparameterResponse.typecode.ofwhat, pyclass=getscparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addscpolicy
    def addscpolicy(self, request):
        if isinstance(request, addscpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addscpolicyResponse.typecode.ofwhat, pyclass=addscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmscpolicy
    def rmscpolicy(self, request):
        if isinstance(request, rmscpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmscpolicyResponse.typecode.ofwhat, pyclass=rmscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscpolicy_url
    def setscpolicy_url(self, request):
        if isinstance(request, setscpolicy_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscpolicyResponse.typecode.ofwhat, pyclass=setscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscpolicy_rule
    def setscpolicy_rule(self, request):
        if isinstance(request, setscpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscpolicyResponse.typecode.ofwhat, pyclass=setscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscpolicy_delay
    def setscpolicy_delay(self, request):
        if isinstance(request, setscpolicy_delay) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscpolicyResponse.typecode.ofwhat, pyclass=setscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscpolicy_maxconn
    def setscpolicy_maxconn(self, request):
        if isinstance(request, setscpolicy_maxconn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscpolicyResponse.typecode.ofwhat, pyclass=setscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setscpolicy_action
    def setscpolicy_action(self, request):
        if isinstance(request, setscpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setscpolicyResponse.typecode.ofwhat, pyclass=setscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetscpolicy_delay
    def unsetscpolicy_delay(self, request):
        if isinstance(request, unsetscpolicy_delay) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetscpolicyResponse.typecode.ofwhat, pyclass=unsetscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetscpolicy_maxconn
    def unsetscpolicy_maxconn(self, request):
        if isinstance(request, unsetscpolicy_maxconn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetscpolicyResponse.typecode.ofwhat, pyclass=unsetscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getscpolicy
    def getscpolicy(self, request):
        if isinstance(request, getscpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getscpolicyResponse.typecode.ofwhat, pyclass=getscpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: createsslwrapkey
    def createsslwrapkey(self, request):
        if isinstance(request, createsslwrapkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=createsslwrapkeyResponse.typecode.ofwhat, pyclass=createsslwrapkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: createsslfipskey
    def createsslfipskey(self, request):
        if isinstance(request, createsslfipskey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=createsslfipskeyResponse.typecode.ofwhat, pyclass=createsslfipskeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslcertlink
    def getsslcertlink(self, request):
        if isinstance(request, getsslcertlink) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslcertlinkResponse.typecode.ofwhat, pyclass=getsslcertlinkResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcipher_vserver
    def bindsslcipher_vserver(self, request):
        if isinstance(request, bindsslcipher_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcipherResponse.typecode.ofwhat, pyclass=bindsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcipher_service
    def bindsslcipher_service(self, request):
        if isinstance(request, bindsslcipher_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcipherResponse.typecode.ofwhat, pyclass=bindsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcipher_servicegroup
    def bindsslcipher_servicegroup(self, request):
        if isinstance(request, bindsslcipher_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcipherResponse.typecode.ofwhat, pyclass=bindsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslcipher
    def getsslcipher(self, request):
        if isinstance(request, getsslcipher) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslcipherResponse.typecode.ofwhat, pyclass=getsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsslcertkey
    def addsslcertkey(self, request):
        if isinstance(request, addsslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsslcertkeyResponse.typecode.ofwhat, pyclass=addsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslcertkey
    def rmsslcertkey(self, request):
        if isinstance(request, rmsslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslcertkeyResponse.typecode.ofwhat, pyclass=rmsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcertkey_expirymonitor
    def setsslcertkey_expirymonitor(self, request):
        if isinstance(request, setsslcertkey_expirymonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcertkeyResponse.typecode.ofwhat, pyclass=setsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcertkey_expirymonitor
    def unsetsslcertkey_expirymonitor(self, request):
        if isinstance(request, unsetsslcertkey_expirymonitor) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcertkeyResponse.typecode.ofwhat, pyclass=unsetsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcertkey_notificationperiod
    def unsetsslcertkey_notificationperiod(self, request):
        if isinstance(request, unsetsslcertkey_notificationperiod) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcertkeyResponse.typecode.ofwhat, pyclass=unsetsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcertkey_vserver
    def bindsslcertkey_vserver(self, request):
        if isinstance(request, bindsslcertkey_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcertkeyResponse.typecode.ofwhat, pyclass=bindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcertkey_service
    def bindsslcertkey_service(self, request):
        if isinstance(request, bindsslcertkey_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcertkeyResponse.typecode.ofwhat, pyclass=bindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcertkey_servicegroup
    def bindsslcertkey_servicegroup(self, request):
        if isinstance(request, bindsslcertkey_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcertkeyResponse.typecode.ofwhat, pyclass=bindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslcertkey_ca
    def bindsslcertkey_ca(self, request):
        if isinstance(request, bindsslcertkey_ca) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslcertkeyResponse.typecode.ofwhat, pyclass=bindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslcertkey_vserver
    def unbindsslcertkey_vserver(self, request):
        if isinstance(request, unbindsslcertkey_vserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslcertkeyResponse.typecode.ofwhat, pyclass=unbindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslcertkey_service
    def unbindsslcertkey_service(self, request):
        if isinstance(request, unbindsslcertkey_service) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslcertkeyResponse.typecode.ofwhat, pyclass=unbindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslcertkey_servicegroup
    def unbindsslcertkey_servicegroup(self, request):
        if isinstance(request, unbindsslcertkey_servicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslcertkeyResponse.typecode.ofwhat, pyclass=unbindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslcertkey_ca
    def unbindsslcertkey_ca(self, request):
        if isinstance(request, unbindsslcertkey_ca) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslcertkeyResponse.typecode.ofwhat, pyclass=unbindsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: linksslcertkey
    def linksslcertkey(self, request):
        if isinstance(request, linksslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=linksslcertkeyResponse.typecode.ofwhat, pyclass=linksslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unlinksslcertkey
    def unlinksslcertkey(self, request):
        if isinstance(request, unlinksslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unlinksslcertkeyResponse.typecode.ofwhat, pyclass=unlinksslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslcertkey
    def getsslcertkey(self, request):
        if isinstance(request, getsslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslcertkeyResponse.typecode.ofwhat, pyclass=getsslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: updatesslcertkey
    def updatesslcertkey(self, request):
        if isinstance(request, updatesslcertkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=updatesslcertkeyResponse.typecode.ofwhat, pyclass=updatesslcertkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsslcipher
    def addsslcipher(self, request):
        if isinstance(request, addsslcipher) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsslcipherResponse.typecode.ofwhat, pyclass=addsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslcipher
    def rmsslcipher(self, request):
        if isinstance(request, rmsslcipher) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslcipherResponse.typecode.ofwhat, pyclass=rmsslcipherResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslparameter_quantumsize
    def setsslparameter_quantumsize(self, request):
        if isinstance(request, setsslparameter_quantumsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslparameterResponse.typecode.ofwhat, pyclass=setsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslparameter_crlmemorysizemb
    def setsslparameter_crlmemorysizemb(self, request):
        if isinstance(request, setsslparameter_crlmemorysizemb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslparameterResponse.typecode.ofwhat, pyclass=setsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslparameter_strictcachecks
    def setsslparameter_strictcachecks(self, request):
        if isinstance(request, setsslparameter_strictcachecks) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslparameterResponse.typecode.ofwhat, pyclass=setsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslparameter_ssltriggertimeout
    def setsslparameter_ssltriggertimeout(self, request):
        if isinstance(request, setsslparameter_ssltriggertimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslparameterResponse.typecode.ofwhat, pyclass=setsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslparameter_sendclosenotify
    def setsslparameter_sendclosenotify(self, request):
        if isinstance(request, setsslparameter_sendclosenotify) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslparameterResponse.typecode.ofwhat, pyclass=setsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslparameter_quantumsize
    def unsetsslparameter_quantumsize(self, request):
        if isinstance(request, unsetsslparameter_quantumsize) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslparameterResponse.typecode.ofwhat, pyclass=unsetsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslparameter_crlmemorysizemb
    def unsetsslparameter_crlmemorysizemb(self, request):
        if isinstance(request, unsetsslparameter_crlmemorysizemb) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslparameterResponse.typecode.ofwhat, pyclass=unsetsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslparameter_strictcachecks
    def unsetsslparameter_strictcachecks(self, request):
        if isinstance(request, unsetsslparameter_strictcachecks) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslparameterResponse.typecode.ofwhat, pyclass=unsetsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslparameter_ssltriggertimeout
    def unsetsslparameter_ssltriggertimeout(self, request):
        if isinstance(request, unsetsslparameter_ssltriggertimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslparameterResponse.typecode.ofwhat, pyclass=unsetsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslparameter_sendclosenotify
    def unsetsslparameter_sendclosenotify(self, request):
        if isinstance(request, unsetsslparameter_sendclosenotify) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslparameterResponse.typecode.ofwhat, pyclass=unsetsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslparameter
    def getsslparameter(self, request):
        if isinstance(request, getsslparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslparameterResponse.typecode.ofwhat, pyclass=getsslparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsslcrl
    def addsslcrl(self, request):
        if isinstance(request, addsslcrl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsslcrlResponse.typecode.ofwhat, pyclass=addsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslcrl
    def rmsslcrl(self, request):
        if isinstance(request, rmsslcrl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslcrlResponse.typecode.ofwhat, pyclass=rmsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_refresh
    def setsslcrl_refresh(self, request):
        if isinstance(request, setsslcrl_refresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_cacert
    def setsslcrl_cacert(self, request):
        if isinstance(request, setsslcrl_cacert) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_server
    def setsslcrl_server(self, request):
        if isinstance(request, setsslcrl_server) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_method
    def setsslcrl_method(self, request):
        if isinstance(request, setsslcrl_method) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_port
    def setsslcrl_port(self, request):
        if isinstance(request, setsslcrl_port) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_basedn
    def setsslcrl_basedn(self, request):
        if isinstance(request, setsslcrl_basedn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_scope
    def setsslcrl_scope(self, request):
        if isinstance(request, setsslcrl_scope) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_interval
    def setsslcrl_interval(self, request):
        if isinstance(request, setsslcrl_interval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_day
    def setsslcrl_day(self, request):
        if isinstance(request, setsslcrl_day) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_time
    def setsslcrl_time(self, request):
        if isinstance(request, setsslcrl_time) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_binddn
    def setsslcrl_binddn(self, request):
        if isinstance(request, setsslcrl_binddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_password
    def setsslcrl_password(self, request):
        if isinstance(request, setsslcrl_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslcrl_binary
    def setsslcrl_binary(self, request):
        if isinstance(request, setsslcrl_binary) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslcrlResponse.typecode.ofwhat, pyclass=setsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_refresh
    def unsetsslcrl_refresh(self, request):
        if isinstance(request, unsetsslcrl_refresh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_cacert
    def unsetsslcrl_cacert(self, request):
        if isinstance(request, unsetsslcrl_cacert) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_server
    def unsetsslcrl_server(self, request):
        if isinstance(request, unsetsslcrl_server) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_method
    def unsetsslcrl_method(self, request):
        if isinstance(request, unsetsslcrl_method) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_url
    def unsetsslcrl_url(self, request):
        if isinstance(request, unsetsslcrl_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_port
    def unsetsslcrl_port(self, request):
        if isinstance(request, unsetsslcrl_port) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_basedn
    def unsetsslcrl_basedn(self, request):
        if isinstance(request, unsetsslcrl_basedn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_scope
    def unsetsslcrl_scope(self, request):
        if isinstance(request, unsetsslcrl_scope) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_interval
    def unsetsslcrl_interval(self, request):
        if isinstance(request, unsetsslcrl_interval) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_day
    def unsetsslcrl_day(self, request):
        if isinstance(request, unsetsslcrl_day) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_time
    def unsetsslcrl_time(self, request):
        if isinstance(request, unsetsslcrl_time) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_binddn
    def unsetsslcrl_binddn(self, request):
        if isinstance(request, unsetsslcrl_binddn) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_password
    def unsetsslcrl_password(self, request):
        if isinstance(request, unsetsslcrl_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslcrl_binary
    def unsetsslcrl_binary(self, request):
        if isinstance(request, unsetsslcrl_binary) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslcrlResponse.typecode.ofwhat, pyclass=unsetsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslcrl
    def getsslcrl(self, request):
        if isinstance(request, getsslcrl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslcrlResponse.typecode.ofwhat, pyclass=getsslcrlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslfips_inithsm
    def setsslfips_inithsm(self, request):
        if isinstance(request, setsslfips_inithsm) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslfipsResponse.typecode.ofwhat, pyclass=setsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslfips_sopassword
    def setsslfips_sopassword(self, request):
        if isinstance(request, setsslfips_sopassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslfipsResponse.typecode.ofwhat, pyclass=setsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslfips_oldsopassword
    def setsslfips_oldsopassword(self, request):
        if isinstance(request, setsslfips_oldsopassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslfipsResponse.typecode.ofwhat, pyclass=setsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslfips_userpassword
    def setsslfips_userpassword(self, request):
        if isinstance(request, setsslfips_userpassword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslfipsResponse.typecode.ofwhat, pyclass=setsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslfips_hsmlabel
    def setsslfips_hsmlabel(self, request):
        if isinstance(request, setsslfips_hsmlabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslfipsResponse.typecode.ofwhat, pyclass=setsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslfips_hsmlabel
    def unsetsslfips_hsmlabel(self, request):
        if isinstance(request, unsetsslfips_hsmlabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslfipsResponse.typecode.ofwhat, pyclass=unsetsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: resetsslfips
    def resetsslfips(self, request):
        if isinstance(request, resetsslfips) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=resetsslfipsResponse.typecode.ofwhat, pyclass=resetsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslfips
    def getsslfips(self, request):
        if isinstance(request, getsslfips) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslfipsResponse.typecode.ofwhat, pyclass=getsslfipsResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslfipskey
    def rmsslfipskey(self, request):
        if isinstance(request, rmsslfipskey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslfipskeyResponse.typecode.ofwhat, pyclass=rmsslfipskeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslfipskey
    def getsslfipskey(self, request):
        if isinstance(request, getsslfipskey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslfipskeyResponse.typecode.ofwhat, pyclass=getsslfipskeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: importsslfipskey
    def importsslfipskey(self, request):
        if isinstance(request, importsslfipskey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=importsslfipskeyResponse.typecode.ofwhat, pyclass=importsslfipskeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: exportsslfipskey
    def exportsslfipskey(self, request):
        if isinstance(request, exportsslfipskey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=exportsslfipskeyResponse.typecode.ofwhat, pyclass=exportsslfipskeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_dh
    def setsslservice_dh(self, request):
        if isinstance(request, setsslservice_dh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_dhcount
    def setsslservice_dhcount(self, request):
        if isinstance(request, setsslservice_dhcount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_ersa
    def setsslservice_ersa(self, request):
        if isinstance(request, setsslservice_ersa) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_sessreuse
    def setsslservice_sessreuse(self, request):
        if isinstance(request, setsslservice_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_cipherredirect
    def setsslservice_cipherredirect(self, request):
        if isinstance(request, setsslservice_cipherredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_sslv2redirect
    def setsslservice_sslv2redirect(self, request):
        if isinstance(request, setsslservice_sslv2redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_clientauth
    def setsslservice_clientauth(self, request):
        if isinstance(request, setsslservice_clientauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_sslredirect
    def setsslservice_sslredirect(self, request):
        if isinstance(request, setsslservice_sslredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_redirectportrewrite
    def setsslservice_redirectportrewrite(self, request):
        if isinstance(request, setsslservice_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_nonfipsciphers
    def setsslservice_nonfipsciphers(self, request):
        if isinstance(request, setsslservice_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_ssl2
    def setsslservice_ssl2(self, request):
        if isinstance(request, setsslservice_ssl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_ssl3
    def setsslservice_ssl3(self, request):
        if isinstance(request, setsslservice_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_tls1
    def setsslservice_tls1(self, request):
        if isinstance(request, setsslservice_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservice_serverauth
    def setsslservice_serverauth(self, request):
        if isinstance(request, setsslservice_serverauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslserviceResponse.typecode.ofwhat, pyclass=setsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_dh
    def unsetsslservice_dh(self, request):
        if isinstance(request, unsetsslservice_dh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_dhfile
    def unsetsslservice_dhfile(self, request):
        if isinstance(request, unsetsslservice_dhfile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_dhcount
    def unsetsslservice_dhcount(self, request):
        if isinstance(request, unsetsslservice_dhcount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_ersa
    def unsetsslservice_ersa(self, request):
        if isinstance(request, unsetsslservice_ersa) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_ersacount
    def unsetsslservice_ersacount(self, request):
        if isinstance(request, unsetsslservice_ersacount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_sessreuse
    def unsetsslservice_sessreuse(self, request):
        if isinstance(request, unsetsslservice_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_sesstimeout
    def unsetsslservice_sesstimeout(self, request):
        if isinstance(request, unsetsslservice_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_cipherredirect
    def unsetsslservice_cipherredirect(self, request):
        if isinstance(request, unsetsslservice_cipherredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_cipherurl
    def unsetsslservice_cipherurl(self, request):
        if isinstance(request, unsetsslservice_cipherurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_sslv2redirect
    def unsetsslservice_sslv2redirect(self, request):
        if isinstance(request, unsetsslservice_sslv2redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_sslv2url
    def unsetsslservice_sslv2url(self, request):
        if isinstance(request, unsetsslservice_sslv2url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_clientauth
    def unsetsslservice_clientauth(self, request):
        if isinstance(request, unsetsslservice_clientauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_clientcert
    def unsetsslservice_clientcert(self, request):
        if isinstance(request, unsetsslservice_clientcert) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_sslredirect
    def unsetsslservice_sslredirect(self, request):
        if isinstance(request, unsetsslservice_sslredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_redirectportrewrite
    def unsetsslservice_redirectportrewrite(self, request):
        if isinstance(request, unsetsslservice_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_nonfipsciphers
    def unsetsslservice_nonfipsciphers(self, request):
        if isinstance(request, unsetsslservice_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_ssl2
    def unsetsslservice_ssl2(self, request):
        if isinstance(request, unsetsslservice_ssl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_ssl3
    def unsetsslservice_ssl3(self, request):
        if isinstance(request, unsetsslservice_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_tls1
    def unsetsslservice_tls1(self, request):
        if isinstance(request, unsetsslservice_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservice_serverauth
    def unsetsslservice_serverauth(self, request):
        if isinstance(request, unsetsslservice_serverauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslserviceResponse.typecode.ofwhat, pyclass=unsetsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslservice_policyname
    def bindsslservice_policyname(self, request):
        if isinstance(request, bindsslservice_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslserviceResponse.typecode.ofwhat, pyclass=bindsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslservice_certkeyname
    def bindsslservice_certkeyname(self, request):
        if isinstance(request, bindsslservice_certkeyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslserviceResponse.typecode.ofwhat, pyclass=bindsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslservice_policyname
    def unbindsslservice_policyname(self, request):
        if isinstance(request, unbindsslservice_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslserviceResponse.typecode.ofwhat, pyclass=unbindsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslservice_certkeyname
    def unbindsslservice_certkeyname(self, request):
        if isinstance(request, unbindsslservice_certkeyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslserviceResponse.typecode.ofwhat, pyclass=unbindsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslservice
    def getsslservice(self, request):
        if isinstance(request, getsslservice) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslserviceResponse.typecode.ofwhat, pyclass=getsslserviceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservicegroup_sessreuse
    def setsslservicegroup_sessreuse(self, request):
        if isinstance(request, setsslservicegroup_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslservicegroupResponse.typecode.ofwhat, pyclass=setsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservicegroup_nonfipsciphers
    def setsslservicegroup_nonfipsciphers(self, request):
        if isinstance(request, setsslservicegroup_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslservicegroupResponse.typecode.ofwhat, pyclass=setsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservicegroup_ssl3
    def setsslservicegroup_ssl3(self, request):
        if isinstance(request, setsslservicegroup_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslservicegroupResponse.typecode.ofwhat, pyclass=setsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservicegroup_tls1
    def setsslservicegroup_tls1(self, request):
        if isinstance(request, setsslservicegroup_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslservicegroupResponse.typecode.ofwhat, pyclass=setsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslservicegroup_serverauth
    def setsslservicegroup_serverauth(self, request):
        if isinstance(request, setsslservicegroup_serverauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslservicegroupResponse.typecode.ofwhat, pyclass=setsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_sessreuse
    def unsetsslservicegroup_sessreuse(self, request):
        if isinstance(request, unsetsslservicegroup_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_sesstimeout
    def unsetsslservicegroup_sesstimeout(self, request):
        if isinstance(request, unsetsslservicegroup_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_nonfipsciphers
    def unsetsslservicegroup_nonfipsciphers(self, request):
        if isinstance(request, unsetsslservicegroup_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_ssl3
    def unsetsslservicegroup_ssl3(self, request):
        if isinstance(request, unsetsslservicegroup_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_tls1
    def unsetsslservicegroup_tls1(self, request):
        if isinstance(request, unsetsslservicegroup_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslservicegroup_serverauth
    def unsetsslservicegroup_serverauth(self, request):
        if isinstance(request, unsetsslservicegroup_serverauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslservicegroupResponse.typecode.ofwhat, pyclass=unsetsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslservicegroup
    def getsslservicegroup(self, request):
        if isinstance(request, getsslservicegroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslservicegroupResponse.typecode.ofwhat, pyclass=getsslservicegroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_cleartextport
    def setsslvserver_cleartextport(self, request):
        if isinstance(request, setsslvserver_cleartextport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_dh
    def setsslvserver_dh(self, request):
        if isinstance(request, setsslvserver_dh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_dhcount
    def setsslvserver_dhcount(self, request):
        if isinstance(request, setsslvserver_dhcount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_ersa
    def setsslvserver_ersa(self, request):
        if isinstance(request, setsslvserver_ersa) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_sessreuse
    def setsslvserver_sessreuse(self, request):
        if isinstance(request, setsslvserver_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_cipherredirect
    def setsslvserver_cipherredirect(self, request):
        if isinstance(request, setsslvserver_cipherredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_sslv2redirect
    def setsslvserver_sslv2redirect(self, request):
        if isinstance(request, setsslvserver_sslv2redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_clientauth
    def setsslvserver_clientauth(self, request):
        if isinstance(request, setsslvserver_clientauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_sslredirect
    def setsslvserver_sslredirect(self, request):
        if isinstance(request, setsslvserver_sslredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_redirectportrewrite
    def setsslvserver_redirectportrewrite(self, request):
        if isinstance(request, setsslvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_nonfipsciphers
    def setsslvserver_nonfipsciphers(self, request):
        if isinstance(request, setsslvserver_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_ssl2
    def setsslvserver_ssl2(self, request):
        if isinstance(request, setsslvserver_ssl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_ssl3
    def setsslvserver_ssl3(self, request):
        if isinstance(request, setsslvserver_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsslvserver_tls1
    def setsslvserver_tls1(self, request):
        if isinstance(request, setsslvserver_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsslvserverResponse.typecode.ofwhat, pyclass=setsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_cleartextport
    def unsetsslvserver_cleartextport(self, request):
        if isinstance(request, unsetsslvserver_cleartextport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_dh
    def unsetsslvserver_dh(self, request):
        if isinstance(request, unsetsslvserver_dh) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_dhfile
    def unsetsslvserver_dhfile(self, request):
        if isinstance(request, unsetsslvserver_dhfile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_dhcount
    def unsetsslvserver_dhcount(self, request):
        if isinstance(request, unsetsslvserver_dhcount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_ersa
    def unsetsslvserver_ersa(self, request):
        if isinstance(request, unsetsslvserver_ersa) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_ersacount
    def unsetsslvserver_ersacount(self, request):
        if isinstance(request, unsetsslvserver_ersacount) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_sessreuse
    def unsetsslvserver_sessreuse(self, request):
        if isinstance(request, unsetsslvserver_sessreuse) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_sesstimeout
    def unsetsslvserver_sesstimeout(self, request):
        if isinstance(request, unsetsslvserver_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_cipherredirect
    def unsetsslvserver_cipherredirect(self, request):
        if isinstance(request, unsetsslvserver_cipherredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_cipherurl
    def unsetsslvserver_cipherurl(self, request):
        if isinstance(request, unsetsslvserver_cipherurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_sslv2redirect
    def unsetsslvserver_sslv2redirect(self, request):
        if isinstance(request, unsetsslvserver_sslv2redirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_sslv2url
    def unsetsslvserver_sslv2url(self, request):
        if isinstance(request, unsetsslvserver_sslv2url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_clientauth
    def unsetsslvserver_clientauth(self, request):
        if isinstance(request, unsetsslvserver_clientauth) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_clientcert
    def unsetsslvserver_clientcert(self, request):
        if isinstance(request, unsetsslvserver_clientcert) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_sslredirect
    def unsetsslvserver_sslredirect(self, request):
        if isinstance(request, unsetsslvserver_sslredirect) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_redirectportrewrite
    def unsetsslvserver_redirectportrewrite(self, request):
        if isinstance(request, unsetsslvserver_redirectportrewrite) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_nonfipsciphers
    def unsetsslvserver_nonfipsciphers(self, request):
        if isinstance(request, unsetsslvserver_nonfipsciphers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_ssl2
    def unsetsslvserver_ssl2(self, request):
        if isinstance(request, unsetsslvserver_ssl2) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_ssl3
    def unsetsslvserver_ssl3(self, request):
        if isinstance(request, unsetsslvserver_ssl3) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetsslvserver_tls1
    def unsetsslvserver_tls1(self, request):
        if isinstance(request, unsetsslvserver_tls1) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetsslvserverResponse.typecode.ofwhat, pyclass=unsetsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslvserver_policyname
    def bindsslvserver_policyname(self, request):
        if isinstance(request, bindsslvserver_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslvserverResponse.typecode.ofwhat, pyclass=bindsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslvserver_certkeyname
    def bindsslvserver_certkeyname(self, request):
        if isinstance(request, bindsslvserver_certkeyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslvserverResponse.typecode.ofwhat, pyclass=bindsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslvserver_policyname
    def unbindsslvserver_policyname(self, request):
        if isinstance(request, unbindsslvserver_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslvserverResponse.typecode.ofwhat, pyclass=unbindsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslvserver_certkeyname
    def unbindsslvserver_certkeyname(self, request):
        if isinstance(request, unbindsslvserver_certkeyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslvserverResponse.typecode.ofwhat, pyclass=unbindsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslvserver
    def getsslvserver(self, request):
        if isinstance(request, getsslvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslvserverResponse.typecode.ofwhat, pyclass=getsslvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslwrapkey
    def rmsslwrapkey(self, request):
        if isinstance(request, rmsslwrapkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslwrapkeyResponse.typecode.ofwhat, pyclass=rmsslwrapkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslwrapkey
    def getsslwrapkey(self, request):
        if isinstance(request, getsslwrapkey) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslwrapkeyResponse.typecode.ofwhat, pyclass=getsslwrapkeyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablesslfipssimtarget
    def enablesslfipssimtarget(self, request):
        if isinstance(request, enablesslfipssimtarget) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablesslfipssimtargetResponse.typecode.ofwhat, pyclass=enablesslfipssimtargetResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: initsslfipssimtarget
    def initsslfipssimtarget(self, request):
        if isinstance(request, initsslfipssimtarget) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=initsslfipssimtargetResponse.typecode.ofwhat, pyclass=initsslfipssimtargetResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablesslfipssimsource
    def enablesslfipssimsource(self, request):
        if isinstance(request, enablesslfipssimsource) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablesslfipssimsourceResponse.typecode.ofwhat, pyclass=enablesslfipssimsourceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: initsslfipssimsource
    def initsslfipssimsource(self, request):
        if isinstance(request, initsslfipssimsource) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=initsslfipssimsourceResponse.typecode.ofwhat, pyclass=initsslfipssimsourceResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsslaction
    def addsslaction(self, request):
        if isinstance(request, addsslaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsslactionResponse.typecode.ofwhat, pyclass=addsslactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslaction
    def rmsslaction(self, request):
        if isinstance(request, rmsslaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslactionResponse.typecode.ofwhat, pyclass=rmsslactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslaction
    def getsslaction(self, request):
        if isinstance(request, getsslaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslactionResponse.typecode.ofwhat, pyclass=getsslactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsslpolicy
    def addsslpolicy(self, request):
        if isinstance(request, addsslpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsslpolicyResponse.typecode.ofwhat, pyclass=addsslpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsslpolicy
    def rmsslpolicy(self, request):
        if isinstance(request, rmsslpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsslpolicyResponse.typecode.ofwhat, pyclass=rmsslpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslpolicy
    def getsslpolicy(self, request):
        if isinstance(request, getsslpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslpolicyResponse.typecode.ofwhat, pyclass=getsslpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsslglobal_policyname
    def bindsslglobal_policyname(self, request):
        if isinstance(request, bindsslglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsslglobalResponse.typecode.ofwhat, pyclass=bindsslglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsslglobal_policyname
    def unbindsslglobal_policyname(self, request):
        if isinstance(request, unbindsslglobal_policyname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsslglobalResponse.typecode.ofwhat, pyclass=unbindsslglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsslglobal
    def getsslglobal(self, request):
        if isinstance(request, getsslglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsslglobalResponse.typecode.ofwhat, pyclass=getsslglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsystemsession
    def getsystemsession(self, request):
        if isinstance(request, getsystemsession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsystemsessionResponse.typecode.ofwhat, pyclass=getsystemsessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: killsystemsession
    def killsystemsession(self, request):
        if isinstance(request, killsystemsession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=killsystemsessionResponse.typecode.ofwhat, pyclass=killsystemsessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsystemcmdpolicy
    def addsystemcmdpolicy(self, request):
        if isinstance(request, addsystemcmdpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsystemcmdpolicyResponse.typecode.ofwhat, pyclass=addsystemcmdpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsystemcmdpolicy
    def rmsystemcmdpolicy(self, request):
        if isinstance(request, rmsystemcmdpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsystemcmdpolicyResponse.typecode.ofwhat, pyclass=rmsystemcmdpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsystemcmdpolicy_action
    def setsystemcmdpolicy_action(self, request):
        if isinstance(request, setsystemcmdpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsystemcmdpolicyResponse.typecode.ofwhat, pyclass=setsystemcmdpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsystemcmdpolicy_cmdspec
    def setsystemcmdpolicy_cmdspec(self, request):
        if isinstance(request, setsystemcmdpolicy_cmdspec) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsystemcmdpolicyResponse.typecode.ofwhat, pyclass=setsystemcmdpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsystemcmdpolicy
    def getsystemcmdpolicy(self, request):
        if isinstance(request, getsystemcmdpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsystemcmdpolicyResponse.typecode.ofwhat, pyclass=getsystemcmdpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsystemuser
    def addsystemuser(self, request):
        if isinstance(request, addsystemuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsystemuserResponse.typecode.ofwhat, pyclass=addsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsystemuser
    def rmsystemuser(self, request):
        if isinstance(request, rmsystemuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsystemuserResponse.typecode.ofwhat, pyclass=rmsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setsystemuser_password
    def setsystemuser_password(self, request):
        if isinstance(request, setsystemuser_password) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setsystemuserResponse.typecode.ofwhat, pyclass=setsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsystemuser_policy
    def bindsystemuser_policy(self, request):
        if isinstance(request, bindsystemuser_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsystemuserResponse.typecode.ofwhat, pyclass=bindsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsystemuser_policy
    def unbindsystemuser_policy(self, request):
        if isinstance(request, unbindsystemuser_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsystemuserResponse.typecode.ofwhat, pyclass=unbindsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsystemuser
    def getsystemuser(self, request):
        if isinstance(request, getsystemuser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsystemuserResponse.typecode.ofwhat, pyclass=getsystemuserResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addsystemgroup
    def addsystemgroup(self, request):
        if isinstance(request, addsystemgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addsystemgroupResponse.typecode.ofwhat, pyclass=addsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmsystemgroup
    def rmsystemgroup(self, request):
        if isinstance(request, rmsystemgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmsystemgroupResponse.typecode.ofwhat, pyclass=rmsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsystemgroup_user
    def bindsystemgroup_user(self, request):
        if isinstance(request, bindsystemgroup_user) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsystemgroupResponse.typecode.ofwhat, pyclass=bindsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsystemgroup_policy
    def bindsystemgroup_policy(self, request):
        if isinstance(request, bindsystemgroup_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsystemgroupResponse.typecode.ofwhat, pyclass=bindsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsystemgroup_user
    def unbindsystemgroup_user(self, request):
        if isinstance(request, unbindsystemgroup_user) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsystemgroupResponse.typecode.ofwhat, pyclass=unbindsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsystemgroup_policy
    def unbindsystemgroup_policy(self, request):
        if isinstance(request, unbindsystemgroup_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsystemgroupResponse.typecode.ofwhat, pyclass=unbindsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsystemgroup
    def getsystemgroup(self, request):
        if isinstance(request, getsystemgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsystemgroupResponse.typecode.ofwhat, pyclass=getsystemgroupResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindsystemglobal_policy
    def bindsystemglobal_policy(self, request):
        if isinstance(request, bindsystemglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindsystemglobalResponse.typecode.ofwhat, pyclass=bindsystemglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindsystemglobal_policy
    def unbindsystemglobal_policy(self, request):
        if isinstance(request, unbindsystemglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindsystemglobalResponse.typecode.ofwhat, pyclass=unbindsystemglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getsystemglobal
    def getsystemglobal(self, request):
        if isinstance(request, getsystemglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getsystemglobalResponse.typecode.ofwhat, pyclass=getsystemglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addtunneltrafficpolicy
    def addtunneltrafficpolicy(self, request):
        if isinstance(request, addtunneltrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addtunneltrafficpolicyResponse.typecode.ofwhat, pyclass=addtunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmtunneltrafficpolicy
    def rmtunneltrafficpolicy(self, request):
        if isinstance(request, rmtunneltrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmtunneltrafficpolicyResponse.typecode.ofwhat, pyclass=rmtunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: settunneltrafficpolicy_rule
    def settunneltrafficpolicy_rule(self, request):
        if isinstance(request, settunneltrafficpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=settunneltrafficpolicyResponse.typecode.ofwhat, pyclass=settunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: settunneltrafficpolicy_action
    def settunneltrafficpolicy_action(self, request):
        if isinstance(request, settunneltrafficpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=settunneltrafficpolicyResponse.typecode.ofwhat, pyclass=settunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsettunneltrafficpolicy_rule
    def unsettunneltrafficpolicy_rule(self, request):
        if isinstance(request, unsettunneltrafficpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsettunneltrafficpolicyResponse.typecode.ofwhat, pyclass=unsettunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsettunneltrafficpolicy_action
    def unsettunneltrafficpolicy_action(self, request):
        if isinstance(request, unsettunneltrafficpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsettunneltrafficpolicyResponse.typecode.ofwhat, pyclass=unsettunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: gettunneltrafficpolicy
    def gettunneltrafficpolicy(self, request):
        if isinstance(request, gettunneltrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=gettunneltrafficpolicyResponse.typecode.ofwhat, pyclass=gettunneltrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindtunnelglobal_policy
    def bindtunnelglobal_policy(self, request):
        if isinstance(request, bindtunnelglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindtunnelglobalResponse.typecode.ofwhat, pyclass=bindtunnelglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindtunnelglobal_policy
    def unbindtunnelglobal_policy(self, request):
        if isinstance(request, unbindtunnelglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindtunnelglobalResponse.typecode.ofwhat, pyclass=unbindtunnelglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: gettunnelglobal
    def gettunnelglobal(self, request):
        if isinstance(request, gettunnelglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=gettunnelglobalResponse.typecode.ofwhat, pyclass=gettunnelglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: install
    def install(self, request):
        if isinstance(request, install) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=installResponse.typecode.ofwhat, pyclass=installResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: gettechsupport
    def gettechsupport(self, request):
        if isinstance(request, gettechsupport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=gettechsupportResponse.typecode.ofwhat, pyclass=gettechsupportResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnvserver
    def addvpnvserver(self, request):
        if isinstance(request, addvpnvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnvserverResponse.typecode.ofwhat, pyclass=addvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnvserver
    def rmvpnvserver(self, request):
        if isinstance(request, rmvpnvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnvserverResponse.typecode.ofwhat, pyclass=rmvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnvserver_ipaddress
    def setvpnvserver_ipaddress(self, request):
        if isinstance(request, setvpnvserver_ipaddress) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnvserverResponse.typecode.ofwhat, pyclass=setvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnvserver_authentication
    def setvpnvserver_authentication(self, request):
        if isinstance(request, setvpnvserver_authentication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnvserverResponse.typecode.ofwhat, pyclass=setvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnvserver_maxaaausers
    def setvpnvserver_maxaaausers(self, request):
        if isinstance(request, setvpnvserver_maxaaausers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnvserverResponse.typecode.ofwhat, pyclass=setvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnvserver_downstateflush
    def setvpnvserver_downstateflush(self, request):
        if isinstance(request, setvpnvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnvserverResponse.typecode.ofwhat, pyclass=setvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnvserver_authentication
    def unsetvpnvserver_authentication(self, request):
        if isinstance(request, unsetvpnvserver_authentication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnvserverResponse.typecode.ofwhat, pyclass=unsetvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnvserver_maxaaausers
    def unsetvpnvserver_maxaaausers(self, request):
        if isinstance(request, unsetvpnvserver_maxaaausers) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnvserverResponse.typecode.ofwhat, pyclass=unsetvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnvserver_downstateflush
    def unsetvpnvserver_downstateflush(self, request):
        if isinstance(request, unsetvpnvserver_downstateflush) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnvserverResponse.typecode.ofwhat, pyclass=unsetvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_policy
    def bindvpnvserver_policy(self, request):
        if isinstance(request, bindvpnvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_intranetapplication
    def bindvpnvserver_intranetapplication(self, request):
        if isinstance(request, bindvpnvserver_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_nexthopserver
    def bindvpnvserver_nexthopserver(self, request):
        if isinstance(request, bindvpnvserver_nexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_url
    def bindvpnvserver_url(self, request):
        if isinstance(request, bindvpnvserver_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_intranetip
    def bindvpnvserver_intranetip(self, request):
        if isinstance(request, bindvpnvserver_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnvserver_staserver
    def bindvpnvserver_staserver(self, request):
        if isinstance(request, bindvpnvserver_staserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnvserverResponse.typecode.ofwhat, pyclass=bindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_policy
    def unbindvpnvserver_policy(self, request):
        if isinstance(request, unbindvpnvserver_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_intranetapplication
    def unbindvpnvserver_intranetapplication(self, request):
        if isinstance(request, unbindvpnvserver_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_nexthopserver
    def unbindvpnvserver_nexthopserver(self, request):
        if isinstance(request, unbindvpnvserver_nexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_url
    def unbindvpnvserver_url(self, request):
        if isinstance(request, unbindvpnvserver_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_intranetip
    def unbindvpnvserver_intranetip(self, request):
        if isinstance(request, unbindvpnvserver_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnvserver_staserver
    def unbindvpnvserver_staserver(self, request):
        if isinstance(request, unbindvpnvserver_staserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnvserverResponse.typecode.ofwhat, pyclass=unbindvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: enablevpnvserver
    def enablevpnvserver(self, request):
        if isinstance(request, enablevpnvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=enablevpnvserverResponse.typecode.ofwhat, pyclass=enablevpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: disablevpnvserver
    def disablevpnvserver(self, request):
        if isinstance(request, disablevpnvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=disablevpnvserverResponse.typecode.ofwhat, pyclass=disablevpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnvserver
    def getvpnvserver(self, request):
        if isinstance(request, getvpnvserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnvserverResponse.typecode.ofwhat, pyclass=getvpnvserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnintranetapplication
    def addvpnintranetapplication(self, request):
        if isinstance(request, addvpnintranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnintranetapplicationResponse.typecode.ofwhat, pyclass=addvpnintranetapplicationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnintranetapplication
    def rmvpnintranetapplication(self, request):
        if isinstance(request, rmvpnintranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnintranetapplicationResponse.typecode.ofwhat, pyclass=rmvpnintranetapplicationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnintranetapplication
    def getvpnintranetapplication(self, request):
        if isinstance(request, getvpnintranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnintranetapplicationResponse.typecode.ofwhat, pyclass=getvpnintranetapplicationResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnnexthopserver
    def addvpnnexthopserver(self, request):
        if isinstance(request, addvpnnexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnnexthopserverResponse.typecode.ofwhat, pyclass=addvpnnexthopserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnnexthopserver
    def rmvpnnexthopserver(self, request):
        if isinstance(request, rmvpnnexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnnexthopserverResponse.typecode.ofwhat, pyclass=rmvpnnexthopserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnnexthopserver
    def getvpnnexthopserver(self, request):
        if isinstance(request, getvpnnexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnnexthopserverResponse.typecode.ofwhat, pyclass=getvpnnexthopserverResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnicaconnection
    def getvpnicaconnection(self, request):
        if isinstance(request, getvpnicaconnection) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnicaconnectionResponse.typecode.ofwhat, pyclass=getvpnicaconnectionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_policy
    def bindvpnglobal_policy(self, request):
        if isinstance(request, bindvpnglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_intranetdomain
    def bindvpnglobal_intranetdomain(self, request):
        if isinstance(request, bindvpnglobal_intranetdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_intranetapplication
    def bindvpnglobal_intranetapplication(self, request):
        if isinstance(request, bindvpnglobal_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_nexthopserver
    def bindvpnglobal_nexthopserver(self, request):
        if isinstance(request, bindvpnglobal_nexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_url
    def bindvpnglobal_url(self, request):
        if isinstance(request, bindvpnglobal_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_intranetip
    def bindvpnglobal_intranetip(self, request):
        if isinstance(request, bindvpnglobal_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: bindvpnglobal_staserver
    def bindvpnglobal_staserver(self, request):
        if isinstance(request, bindvpnglobal_staserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=bindvpnglobalResponse.typecode.ofwhat, pyclass=bindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_policy
    def unbindvpnglobal_policy(self, request):
        if isinstance(request, unbindvpnglobal_policy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_intranetdomain
    def unbindvpnglobal_intranetdomain(self, request):
        if isinstance(request, unbindvpnglobal_intranetdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_intranetapplication
    def unbindvpnglobal_intranetapplication(self, request):
        if isinstance(request, unbindvpnglobal_intranetapplication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_nexthopserver
    def unbindvpnglobal_nexthopserver(self, request):
        if isinstance(request, unbindvpnglobal_nexthopserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_url
    def unbindvpnglobal_url(self, request):
        if isinstance(request, unbindvpnglobal_url) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_intranetip
    def unbindvpnglobal_intranetip(self, request):
        if isinstance(request, unbindvpnglobal_intranetip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unbindvpnglobal_staserver
    def unbindvpnglobal_staserver(self, request):
        if isinstance(request, unbindvpnglobal_staserver) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unbindvpnglobalResponse.typecode.ofwhat, pyclass=unbindvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnglobal
    def getvpnglobal(self, request):
        if isinstance(request, getvpnglobal) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnglobalResponse.typecode.ofwhat, pyclass=getvpnglobalResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpntrafficpolicy
    def addvpntrafficpolicy(self, request):
        if isinstance(request, addvpntrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpntrafficpolicyResponse.typecode.ofwhat, pyclass=addvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpntrafficpolicy
    def rmvpntrafficpolicy(self, request):
        if isinstance(request, rmvpntrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpntrafficpolicyResponse.typecode.ofwhat, pyclass=rmvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpntrafficpolicy_rule
    def setvpntrafficpolicy_rule(self, request):
        if isinstance(request, setvpntrafficpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpntrafficpolicyResponse.typecode.ofwhat, pyclass=setvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpntrafficpolicy_action
    def setvpntrafficpolicy_action(self, request):
        if isinstance(request, setvpntrafficpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpntrafficpolicyResponse.typecode.ofwhat, pyclass=setvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpntrafficpolicy_rule
    def unsetvpntrafficpolicy_rule(self, request):
        if isinstance(request, unsetvpntrafficpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpntrafficpolicyResponse.typecode.ofwhat, pyclass=unsetvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpntrafficpolicy_action
    def unsetvpntrafficpolicy_action(self, request):
        if isinstance(request, unsetvpntrafficpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpntrafficpolicyResponse.typecode.ofwhat, pyclass=unsetvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpntrafficpolicy
    def getvpntrafficpolicy(self, request):
        if isinstance(request, getvpntrafficpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpntrafficpolicyResponse.typecode.ofwhat, pyclass=getvpntrafficpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpntrafficaction
    def addvpntrafficaction(self, request):
        if isinstance(request, addvpntrafficaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpntrafficactionResponse.typecode.ofwhat, pyclass=addvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpntrafficaction
    def rmvpntrafficaction(self, request):
        if isinstance(request, rmvpntrafficaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpntrafficactionResponse.typecode.ofwhat, pyclass=rmvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpntrafficaction_apptimeout
    def setvpntrafficaction_apptimeout(self, request):
        if isinstance(request, setvpntrafficaction_apptimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpntrafficactionResponse.typecode.ofwhat, pyclass=setvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpntrafficaction_sso
    def setvpntrafficaction_sso(self, request):
        if isinstance(request, setvpntrafficaction_sso) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpntrafficactionResponse.typecode.ofwhat, pyclass=setvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpntrafficaction_fta
    def setvpntrafficaction_fta(self, request):
        if isinstance(request, setvpntrafficaction_fta) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpntrafficactionResponse.typecode.ofwhat, pyclass=setvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpntrafficaction
    def getvpntrafficaction(self, request):
        if isinstance(request, getvpntrafficaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpntrafficactionResponse.typecode.ofwhat, pyclass=getvpntrafficactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnurl
    def addvpnurl(self, request):
        if isinstance(request, addvpnurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnurlResponse.typecode.ofwhat, pyclass=addvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnurl
    def rmvpnurl(self, request):
        if isinstance(request, rmvpnurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnurlResponse.typecode.ofwhat, pyclass=rmvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnurl_linkname
    def setvpnurl_linkname(self, request):
        if isinstance(request, setvpnurl_linkname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnurlResponse.typecode.ofwhat, pyclass=setvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnurl_actualurl
    def setvpnurl_actualurl(self, request):
        if isinstance(request, setvpnurl_actualurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnurlResponse.typecode.ofwhat, pyclass=setvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnurl_clientlessaccess
    def setvpnurl_clientlessaccess(self, request):
        if isinstance(request, setvpnurl_clientlessaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnurlResponse.typecode.ofwhat, pyclass=setvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnurl_clientlessaccess
    def unsetvpnurl_clientlessaccess(self, request):
        if isinstance(request, unsetvpnurl_clientlessaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnurlResponse.typecode.ofwhat, pyclass=unsetvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnurl
    def getvpnurl(self, request):
        if isinstance(request, getvpnurl) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnurlResponse.typecode.ofwhat, pyclass=getvpnurlResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnsessionpolicy
    def addvpnsessionpolicy(self, request):
        if isinstance(request, addvpnsessionpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnsessionpolicyResponse.typecode.ofwhat, pyclass=addvpnsessionpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnsessionpolicy
    def rmvpnsessionpolicy(self, request):
        if isinstance(request, rmvpnsessionpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnsessionpolicyResponse.typecode.ofwhat, pyclass=rmvpnsessionpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionpolicy_rule
    def setvpnsessionpolicy_rule(self, request):
        if isinstance(request, setvpnsessionpolicy_rule) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionpolicyResponse.typecode.ofwhat, pyclass=setvpnsessionpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionpolicy_action
    def setvpnsessionpolicy_action(self, request):
        if isinstance(request, setvpnsessionpolicy_action) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionpolicyResponse.typecode.ofwhat, pyclass=setvpnsessionpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnsessionpolicy
    def getvpnsessionpolicy(self, request):
        if isinstance(request, getvpnsessionpolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnsessionpolicyResponse.typecode.ofwhat, pyclass=getvpnsessionpolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnsessionaction
    def addvpnsessionaction(self, request):
        if isinstance(request, addvpnsessionaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnsessionactionResponse.typecode.ofwhat, pyclass=addvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnsessionaction
    def rmvpnsessionaction(self, request):
        if isinstance(request, rmvpnsessionaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnsessionactionResponse.typecode.ofwhat, pyclass=rmvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_httpport
    def setvpnsessionaction_httpport(self, request):
        if isinstance(request, setvpnsessionaction_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_winsip
    def setvpnsessionaction_winsip(self, request):
        if isinstance(request, setvpnsessionaction_winsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_dnsvservername
    def setvpnsessionaction_dnsvservername(self, request):
        if isinstance(request, setvpnsessionaction_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_splitdns
    def setvpnsessionaction_splitdns(self, request):
        if isinstance(request, setvpnsessionaction_splitdns) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_sesstimeout
    def setvpnsessionaction_sesstimeout(self, request):
        if isinstance(request, setvpnsessionaction_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientsecurity
    def setvpnsessionaction_clientsecurity(self, request):
        if isinstance(request, setvpnsessionaction_clientsecurity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientsecuritylog
    def setvpnsessionaction_clientsecuritylog(self, request):
        if isinstance(request, setvpnsessionaction_clientsecuritylog) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_splittunnel
    def setvpnsessionaction_splittunnel(self, request):
        if isinstance(request, setvpnsessionaction_splittunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_locallanaccess
    def setvpnsessionaction_locallanaccess(self, request):
        if isinstance(request, setvpnsessionaction_locallanaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_rfc1918
    def setvpnsessionaction_rfc1918(self, request):
        if isinstance(request, setvpnsessionaction_rfc1918) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_spoofiip
    def setvpnsessionaction_spoofiip(self, request):
        if isinstance(request, setvpnsessionaction_spoofiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_killconnections
    def setvpnsessionaction_killconnections(self, request):
        if isinstance(request, setvpnsessionaction_killconnections) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_transparentinterception
    def setvpnsessionaction_transparentinterception(self, request):
        if isinstance(request, setvpnsessionaction_transparentinterception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_windowsclienttype
    def setvpnsessionaction_windowsclienttype(self, request):
        if isinstance(request, setvpnsessionaction_windowsclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_defaultauthorizationaction
    def setvpnsessionaction_defaultauthorizationaction(self, request):
        if isinstance(request, setvpnsessionaction_defaultauthorizationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_authorizationgroup
    def setvpnsessionaction_authorizationgroup(self, request):
        if isinstance(request, setvpnsessionaction_authorizationgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientidletimeout
    def setvpnsessionaction_clientidletimeout(self, request):
        if isinstance(request, setvpnsessionaction_clientidletimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_proxy
    def setvpnsessionaction_proxy(self, request):
        if isinstance(request, setvpnsessionaction_proxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_allprotocolproxy
    def setvpnsessionaction_allprotocolproxy(self, request):
        if isinstance(request, setvpnsessionaction_allprotocolproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_httpproxy
    def setvpnsessionaction_httpproxy(self, request):
        if isinstance(request, setvpnsessionaction_httpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_ftpproxy
    def setvpnsessionaction_ftpproxy(self, request):
        if isinstance(request, setvpnsessionaction_ftpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_socksproxy
    def setvpnsessionaction_socksproxy(self, request):
        if isinstance(request, setvpnsessionaction_socksproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_gopherproxy
    def setvpnsessionaction_gopherproxy(self, request):
        if isinstance(request, setvpnsessionaction_gopherproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_sslproxy
    def setvpnsessionaction_sslproxy(self, request):
        if isinstance(request, setvpnsessionaction_sslproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_proxyexception
    def setvpnsessionaction_proxyexception(self, request):
        if isinstance(request, setvpnsessionaction_proxyexception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_proxylocalbypass
    def setvpnsessionaction_proxylocalbypass(self, request):
        if isinstance(request, setvpnsessionaction_proxylocalbypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientcleanupprompt
    def setvpnsessionaction_clientcleanupprompt(self, request):
        if isinstance(request, setvpnsessionaction_clientcleanupprompt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_forcecleanup
    def setvpnsessionaction_forcecleanup(self, request):
        if isinstance(request, setvpnsessionaction_forcecleanup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientoptions
    def setvpnsessionaction_clientoptions(self, request):
        if isinstance(request, setvpnsessionaction_clientoptions) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientconfiguration
    def setvpnsessionaction_clientconfiguration(self, request):
        if isinstance(request, setvpnsessionaction_clientconfiguration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_sso
    def setvpnsessionaction_sso(self, request):
        if isinstance(request, setvpnsessionaction_sso) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_ssocredential
    def setvpnsessionaction_ssocredential(self, request):
        if isinstance(request, setvpnsessionaction_ssocredential) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_windowsautologon
    def setvpnsessionaction_windowsautologon(self, request):
        if isinstance(request, setvpnsessionaction_windowsautologon) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_usemip
    def setvpnsessionaction_usemip(self, request):
        if isinstance(request, setvpnsessionaction_usemip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_useiip
    def setvpnsessionaction_useiip(self, request):
        if isinstance(request, setvpnsessionaction_useiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientdebug
    def setvpnsessionaction_clientdebug(self, request):
        if isinstance(request, setvpnsessionaction_clientdebug) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_loginscript
    def setvpnsessionaction_loginscript(self, request):
        if isinstance(request, setvpnsessionaction_loginscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_logoutscript
    def setvpnsessionaction_logoutscript(self, request):
        if isinstance(request, setvpnsessionaction_logoutscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_homepage
    def setvpnsessionaction_homepage(self, request):
        if isinstance(request, setvpnsessionaction_homepage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_icaproxy
    def setvpnsessionaction_icaproxy(self, request):
        if isinstance(request, setvpnsessionaction_icaproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_wihome
    def setvpnsessionaction_wihome(self, request):
        if isinstance(request, setvpnsessionaction_wihome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_wiportalmode
    def setvpnsessionaction_wiportalmode(self, request):
        if isinstance(request, setvpnsessionaction_wiportalmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientchoices
    def setvpnsessionaction_clientchoices(self, request):
        if isinstance(request, setvpnsessionaction_clientchoices) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_epaclienttype
    def setvpnsessionaction_epaclienttype(self, request):
        if isinstance(request, setvpnsessionaction_epaclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_iipdnssuffix
    def setvpnsessionaction_iipdnssuffix(self, request):
        if isinstance(request, setvpnsessionaction_iipdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_forcedtimeout
    def setvpnsessionaction_forcedtimeout(self, request):
        if isinstance(request, setvpnsessionaction_forcedtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_forcedtimeoutwarning
    def setvpnsessionaction_forcedtimeoutwarning(self, request):
        if isinstance(request, setvpnsessionaction_forcedtimeoutwarning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_ntdomain
    def setvpnsessionaction_ntdomain(self, request):
        if isinstance(request, setvpnsessionaction_ntdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientlessvpnmode
    def setvpnsessionaction_clientlessvpnmode(self, request):
        if isinstance(request, setvpnsessionaction_clientlessvpnmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_emailhome
    def setvpnsessionaction_emailhome(self, request):
        if isinstance(request, setvpnsessionaction_emailhome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnsessionaction_clientlessmodeurlencoding
    def setvpnsessionaction_clientlessmodeurlencoding(self, request):
        if isinstance(request, setvpnsessionaction_clientlessmodeurlencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnsessionactionResponse.typecode.ofwhat, pyclass=setvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_httpport
    def unsetvpnsessionaction_httpport(self, request):
        if isinstance(request, unsetvpnsessionaction_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_winsip
    def unsetvpnsessionaction_winsip(self, request):
        if isinstance(request, unsetvpnsessionaction_winsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_dnsvservername
    def unsetvpnsessionaction_dnsvservername(self, request):
        if isinstance(request, unsetvpnsessionaction_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_splitdns
    def unsetvpnsessionaction_splitdns(self, request):
        if isinstance(request, unsetvpnsessionaction_splitdns) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_sesstimeout
    def unsetvpnsessionaction_sesstimeout(self, request):
        if isinstance(request, unsetvpnsessionaction_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientsecurity
    def unsetvpnsessionaction_clientsecurity(self, request):
        if isinstance(request, unsetvpnsessionaction_clientsecurity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientsecuritygroup
    def unsetvpnsessionaction_clientsecuritygroup(self, request):
        if isinstance(request, unsetvpnsessionaction_clientsecuritygroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientsecuritymessage
    def unsetvpnsessionaction_clientsecuritymessage(self, request):
        if isinstance(request, unsetvpnsessionaction_clientsecuritymessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientsecuritylog
    def unsetvpnsessionaction_clientsecuritylog(self, request):
        if isinstance(request, unsetvpnsessionaction_clientsecuritylog) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_splittunnel
    def unsetvpnsessionaction_splittunnel(self, request):
        if isinstance(request, unsetvpnsessionaction_splittunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_locallanaccess
    def unsetvpnsessionaction_locallanaccess(self, request):
        if isinstance(request, unsetvpnsessionaction_locallanaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_rfc1918
    def unsetvpnsessionaction_rfc1918(self, request):
        if isinstance(request, unsetvpnsessionaction_rfc1918) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_spoofiip
    def unsetvpnsessionaction_spoofiip(self, request):
        if isinstance(request, unsetvpnsessionaction_spoofiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_killconnections
    def unsetvpnsessionaction_killconnections(self, request):
        if isinstance(request, unsetvpnsessionaction_killconnections) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_transparentinterception
    def unsetvpnsessionaction_transparentinterception(self, request):
        if isinstance(request, unsetvpnsessionaction_transparentinterception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_windowsclienttype
    def unsetvpnsessionaction_windowsclienttype(self, request):
        if isinstance(request, unsetvpnsessionaction_windowsclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_defaultauthorizationaction
    def unsetvpnsessionaction_defaultauthorizationaction(self, request):
        if isinstance(request, unsetvpnsessionaction_defaultauthorizationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_authorizationgroup
    def unsetvpnsessionaction_authorizationgroup(self, request):
        if isinstance(request, unsetvpnsessionaction_authorizationgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientidletimeout
    def unsetvpnsessionaction_clientidletimeout(self, request):
        if isinstance(request, unsetvpnsessionaction_clientidletimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_proxy
    def unsetvpnsessionaction_proxy(self, request):
        if isinstance(request, unsetvpnsessionaction_proxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_allprotocolproxy
    def unsetvpnsessionaction_allprotocolproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_allprotocolproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_httpproxy
    def unsetvpnsessionaction_httpproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_httpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_ftpproxy
    def unsetvpnsessionaction_ftpproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_ftpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_socksproxy
    def unsetvpnsessionaction_socksproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_socksproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_gopherproxy
    def unsetvpnsessionaction_gopherproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_gopherproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_sslproxy
    def unsetvpnsessionaction_sslproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_sslproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_proxyexception
    def unsetvpnsessionaction_proxyexception(self, request):
        if isinstance(request, unsetvpnsessionaction_proxyexception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_proxylocalbypass
    def unsetvpnsessionaction_proxylocalbypass(self, request):
        if isinstance(request, unsetvpnsessionaction_proxylocalbypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientcleanupprompt
    def unsetvpnsessionaction_clientcleanupprompt(self, request):
        if isinstance(request, unsetvpnsessionaction_clientcleanupprompt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_forcecleanup
    def unsetvpnsessionaction_forcecleanup(self, request):
        if isinstance(request, unsetvpnsessionaction_forcecleanup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientoptions
    def unsetvpnsessionaction_clientoptions(self, request):
        if isinstance(request, unsetvpnsessionaction_clientoptions) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientconfiguration
    def unsetvpnsessionaction_clientconfiguration(self, request):
        if isinstance(request, unsetvpnsessionaction_clientconfiguration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_sso
    def unsetvpnsessionaction_sso(self, request):
        if isinstance(request, unsetvpnsessionaction_sso) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_ssocredential
    def unsetvpnsessionaction_ssocredential(self, request):
        if isinstance(request, unsetvpnsessionaction_ssocredential) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_windowsautologon
    def unsetvpnsessionaction_windowsautologon(self, request):
        if isinstance(request, unsetvpnsessionaction_windowsautologon) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_usemip
    def unsetvpnsessionaction_usemip(self, request):
        if isinstance(request, unsetvpnsessionaction_usemip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_useiip
    def unsetvpnsessionaction_useiip(self, request):
        if isinstance(request, unsetvpnsessionaction_useiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientdebug
    def unsetvpnsessionaction_clientdebug(self, request):
        if isinstance(request, unsetvpnsessionaction_clientdebug) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_loginscript
    def unsetvpnsessionaction_loginscript(self, request):
        if isinstance(request, unsetvpnsessionaction_loginscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_logoutscript
    def unsetvpnsessionaction_logoutscript(self, request):
        if isinstance(request, unsetvpnsessionaction_logoutscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_homepage
    def unsetvpnsessionaction_homepage(self, request):
        if isinstance(request, unsetvpnsessionaction_homepage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_icaproxy
    def unsetvpnsessionaction_icaproxy(self, request):
        if isinstance(request, unsetvpnsessionaction_icaproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_wihome
    def unsetvpnsessionaction_wihome(self, request):
        if isinstance(request, unsetvpnsessionaction_wihome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_wiportalmode
    def unsetvpnsessionaction_wiportalmode(self, request):
        if isinstance(request, unsetvpnsessionaction_wiportalmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientchoices
    def unsetvpnsessionaction_clientchoices(self, request):
        if isinstance(request, unsetvpnsessionaction_clientchoices) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_epaclienttype
    def unsetvpnsessionaction_epaclienttype(self, request):
        if isinstance(request, unsetvpnsessionaction_epaclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_iipdnssuffix
    def unsetvpnsessionaction_iipdnssuffix(self, request):
        if isinstance(request, unsetvpnsessionaction_iipdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_forcedtimeout
    def unsetvpnsessionaction_forcedtimeout(self, request):
        if isinstance(request, unsetvpnsessionaction_forcedtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_forcedtimeoutwarning
    def unsetvpnsessionaction_forcedtimeoutwarning(self, request):
        if isinstance(request, unsetvpnsessionaction_forcedtimeoutwarning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_ntdomain
    def unsetvpnsessionaction_ntdomain(self, request):
        if isinstance(request, unsetvpnsessionaction_ntdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientlessvpnmode
    def unsetvpnsessionaction_clientlessvpnmode(self, request):
        if isinstance(request, unsetvpnsessionaction_clientlessvpnmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_emailhome
    def unsetvpnsessionaction_emailhome(self, request):
        if isinstance(request, unsetvpnsessionaction_emailhome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnsessionaction_clientlessmodeurlencoding
    def unsetvpnsessionaction_clientlessmodeurlencoding(self, request):
        if isinstance(request, unsetvpnsessionaction_clientlessmodeurlencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnsessionactionResponse.typecode.ofwhat, pyclass=unsetvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnsessionaction
    def getvpnsessionaction(self, request):
        if isinstance(request, getvpnsessionaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnsessionactionResponse.typecode.ofwhat, pyclass=getvpnsessionactionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_httpport
    def setvpnparameter_httpport(self, request):
        if isinstance(request, setvpnparameter_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_winsip
    def setvpnparameter_winsip(self, request):
        if isinstance(request, setvpnparameter_winsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_dnsvservername
    def setvpnparameter_dnsvservername(self, request):
        if isinstance(request, setvpnparameter_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_splitdns
    def setvpnparameter_splitdns(self, request):
        if isinstance(request, setvpnparameter_splitdns) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_sesstimeout
    def setvpnparameter_sesstimeout(self, request):
        if isinstance(request, setvpnparameter_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientsecurity
    def setvpnparameter_clientsecurity(self, request):
        if isinstance(request, setvpnparameter_clientsecurity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientsecuritylog
    def setvpnparameter_clientsecuritylog(self, request):
        if isinstance(request, setvpnparameter_clientsecuritylog) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_splittunnel
    def setvpnparameter_splittunnel(self, request):
        if isinstance(request, setvpnparameter_splittunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_locallanaccess
    def setvpnparameter_locallanaccess(self, request):
        if isinstance(request, setvpnparameter_locallanaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_rfc1918
    def setvpnparameter_rfc1918(self, request):
        if isinstance(request, setvpnparameter_rfc1918) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_spoofiip
    def setvpnparameter_spoofiip(self, request):
        if isinstance(request, setvpnparameter_spoofiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_killconnections
    def setvpnparameter_killconnections(self, request):
        if isinstance(request, setvpnparameter_killconnections) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_transparentinterception
    def setvpnparameter_transparentinterception(self, request):
        if isinstance(request, setvpnparameter_transparentinterception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_windowsclienttype
    def setvpnparameter_windowsclienttype(self, request):
        if isinstance(request, setvpnparameter_windowsclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_defaultauthorizationaction
    def setvpnparameter_defaultauthorizationaction(self, request):
        if isinstance(request, setvpnparameter_defaultauthorizationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_authorizationgroup
    def setvpnparameter_authorizationgroup(self, request):
        if isinstance(request, setvpnparameter_authorizationgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientidletimeout
    def setvpnparameter_clientidletimeout(self, request):
        if isinstance(request, setvpnparameter_clientidletimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_proxy
    def setvpnparameter_proxy(self, request):
        if isinstance(request, setvpnparameter_proxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_allprotocolproxy
    def setvpnparameter_allprotocolproxy(self, request):
        if isinstance(request, setvpnparameter_allprotocolproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_httpproxy
    def setvpnparameter_httpproxy(self, request):
        if isinstance(request, setvpnparameter_httpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_ftpproxy
    def setvpnparameter_ftpproxy(self, request):
        if isinstance(request, setvpnparameter_ftpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_socksproxy
    def setvpnparameter_socksproxy(self, request):
        if isinstance(request, setvpnparameter_socksproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_gopherproxy
    def setvpnparameter_gopherproxy(self, request):
        if isinstance(request, setvpnparameter_gopherproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_sslproxy
    def setvpnparameter_sslproxy(self, request):
        if isinstance(request, setvpnparameter_sslproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_proxyexception
    def setvpnparameter_proxyexception(self, request):
        if isinstance(request, setvpnparameter_proxyexception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_proxylocalbypass
    def setvpnparameter_proxylocalbypass(self, request):
        if isinstance(request, setvpnparameter_proxylocalbypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientcleanupprompt
    def setvpnparameter_clientcleanupprompt(self, request):
        if isinstance(request, setvpnparameter_clientcleanupprompt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_forcecleanup
    def setvpnparameter_forcecleanup(self, request):
        if isinstance(request, setvpnparameter_forcecleanup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientoptions
    def setvpnparameter_clientoptions(self, request):
        if isinstance(request, setvpnparameter_clientoptions) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientconfiguration
    def setvpnparameter_clientconfiguration(self, request):
        if isinstance(request, setvpnparameter_clientconfiguration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_sso
    def setvpnparameter_sso(self, request):
        if isinstance(request, setvpnparameter_sso) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_ssocredential
    def setvpnparameter_ssocredential(self, request):
        if isinstance(request, setvpnparameter_ssocredential) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_windowsautologon
    def setvpnparameter_windowsautologon(self, request):
        if isinstance(request, setvpnparameter_windowsautologon) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_usemip
    def setvpnparameter_usemip(self, request):
        if isinstance(request, setvpnparameter_usemip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_useiip
    def setvpnparameter_useiip(self, request):
        if isinstance(request, setvpnparameter_useiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientdebug
    def setvpnparameter_clientdebug(self, request):
        if isinstance(request, setvpnparameter_clientdebug) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_loginscript
    def setvpnparameter_loginscript(self, request):
        if isinstance(request, setvpnparameter_loginscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_logoutscript
    def setvpnparameter_logoutscript(self, request):
        if isinstance(request, setvpnparameter_logoutscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_homepage
    def setvpnparameter_homepage(self, request):
        if isinstance(request, setvpnparameter_homepage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_icaproxy
    def setvpnparameter_icaproxy(self, request):
        if isinstance(request, setvpnparameter_icaproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_wihome
    def setvpnparameter_wihome(self, request):
        if isinstance(request, setvpnparameter_wihome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_wiportalmode
    def setvpnparameter_wiportalmode(self, request):
        if isinstance(request, setvpnparameter_wiportalmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientchoices
    def setvpnparameter_clientchoices(self, request):
        if isinstance(request, setvpnparameter_clientchoices) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_epaclienttype
    def setvpnparameter_epaclienttype(self, request):
        if isinstance(request, setvpnparameter_epaclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_iipdnssuffix
    def setvpnparameter_iipdnssuffix(self, request):
        if isinstance(request, setvpnparameter_iipdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_forcedtimeout
    def setvpnparameter_forcedtimeout(self, request):
        if isinstance(request, setvpnparameter_forcedtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_forcedtimeoutwarning
    def setvpnparameter_forcedtimeoutwarning(self, request):
        if isinstance(request, setvpnparameter_forcedtimeoutwarning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_ntdomain
    def setvpnparameter_ntdomain(self, request):
        if isinstance(request, setvpnparameter_ntdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientlessvpnmode
    def setvpnparameter_clientlessvpnmode(self, request):
        if isinstance(request, setvpnparameter_clientlessvpnmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_clientlessmodeurlencoding
    def setvpnparameter_clientlessmodeurlencoding(self, request):
        if isinstance(request, setvpnparameter_clientlessmodeurlencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnparameter_emailhome
    def setvpnparameter_emailhome(self, request):
        if isinstance(request, setvpnparameter_emailhome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnparameterResponse.typecode.ofwhat, pyclass=setvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_httpport
    def unsetvpnparameter_httpport(self, request):
        if isinstance(request, unsetvpnparameter_httpport) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_winsip
    def unsetvpnparameter_winsip(self, request):
        if isinstance(request, unsetvpnparameter_winsip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_dnsvservername
    def unsetvpnparameter_dnsvservername(self, request):
        if isinstance(request, unsetvpnparameter_dnsvservername) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_splitdns
    def unsetvpnparameter_splitdns(self, request):
        if isinstance(request, unsetvpnparameter_splitdns) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_sesstimeout
    def unsetvpnparameter_sesstimeout(self, request):
        if isinstance(request, unsetvpnparameter_sesstimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientsecurity
    def unsetvpnparameter_clientsecurity(self, request):
        if isinstance(request, unsetvpnparameter_clientsecurity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientsecuritygroup
    def unsetvpnparameter_clientsecuritygroup(self, request):
        if isinstance(request, unsetvpnparameter_clientsecuritygroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientsecuritymessage
    def unsetvpnparameter_clientsecuritymessage(self, request):
        if isinstance(request, unsetvpnparameter_clientsecuritymessage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientsecuritylog
    def unsetvpnparameter_clientsecuritylog(self, request):
        if isinstance(request, unsetvpnparameter_clientsecuritylog) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_authorizationgroup
    def unsetvpnparameter_authorizationgroup(self, request):
        if isinstance(request, unsetvpnparameter_authorizationgroup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientidletimeout
    def unsetvpnparameter_clientidletimeout(self, request):
        if isinstance(request, unsetvpnparameter_clientidletimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_allprotocolproxy
    def unsetvpnparameter_allprotocolproxy(self, request):
        if isinstance(request, unsetvpnparameter_allprotocolproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_httpproxy
    def unsetvpnparameter_httpproxy(self, request):
        if isinstance(request, unsetvpnparameter_httpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_ftpproxy
    def unsetvpnparameter_ftpproxy(self, request):
        if isinstance(request, unsetvpnparameter_ftpproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_socksproxy
    def unsetvpnparameter_socksproxy(self, request):
        if isinstance(request, unsetvpnparameter_socksproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_gopherproxy
    def unsetvpnparameter_gopherproxy(self, request):
        if isinstance(request, unsetvpnparameter_gopherproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_sslproxy
    def unsetvpnparameter_sslproxy(self, request):
        if isinstance(request, unsetvpnparameter_sslproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_proxyexception
    def unsetvpnparameter_proxyexception(self, request):
        if isinstance(request, unsetvpnparameter_proxyexception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_forcecleanup
    def unsetvpnparameter_forcecleanup(self, request):
        if isinstance(request, unsetvpnparameter_forcecleanup) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientoptions
    def unsetvpnparameter_clientoptions(self, request):
        if isinstance(request, unsetvpnparameter_clientoptions) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientconfiguration
    def unsetvpnparameter_clientconfiguration(self, request):
        if isinstance(request, unsetvpnparameter_clientconfiguration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_loginscript
    def unsetvpnparameter_loginscript(self, request):
        if isinstance(request, unsetvpnparameter_loginscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_logoutscript
    def unsetvpnparameter_logoutscript(self, request):
        if isinstance(request, unsetvpnparameter_logoutscript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_homepage
    def unsetvpnparameter_homepage(self, request):
        if isinstance(request, unsetvpnparameter_homepage) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_wihome
    def unsetvpnparameter_wihome(self, request):
        if isinstance(request, unsetvpnparameter_wihome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_wiportalmode
    def unsetvpnparameter_wiportalmode(self, request):
        if isinstance(request, unsetvpnparameter_wiportalmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_iipdnssuffix
    def unsetvpnparameter_iipdnssuffix(self, request):
        if isinstance(request, unsetvpnparameter_iipdnssuffix) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_forcedtimeout
    def unsetvpnparameter_forcedtimeout(self, request):
        if isinstance(request, unsetvpnparameter_forcedtimeout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_forcedtimeoutwarning
    def unsetvpnparameter_forcedtimeoutwarning(self, request):
        if isinstance(request, unsetvpnparameter_forcedtimeoutwarning) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_ntdomain
    def unsetvpnparameter_ntdomain(self, request):
        if isinstance(request, unsetvpnparameter_ntdomain) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientlessvpnmode
    def unsetvpnparameter_clientlessvpnmode(self, request):
        if isinstance(request, unsetvpnparameter_clientlessvpnmode) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_emailhome
    def unsetvpnparameter_emailhome(self, request):
        if isinstance(request, unsetvpnparameter_emailhome) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientlessmodeurlencoding
    def unsetvpnparameter_clientlessmodeurlencoding(self, request):
        if isinstance(request, unsetvpnparameter_clientlessmodeurlencoding) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_splittunnel
    def unsetvpnparameter_splittunnel(self, request):
        if isinstance(request, unsetvpnparameter_splittunnel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_locallanaccess
    def unsetvpnparameter_locallanaccess(self, request):
        if isinstance(request, unsetvpnparameter_locallanaccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_rfc1918
    def unsetvpnparameter_rfc1918(self, request):
        if isinstance(request, unsetvpnparameter_rfc1918) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_spoofiip
    def unsetvpnparameter_spoofiip(self, request):
        if isinstance(request, unsetvpnparameter_spoofiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_killconnections
    def unsetvpnparameter_killconnections(self, request):
        if isinstance(request, unsetvpnparameter_killconnections) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_transparentinterception
    def unsetvpnparameter_transparentinterception(self, request):
        if isinstance(request, unsetvpnparameter_transparentinterception) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_windowsclienttype
    def unsetvpnparameter_windowsclienttype(self, request):
        if isinstance(request, unsetvpnparameter_windowsclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_defaultauthorizationaction
    def unsetvpnparameter_defaultauthorizationaction(self, request):
        if isinstance(request, unsetvpnparameter_defaultauthorizationaction) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_proxy
    def unsetvpnparameter_proxy(self, request):
        if isinstance(request, unsetvpnparameter_proxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_proxylocalbypass
    def unsetvpnparameter_proxylocalbypass(self, request):
        if isinstance(request, unsetvpnparameter_proxylocalbypass) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientcleanupprompt
    def unsetvpnparameter_clientcleanupprompt(self, request):
        if isinstance(request, unsetvpnparameter_clientcleanupprompt) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_sso
    def unsetvpnparameter_sso(self, request):
        if isinstance(request, unsetvpnparameter_sso) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_ssocredential
    def unsetvpnparameter_ssocredential(self, request):
        if isinstance(request, unsetvpnparameter_ssocredential) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_windowsautologon
    def unsetvpnparameter_windowsautologon(self, request):
        if isinstance(request, unsetvpnparameter_windowsautologon) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_usemip
    def unsetvpnparameter_usemip(self, request):
        if isinstance(request, unsetvpnparameter_usemip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_useiip
    def unsetvpnparameter_useiip(self, request):
        if isinstance(request, unsetvpnparameter_useiip) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientdebug
    def unsetvpnparameter_clientdebug(self, request):
        if isinstance(request, unsetvpnparameter_clientdebug) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_icaproxy
    def unsetvpnparameter_icaproxy(self, request):
        if isinstance(request, unsetvpnparameter_icaproxy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_clientchoices
    def unsetvpnparameter_clientchoices(self, request):
        if isinstance(request, unsetvpnparameter_clientchoices) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnparameter_epaclienttype
    def unsetvpnparameter_epaclienttype(self, request):
        if isinstance(request, unsetvpnparameter_epaclienttype) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnparameterResponse.typecode.ofwhat, pyclass=unsetvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnparameter
    def getvpnparameter(self, request):
        if isinstance(request, getvpnparameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnparameterResponse.typecode.ofwhat, pyclass=getvpnparameterResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnclientlessaccesspolicy
    def addvpnclientlessaccesspolicy(self, request):
        if isinstance(request, addvpnclientlessaccesspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnclientlessaccesspolicyResponse.typecode.ofwhat, pyclass=addvpnclientlessaccesspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnclientlessaccesspolicy
    def rmvpnclientlessaccesspolicy(self, request):
        if isinstance(request, rmvpnclientlessaccesspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnclientlessaccesspolicyResponse.typecode.ofwhat, pyclass=rmvpnclientlessaccesspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnclientlessaccesspolicy
    def getvpnclientlessaccesspolicy(self, request):
        if isinstance(request, getvpnclientlessaccesspolicy) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnclientlessaccesspolicyResponse.typecode.ofwhat, pyclass=getvpnclientlessaccesspolicyResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: addvpnclientlessaccessprofile
    def addvpnclientlessaccessprofile(self, request):
        if isinstance(request, addvpnclientlessaccessprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=addvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=addvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: rmvpnclientlessaccessprofile
    def rmvpnclientlessaccessprofile(self, request):
        if isinstance(request, rmvpnclientlessaccessprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=rmvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=rmvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_urlrewritepolicylabel
    def setvpnclientlessaccessprofile_urlrewritepolicylabel(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_urlrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_javascriptrewritepolicylabel
    def setvpnclientlessaccessprofile_javascriptrewritepolicylabel(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_javascriptrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_reqhdrrewritepolicylabel
    def setvpnclientlessaccessprofile_reqhdrrewritepolicylabel(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_reqhdrrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_reshdrrewritepolicylabel
    def setvpnclientlessaccessprofile_reshdrrewritepolicylabel(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_reshdrrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_regexforfindingurlinjavascript
    def setvpnclientlessaccessprofile_regexforfindingurlinjavascript(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_regexforfindingurlinjavascript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_regexforfindingurlincss
    def setvpnclientlessaccessprofile_regexforfindingurlincss(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_regexforfindingurlincss) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_regexforfindingurlinxcomponent
    def setvpnclientlessaccessprofile_regexforfindingurlinxcomponent(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_regexforfindingurlinxcomponent) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_regexforfindingurlinxml
    def setvpnclientlessaccessprofile_regexforfindingurlinxml(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_regexforfindingurlinxml) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: setvpnclientlessaccessprofile_clientconsumedcookies
    def setvpnclientlessaccessprofile_clientconsumedcookies(self, request):
        if isinstance(request, setvpnclientlessaccessprofile_clientconsumedcookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=setvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=setvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_urlrewritepolicylabel
    def unsetvpnclientlessaccessprofile_urlrewritepolicylabel(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_urlrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel
    def unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel
    def unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel
    def unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript
    def unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_regexforfindingurlincss
    def unsetvpnclientlessaccessprofile_regexforfindingurlincss(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_regexforfindingurlincss) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent
    def unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_regexforfindingurlinxml
    def unsetvpnclientlessaccessprofile_regexforfindingurlinxml(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_regexforfindingurlinxml) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: unsetvpnclientlessaccessprofile_clientconsumedcookies
    def unsetvpnclientlessaccessprofile_clientconsumedcookies(self, request):
        if isinstance(request, unsetvpnclientlessaccessprofile_clientconsumedcookies) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=unsetvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=unsetvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: getvpnclientlessaccessprofile
    def getvpnclientlessaccessprofile(self, request):
        if isinstance(request, getvpnclientlessaccessprofile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:NSConfigAction", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=getvpnclientlessaccessprofileResponse.typecode.ofwhat, pyclass=getvpnclientlessaccessprofileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

class restartdbsmonitors:
    def __init__(self):
        return
restartdbsmonitors.typecode = Struct(pname=("urn:NSConfig","restartdbsmonitors"), ofwhat=[], pyclass=restartdbsmonitors, encoded="urn:NSConfig")

class restartdbsmonitorsResponse:
    def __init__(self):
        self._return = None
        return
restartdbsmonitorsResponse.typecode = Struct(pname=("urn:NSConfig","restartdbsmonitorsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=restartdbsmonitorsResponse, encoded="urn:NSConfig")

class clearlocationdata:
    def __init__(self):
        return
clearlocationdata.typecode = Struct(pname=("urn:NSConfig","clearlocationdata"), ofwhat=[], pyclass=clearlocationdata, encoded="urn:NSConfig")

class clearlocationdataResponse:
    def __init__(self):
        self._return = None
        return
clearlocationdataResponse.typecode = Struct(pname=("urn:NSConfig","clearlocationdataResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearlocationdataResponse, encoded="urn:NSConfig")

class addlocation:
    def __init__(self):
        self._ipfrom = None
        self._ipto = None
        self._preferredlocation = None
        return
addlocation.typecode = Struct(pname=("urn:NSConfig","addlocation"), ofwhat=[ZSI.TC.String(pname="ipfrom", aname="_ipfrom", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipto", aname="_ipto", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlocation, encoded="urn:NSConfig")

class addlocationResponse:
    def __init__(self):
        self._return = None
        return
addlocationResponse.typecode = Struct(pname=("urn:NSConfig","addlocationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlocationResponse, encoded="urn:NSConfig")

class rmlocation:
    def __init__(self):
        self._ipfrom = None
        self._ipto = None
        return
rmlocation.typecode = Struct(pname=("urn:NSConfig","rmlocation"), ofwhat=[ZSI.TC.String(pname="ipfrom", aname="_ipfrom", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipto", aname="_ipto", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlocation, encoded="urn:NSConfig")

class rmlocationResponse:
    def __init__(self):
        self._return = None
        return
rmlocationResponse.typecode = Struct(pname=("urn:NSConfig","rmlocationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlocationResponse, encoded="urn:NSConfig")

class getlocation:
    def __init__(self):
        self._ipfrom = None
        return
getlocation.typecode = Struct(pname=("urn:NSConfig","getlocation"), ofwhat=[ZSI.TC.String(pname="ipfrom", aname="_ipfrom", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlocation, encoded="urn:NSConfig")

class getlocationResponse:
    def __init__(self):
        self._return = None
        return
getlocationResponse.typecode = Struct(pname=("urn:NSConfig","getlocationResponse"), ofwhat=[ns0.getlocationResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlocationResponse, encoded="urn:NSConfig")

class setlocationparameter_context:
    def __init__(self):
        self._context = None
        return
setlocationparameter_context.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_context"), ofwhat=[ns0.proximitycontextEnum_Def(pname="context", aname="_context", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_context, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_contextResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q1label:
    def __init__(self):
        self._q1label = None
        return
setlocationparameter_q1label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q1label"), ofwhat=[ZSI.TC.String(pname="q1label", aname="_q1label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q1label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q1labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q2label:
    def __init__(self):
        self._q2label = None
        return
setlocationparameter_q2label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q2label"), ofwhat=[ZSI.TC.String(pname="q2label", aname="_q2label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q2label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q2labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q3label:
    def __init__(self):
        self._q3label = None
        return
setlocationparameter_q3label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q3label"), ofwhat=[ZSI.TC.String(pname="q3label", aname="_q3label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q3label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q3labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q4label:
    def __init__(self):
        self._q4label = None
        return
setlocationparameter_q4label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q4label"), ofwhat=[ZSI.TC.String(pname="q4label", aname="_q4label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q4label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q4labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q5label:
    def __init__(self):
        self._q5label = None
        return
setlocationparameter_q5label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q5label"), ofwhat=[ZSI.TC.String(pname="q5label", aname="_q5label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q5label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q5labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class setlocationparameter_q6label:
    def __init__(self):
        self._q6label = None
        return
setlocationparameter_q6label.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q6label"), ofwhat=[ZSI.TC.String(pname="q6label", aname="_q6label", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameter_q6label, encoded="urn:NSConfig")

class setlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
setlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setlocationparameter_q6labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_context:
    def __init__(self):
        return
unsetlocationparameter_context.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_context"), ofwhat=[], pyclass=unsetlocationparameter_context, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_contextResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q1label:
    def __init__(self):
        return
unsetlocationparameter_q1label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q1label"), ofwhat=[], pyclass=unsetlocationparameter_q1label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q1labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q2label:
    def __init__(self):
        return
unsetlocationparameter_q2label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q2label"), ofwhat=[], pyclass=unsetlocationparameter_q2label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q2labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q3label:
    def __init__(self):
        return
unsetlocationparameter_q3label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q3label"), ofwhat=[], pyclass=unsetlocationparameter_q3label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q3labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q4label:
    def __init__(self):
        return
unsetlocationparameter_q4label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q4label"), ofwhat=[], pyclass=unsetlocationparameter_q4label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q4labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q5label:
    def __init__(self):
        return
unsetlocationparameter_q5label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q5label"), ofwhat=[], pyclass=unsetlocationparameter_q5label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q5labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class unsetlocationparameter_q6label:
    def __init__(self):
        return
unsetlocationparameter_q6label.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q6label"), ofwhat=[], pyclass=unsetlocationparameter_q6label, encoded="urn:NSConfig")

class unsetlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetlocationparameter_q6labelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlocationparameterResponse, encoded="urn:NSConfig")

class getlocationparameter:
    def __init__(self):
        return
getlocationparameter.typecode = Struct(pname=("urn:NSConfig","getlocationparameter"), ofwhat=[], pyclass=getlocationparameter, encoded="urn:NSConfig")

class getlocationparameterResponse:
    def __init__(self):
        self._return = None
        return
getlocationparameterResponse.typecode = Struct(pname=("urn:NSConfig","getlocationparameterResponse"), ofwhat=[ns0.getlocationparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlocationparameterResponse, encoded="urn:NSConfig")

class addlocationfile:
    def __init__(self):
        self._locationfile = None
        self._format = None
        return
addlocationfile.typecode = Struct(pname=("urn:NSConfig","addlocationfile"), ofwhat=[ZSI.TC.String(pname="locationfile", aname="_locationfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.locationfileformatEnum_Def(pname="format", aname="_format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlocationfile, encoded="urn:NSConfig")

class addlocationfileResponse:
    def __init__(self):
        self._return = None
        return
addlocationfileResponse.typecode = Struct(pname=("urn:NSConfig","addlocationfileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlocationfileResponse, encoded="urn:NSConfig")

class rmlocationfile:
    def __init__(self):
        return
rmlocationfile.typecode = Struct(pname=("urn:NSConfig","rmlocationfile"), ofwhat=[], pyclass=rmlocationfile, encoded="urn:NSConfig")

class rmlocationfileResponse:
    def __init__(self):
        self._return = None
        return
rmlocationfileResponse.typecode = Struct(pname=("urn:NSConfig","rmlocationfileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlocationfileResponse, encoded="urn:NSConfig")

class getlocationfile:
    def __init__(self):
        return
getlocationfile.typecode = Struct(pname=("urn:NSConfig","getlocationfile"), ofwhat=[], pyclass=getlocationfile, encoded="urn:NSConfig")

class getlocationfileResponse:
    def __init__(self):
        self._return = None
        return
getlocationfileResponse.typecode = Struct(pname=("urn:NSConfig","getlocationfileResponse"), ofwhat=[ns0.getlocationfileResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlocationfileResponse, encoded="urn:NSConfig")

class addserver:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        self._domain = None
        self._state = None
        return
addserver.typecode = Struct(pname=("urn:NSConfig","addserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addserver, encoded="urn:NSConfig")

class addserverResponse:
    def __init__(self):
        self._return = None
        return
addserverResponse.typecode = Struct(pname=("urn:NSConfig","addserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addserverResponse, encoded="urn:NSConfig")

class rmserver:
    def __init__(self):
        self._name = None
        return
rmserver.typecode = Struct(pname=("urn:NSConfig","rmserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmserver, encoded="urn:NSConfig")

class rmserverResponse:
    def __init__(self):
        self._return = None
        return
rmserverResponse.typecode = Struct(pname=("urn:NSConfig","rmserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmserverResponse, encoded="urn:NSConfig")

class setserver_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setserver_ipaddress.typecode = Struct(pname=("urn:NSConfig","setserver_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserver_ipaddress, encoded="urn:NSConfig")

class setserverResponse:
    def __init__(self):
        self._return = None
        return
setserverResponse.typecode = Struct(pname=("urn:NSConfig","setserver_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserverResponse, encoded="urn:NSConfig")

class setserver_domainresolveretry:
    def __init__(self):
        self._name = None
        self._domainresolveretry = None
        return
setserver_domainresolveretry.typecode = Struct(pname=("urn:NSConfig","setserver_domainresolveretry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="domainresolveretry", aname="_domainresolveretry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserver_domainresolveretry, encoded="urn:NSConfig")

class setserverResponse:
    def __init__(self):
        self._return = None
        return
setserverResponse.typecode = Struct(pname=("urn:NSConfig","setserver_domainresolveretryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserverResponse, encoded="urn:NSConfig")

class setserver_translationip:
    def __init__(self):
        self._name = None
        self._translationip = None
        return
setserver_translationip.typecode = Struct(pname=("urn:NSConfig","setserver_translationip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="translationip", aname="_translationip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserver_translationip, encoded="urn:NSConfig")

class setserverResponse:
    def __init__(self):
        self._return = None
        return
setserverResponse.typecode = Struct(pname=("urn:NSConfig","setserver_translationipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserverResponse, encoded="urn:NSConfig")

class setserver_translationmask:
    def __init__(self):
        self._name = None
        self._translationmask = None
        return
setserver_translationmask.typecode = Struct(pname=("urn:NSConfig","setserver_translationmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="translationmask", aname="_translationmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserver_translationmask, encoded="urn:NSConfig")

class setserverResponse:
    def __init__(self):
        self._return = None
        return
setserverResponse.typecode = Struct(pname=("urn:NSConfig","setserver_translationmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserverResponse, encoded="urn:NSConfig")

class setserver_domainresolvenow:
    def __init__(self):
        self._name = None
        self._domainresolvenow = None
        return
setserver_domainresolvenow.typecode = Struct(pname=("urn:NSConfig","setserver_domainresolvenow"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="domainresolvenow", aname="_domainresolvenow", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserver_domainresolvenow, encoded="urn:NSConfig")

class setserverResponse:
    def __init__(self):
        self._return = None
        return
setserverResponse.typecode = Struct(pname=("urn:NSConfig","setserver_domainresolvenowResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserverResponse, encoded="urn:NSConfig")

class enableserver:
    def __init__(self):
        self._name = None
        return
enableserver.typecode = Struct(pname=("urn:NSConfig","enableserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableserver, encoded="urn:NSConfig")

class enableserverResponse:
    def __init__(self):
        self._return = None
        return
enableserverResponse.typecode = Struct(pname=("urn:NSConfig","enableserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableserverResponse, encoded="urn:NSConfig")

class disableserver:
    def __init__(self):
        self._name = None
        self._delay = None
        return
disableserver.typecode = Struct(pname=("urn:NSConfig","disableserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableserver, encoded="urn:NSConfig")

class disableserverResponse:
    def __init__(self):
        self._return = None
        return
disableserverResponse.typecode = Struct(pname=("urn:NSConfig","disableserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableserverResponse, encoded="urn:NSConfig")

class getserver:
    def __init__(self):
        self._name = None
        self._internaL = None
        return
getserver.typecode = Struct(pname=("urn:NSConfig","getserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="internaL", aname="_internaL", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getserver, encoded="urn:NSConfig")

class getserverResponse:
    def __init__(self):
        self._return = None
        return
getserverResponse.typecode = Struct(pname=("urn:NSConfig","getserverResponse"), ofwhat=[ns0.getserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getserverResponse, encoded="urn:NSConfig")

class addservice:
    def __init__(self):
        self._name = None
        self._ip = None
        self._servername = None
        self._servicetype = None
        self._port = None
        self._cleartextport = None
        self._cachetype = None
        self._state = None
        return
addservice.typecode = Struct(pname=("urn:NSConfig","addservice"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.servicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.cachtypeEnum_Def(pname="cachetype", aname="_cachetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addservice, encoded="urn:NSConfig")

class addserviceResponse:
    def __init__(self):
        self._return = None
        return
addserviceResponse.typecode = Struct(pname=("urn:NSConfig","addserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addserviceResponse, encoded="urn:NSConfig")

class rmservice:
    def __init__(self):
        self._name = None
        return
rmservice.typecode = Struct(pname=("urn:NSConfig","rmservice"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmservice, encoded="urn:NSConfig")

class rmserviceResponse:
    def __init__(self):
        self._return = None
        return
rmserviceResponse.typecode = Struct(pname=("urn:NSConfig","rmserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmserviceResponse, encoded="urn:NSConfig")

class setservice_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setservice_ipaddress.typecode = Struct(pname=("urn:NSConfig","setservice_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_ipaddress, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_maxclient:
    def __init__(self):
        self._name = None
        self._maxclient = None
        return
setservice_maxclient.typecode = Struct(pname=("urn:NSConfig","setservice_maxclient"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_maxclient, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_maxreq:
    def __init__(self):
        self._name = None
        self._maxreq = None
        return
setservice_maxreq.typecode = Struct(pname=("urn:NSConfig","setservice_maxreq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_maxreq, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_cacheable:
    def __init__(self):
        self._name = None
        self._cacheable = None
        return
setservice_cacheable.typecode = Struct(pname=("urn:NSConfig","setservice_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cacheable", aname="_cacheable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_cacheable, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_cip:
    def __init__(self):
        self._name = None
        self._cip = None
        self._cipheader = None
        return
setservice_cip.typecode = Struct(pname=("urn:NSConfig","setservice_cip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="cip", aname="_cip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipheader", aname="_cipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_cip, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_usip:
    def __init__(self):
        self._name = None
        self._usip = None
        return
setservice_usip.typecode = Struct(pname=("urn:NSConfig","setservice_usip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="usip", aname="_usip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_usip, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_usipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_useproxyport:
    def __init__(self):
        self._name = None
        self._useproxyport = None
        return
setservice_useproxyport.typecode = Struct(pname=("urn:NSConfig","setservice_useproxyport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="useproxyport", aname="_useproxyport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_useproxyport, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_useproxyportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_sc:
    def __init__(self):
        self._name = None
        self._sc = None
        return
setservice_sc.typecode = Struct(pname=("urn:NSConfig","setservice_sc"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sc", aname="_sc", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_sc, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_sp:
    def __init__(self):
        self._name = None
        self._sp = None
        return
setservice_sp.typecode = Struct(pname=("urn:NSConfig","setservice_sp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sp", aname="_sp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_sp, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_spResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_clttimeout:
    def __init__(self):
        self._name = None
        self._clttimeout = None
        return
setservice_clttimeout.typecode = Struct(pname=("urn:NSConfig","setservice_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_clttimeout, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_svrtimeout:
    def __init__(self):
        self._name = None
        self._svrtimeout = None
        return
setservice_svrtimeout.typecode = Struct(pname=("urn:NSConfig","setservice_svrtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="svrtimeout", aname="_svrtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_svrtimeout, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_svrtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_serverid:
    def __init__(self):
        self._name = None
        self._serverid = None
        return
setservice_serverid.typecode = Struct(pname=("urn:NSConfig","setservice_serverid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverid", aname="_serverid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_serverid, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_serveridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_cka:
    def __init__(self):
        self._name = None
        self._cka = None
        return
setservice_cka.typecode = Struct(pname=("urn:NSConfig","setservice_cka"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cka", aname="_cka", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_cka, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_ckaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_tcpb:
    def __init__(self):
        self._name = None
        self._tcpb = None
        return
setservice_tcpb.typecode = Struct(pname=("urn:NSConfig","setservice_tcpb"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="tcpb", aname="_tcpb", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_tcpb, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_tcpbResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_cmp:
    def __init__(self):
        self._name = None
        self._cmp = None
        return
setservice_cmp.typecode = Struct(pname=("urn:NSConfig","setservice_cmp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cmp", aname="_cmp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_cmp, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_cmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_maxbandwidth:
    def __init__(self):
        self._name = None
        self._maxbandwidth = None
        return
setservice_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","setservice_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_maxbandwidth, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_accessdown:
    def __init__(self):
        self._name = None
        self._accessdown = None
        return
setservice_accessdown.typecode = Struct(pname=("urn:NSConfig","setservice_accessdown"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="accessdown", aname="_accessdown", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_accessdown, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_accessdownResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_monthreshold:
    def __init__(self):
        self._name = None
        self._monthreshold = None
        return
setservice_monthreshold.typecode = Struct(pname=("urn:NSConfig","setservice_monthreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_monthreshold, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_weight:
    def __init__(self):
        self._name = None
        self._weight = None
        self._monitorname = None
        return
setservice_weight.typecode = Struct(pname=("urn:NSConfig","setservice_weight"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_weight, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class setservice_downstateflush:
    def __init__(self):
        self._name = None
        self._downstateflush = None
        return
setservice_downstateflush.typecode = Struct(pname=("urn:NSConfig","setservice_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservice_downstateflush, encoded="urn:NSConfig")

class setserviceResponse:
    def __init__(self):
        self._return = None
        return
setserviceResponse.typecode = Struct(pname=("urn:NSConfig","setservice_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setserviceResponse, encoded="urn:NSConfig")

class unsetservice_maxclient:
    def __init__(self):
        self._name = None
        return
unsetservice_maxclient.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxclient"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_maxclient, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_maxreq:
    def __init__(self):
        self._name = None
        return
unsetservice_maxreq.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxreq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_maxreq, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_cacheable:
    def __init__(self):
        self._name = None
        return
unsetservice_cacheable.typecode = Struct(pname=("urn:NSConfig","unsetservice_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_cacheable, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_cip:
    def __init__(self):
        self._name = None
        return
unsetservice_cip.typecode = Struct(pname=("urn:NSConfig","unsetservice_cip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_cip, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_usip:
    def __init__(self):
        self._name = None
        return
unsetservice_usip.typecode = Struct(pname=("urn:NSConfig","unsetservice_usip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_usip, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_usipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_useproxyport:
    def __init__(self):
        self._name = None
        return
unsetservice_useproxyport.typecode = Struct(pname=("urn:NSConfig","unsetservice_useproxyport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_useproxyport, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_useproxyportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_sc:
    def __init__(self):
        self._name = None
        return
unsetservice_sc.typecode = Struct(pname=("urn:NSConfig","unsetservice_sc"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_sc, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_sp:
    def __init__(self):
        self._name = None
        return
unsetservice_sp.typecode = Struct(pname=("urn:NSConfig","unsetservice_sp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_sp, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_spResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_serverid:
    def __init__(self):
        self._name = None
        return
unsetservice_serverid.typecode = Struct(pname=("urn:NSConfig","unsetservice_serverid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_serverid, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_serveridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_cka:
    def __init__(self):
        self._name = None
        return
unsetservice_cka.typecode = Struct(pname=("urn:NSConfig","unsetservice_cka"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_cka, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_ckaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_tcpb:
    def __init__(self):
        self._name = None
        return
unsetservice_tcpb.typecode = Struct(pname=("urn:NSConfig","unsetservice_tcpb"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_tcpb, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_tcpbResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_cmp:
    def __init__(self):
        self._name = None
        return
unsetservice_cmp.typecode = Struct(pname=("urn:NSConfig","unsetservice_cmp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_cmp, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_cmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_maxbandwidth:
    def __init__(self):
        self._name = None
        return
unsetservice_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_maxbandwidth, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_accessdown:
    def __init__(self):
        self._name = None
        return
unsetservice_accessdown.typecode = Struct(pname=("urn:NSConfig","unsetservice_accessdown"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_accessdown, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_accessdownResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_monthreshold:
    def __init__(self):
        self._name = None
        return
unsetservice_monthreshold.typecode = Struct(pname=("urn:NSConfig","unsetservice_monthreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_monthreshold, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_clttimeout:
    def __init__(self):
        self._name = None
        return
unsetservice_clttimeout.typecode = Struct(pname=("urn:NSConfig","unsetservice_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_clttimeout, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_svrtimeout:
    def __init__(self):
        self._name = None
        return
unsetservice_svrtimeout.typecode = Struct(pname=("urn:NSConfig","unsetservice_svrtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_svrtimeout, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_svrtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_cipheader:
    def __init__(self):
        self._name = None
        return
unsetservice_cipheader.typecode = Struct(pname=("urn:NSConfig","unsetservice_cipheader"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_cipheader, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_cipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_monitorname:
    def __init__(self):
        self._name = None
        return
unsetservice_monitorname.typecode = Struct(pname=("urn:NSConfig","unsetservice_monitorname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_monitorname, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_monitornameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class unsetservice_downstateflush:
    def __init__(self):
        self._name = None
        return
unsetservice_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetservice_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservice_downstateflush, encoded="urn:NSConfig")

class unsetserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetservice_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetserviceResponse, encoded="urn:NSConfig")

class bindservice_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        return
bindservice_policy.typecode = Struct(pname=("urn:NSConfig","bindservice_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindservice_policy, encoded="urn:NSConfig")

class bindserviceResponse:
    def __init__(self):
        self._return = None
        return
bindserviceResponse.typecode = Struct(pname=("urn:NSConfig","bindservice_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindserviceResponse, encoded="urn:NSConfig")

class unbindservice_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        return
unbindservice_policy.typecode = Struct(pname=("urn:NSConfig","unbindservice_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindservice_policy, encoded="urn:NSConfig")

class unbindserviceResponse:
    def __init__(self):
        self._return = None
        return
unbindserviceResponse.typecode = Struct(pname=("urn:NSConfig","unbindservice_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindserviceResponse, encoded="urn:NSConfig")

class enableservice:
    def __init__(self):
        self._name = None
        return
enableservice.typecode = Struct(pname=("urn:NSConfig","enableservice"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableservice, encoded="urn:NSConfig")

class enableserviceResponse:
    def __init__(self):
        self._return = None
        return
enableserviceResponse.typecode = Struct(pname=("urn:NSConfig","enableserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableserviceResponse, encoded="urn:NSConfig")

class disableservice:
    def __init__(self):
        self._name = None
        self._delay = None
        return
disableservice.typecode = Struct(pname=("urn:NSConfig","disableservice"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableservice, encoded="urn:NSConfig")

class disableserviceResponse:
    def __init__(self):
        self._return = None
        return
disableserviceResponse.typecode = Struct(pname=("urn:NSConfig","disableserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableserviceResponse, encoded="urn:NSConfig")

class getservice:
    def __init__(self):
        self._name = None
        self._all = None
        self._internaL = None
        return
getservice.typecode = Struct(pname=("urn:NSConfig","getservice"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="internaL", aname="_internaL", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getservice, encoded="urn:NSConfig")

class getserviceResponse:
    def __init__(self):
        self._return = None
        return
getserviceResponse.typecode = Struct(pname=("urn:NSConfig","getserviceResponse"), ofwhat=[ns0.getserviceResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getserviceResponse, encoded="urn:NSConfig")

class addservicegroup:
    def __init__(self):
        self._servicegroupname = None
        self._servicetype = None
        self._cachetype = None
        self._state = None
        return
addservicegroup.typecode = Struct(pname=("urn:NSConfig","addservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.servicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.cachtypeEnum_Def(pname="cachetype", aname="_cachetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addservicegroup, encoded="urn:NSConfig")

class addservicegroupResponse:
    def __init__(self):
        self._return = None
        return
addservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","addservicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addservicegroupResponse, encoded="urn:NSConfig")

class rmservicegroup:
    def __init__(self):
        self._servicegroupname = None
        return
rmservicegroup.typecode = Struct(pname=("urn:NSConfig","rmservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmservicegroup, encoded="urn:NSConfig")

class rmservicegroupResponse:
    def __init__(self):
        self._return = None
        return
rmservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","rmservicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_server:
    def __init__(self):
        self._servicegroupname = None
        self._servername = None
        self._port = None
        self._weight = None
        self._serverid = None
        return
setservicegroup_server.typecode = Struct(pname=("urn:NSConfig","setservicegroup_server"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverid", aname="_serverid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_server, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_serverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_maxclient:
    def __init__(self):
        self._servicegroupname = None
        self._maxclient = None
        return
setservicegroup_maxclient.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxclient"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_maxclient, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_maxreq:
    def __init__(self):
        self._servicegroupname = None
        self._maxreq = None
        return
setservicegroup_maxreq.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxreq"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_maxreq, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_cacheable:
    def __init__(self):
        self._servicegroupname = None
        self._cacheable = None
        return
setservicegroup_cacheable.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cacheable"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cacheable", aname="_cacheable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_cacheable, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_cip:
    def __init__(self):
        self._servicegroupname = None
        self._cip = None
        self._cipheader = None
        return
setservicegroup_cip.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="cip", aname="_cip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipheader", aname="_cipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_cip, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_usip:
    def __init__(self):
        self._servicegroupname = None
        self._usip = None
        return
setservicegroup_usip.typecode = Struct(pname=("urn:NSConfig","setservicegroup_usip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="usip", aname="_usip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_usip, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_usipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_useproxyport:
    def __init__(self):
        self._servicegroupname = None
        self._useproxyport = None
        return
setservicegroup_useproxyport.typecode = Struct(pname=("urn:NSConfig","setservicegroup_useproxyport"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="useproxyport", aname="_useproxyport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_useproxyport, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_useproxyportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_sc:
    def __init__(self):
        self._servicegroupname = None
        self._sc = None
        return
setservicegroup_sc.typecode = Struct(pname=("urn:NSConfig","setservicegroup_sc"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sc", aname="_sc", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_sc, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_sp:
    def __init__(self):
        self._servicegroupname = None
        self._sp = None
        return
setservicegroup_sp.typecode = Struct(pname=("urn:NSConfig","setservicegroup_sp"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sp", aname="_sp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_sp, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_spResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_clttimeout:
    def __init__(self):
        self._servicegroupname = None
        self._clttimeout = None
        return
setservicegroup_clttimeout.typecode = Struct(pname=("urn:NSConfig","setservicegroup_clttimeout"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_clttimeout, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_svrtimeout:
    def __init__(self):
        self._servicegroupname = None
        self._svrtimeout = None
        return
setservicegroup_svrtimeout.typecode = Struct(pname=("urn:NSConfig","setservicegroup_svrtimeout"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="svrtimeout", aname="_svrtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_svrtimeout, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_svrtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_cka:
    def __init__(self):
        self._servicegroupname = None
        self._cka = None
        return
setservicegroup_cka.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cka"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cka", aname="_cka", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_cka, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_ckaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_tcpb:
    def __init__(self):
        self._servicegroupname = None
        self._tcpb = None
        return
setservicegroup_tcpb.typecode = Struct(pname=("urn:NSConfig","setservicegroup_tcpb"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="tcpb", aname="_tcpb", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_tcpb, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_tcpbResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_cmp:
    def __init__(self):
        self._servicegroupname = None
        self._cmp = None
        return
setservicegroup_cmp.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cmp"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cmp", aname="_cmp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_cmp, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_cmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_maxbandwidth:
    def __init__(self):
        self._servicegroupname = None
        self._maxbandwidth = None
        return
setservicegroup_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_maxbandwidth, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_monthreshold:
    def __init__(self):
        self._servicegroupname = None
        self._monthreshold = None
        return
setservicegroup_monthreshold.typecode = Struct(pname=("urn:NSConfig","setservicegroup_monthreshold"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_monthreshold, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class setservicegroup_downstateflush:
    def __init__(self):
        self._servicegroupname = None
        self._downstateflush = None
        return
setservicegroup_downstateflush.typecode = Struct(pname=("urn:NSConfig","setservicegroup_downstateflush"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroup_downstateflush, encoded="urn:NSConfig")

class setservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setservicegroup_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_servername:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_servername.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_servername"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_servername, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_servernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_port:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_port.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_port"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_port, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_portResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_weight:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_weight.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_weight"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_weight, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_serverid:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_serverid.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_serverid"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_serverid, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_serveridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_maxclient:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_maxclient.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxclient"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_maxclient, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_maxreq:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_maxreq.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxreq"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_maxreq, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_cacheable:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_cacheable.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cacheable"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_cacheable, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_cip:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_cip.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_cip, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_cipheader:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_cipheader.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cipheader"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_cipheader, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_usip:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_usip.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_usip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_usip, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_usipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_useproxyport:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_useproxyport.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_useproxyport"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_useproxyport, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_useproxyportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_sc:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_sc.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_sc"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_sc, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_sp:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_sp.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_sp"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_sp, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_spResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_clttimeout:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_clttimeout.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_clttimeout"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_clttimeout, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_svrtimeout:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_svrtimeout.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_svrtimeout"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_svrtimeout, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_svrtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_cka:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_cka.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cka"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_cka, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_ckaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_tcpb:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_tcpb.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_tcpb"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_tcpb, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_tcpbResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_cmp:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_cmp.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cmp"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_cmp, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_cmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_maxbandwidth:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_maxbandwidth, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_monthreshold:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_monthreshold.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_monthreshold"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_monthreshold, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class unsetservicegroup_downstateflush:
    def __init__(self):
        self._servicegroupname = None
        return
unsetservicegroup_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_downstateflush"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroup_downstateflush, encoded="urn:NSConfig")

class unsetservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetservicegroup_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetservicegroupResponse, encoded="urn:NSConfig")

class bindservicegroup_ip:
    def __init__(self):
        self._servicegroupname = None
        self._ip = None
        self._servername = None
        self._port = None
        self._weight = None
        self._serverid = None
        self._state = None
        return
bindservicegroup_ip.typecode = Struct(pname=("urn:NSConfig","bindservicegroup_ip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverid", aname="_serverid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindservicegroup_ip, encoded="urn:NSConfig")

class bindservicegroupResponse:
    def __init__(self):
        self._return = None
        return
bindservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","bindservicegroup_ipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindservicegroupResponse, encoded="urn:NSConfig")

class unbindservicegroup_ip:
    def __init__(self):
        self._servicegroupname = None
        self._ip = None
        self._servername = None
        self._port = None
        return
unbindservicegroup_ip.typecode = Struct(pname=("urn:NSConfig","unbindservicegroup_ip"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindservicegroup_ip, encoded="urn:NSConfig")

class unbindservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unbindservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindservicegroup_ipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindservicegroupResponse, encoded="urn:NSConfig")

class enableservicegroup:
    def __init__(self):
        self._servicegroupname = None
        self._servername = None
        self._port = None
        return
enableservicegroup.typecode = Struct(pname=("urn:NSConfig","enableservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableservicegroup, encoded="urn:NSConfig")

class enableservicegroupResponse:
    def __init__(self):
        self._return = None
        return
enableservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","enableservicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableservicegroupResponse, encoded="urn:NSConfig")

class disableservicegroup:
    def __init__(self):
        self._servicegroupname = None
        self._servername = None
        self._port = None
        self._delay = None
        return
disableservicegroup.typecode = Struct(pname=("urn:NSConfig","disableservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableservicegroup, encoded="urn:NSConfig")

class disableservicegroupResponse:
    def __init__(self):
        self._return = None
        return
disableservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","disableservicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableservicegroupResponse, encoded="urn:NSConfig")

class getservicegroup:
    def __init__(self):
        self._servicegroupname = None
        return
getservicegroup.typecode = Struct(pname=("urn:NSConfig","getservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getservicegroup, encoded="urn:NSConfig")

class getservicegroupResponse:
    def __init__(self):
        self._return = None
        return
getservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","getservicegroupResponse"), ofwhat=[ns0.getservicegroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getservicegroupResponse, encoded="urn:NSConfig")

class addvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._port = None
        self._range = None
        self._cachetype = None
        self._state = None
        return
addvserver.typecode = Struct(pname=("urn:NSConfig","addvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.cachtypeEnum_Def(pname="cachetype", aname="_cachetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvserver, encoded="urn:NSConfig")

class addvserverResponse:
    def __init__(self):
        self._return = None
        return
addvserverResponse.typecode = Struct(pname=("urn:NSConfig","addvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvserverResponse, encoded="urn:NSConfig")

class rmvserver:
    def __init__(self):
        self._name = None
        return
rmvserver.typecode = Struct(pname=("urn:NSConfig","rmvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvserver, encoded="urn:NSConfig")

class rmvserverResponse:
    def __init__(self):
        self._return = None
        return
rmvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvserverResponse, encoded="urn:NSConfig")

class setvserver_backupvserver:
    def __init__(self):
        self._name = None
        self._backupvserver = None
        self._redirecturl = None
        self._cacheable = None
        self._clttimeout = None
        self._somethod = None
        self._sopersistence = None
        self._sopersistencetimeout = None
        self._sothreshold = None
        return
setvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","setvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cacheable", aname="_cacheable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.spillovermethodsEnum_Def(pname="somethod", aname="_somethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sopersistence", aname="_sopersistence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvserver_backupvserver, encoded="urn:NSConfig")

class setvserverResponse:
    def __init__(self):
        self._return = None
        return
setvserverResponse.typecode = Struct(pname=("urn:NSConfig","setvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvserverResponse, encoded="urn:NSConfig")

class unsetvserver_backupvserver:
    def __init__(self):
        self._name = None
        return
unsetvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","unsetvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_backupvserver, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_redirecturl:
    def __init__(self):
        self._name = None
        return
unsetvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","unsetvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_redirecturl, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_redirecturl2:
    def __init__(self):
        self._name = None
        return
unsetvserver_redirecturl2.typecode = Struct(pname=("urn:NSConfig","unsetvserver_redirecturl2"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_redirecturl2, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_redirecturl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_cacheable:
    def __init__(self):
        self._name = None
        return
unsetvserver_cacheable.typecode = Struct(pname=("urn:NSConfig","unsetvserver_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_cacheable, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_clttimeout:
    def __init__(self):
        self._name = None
        return
unsetvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","unsetvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_clttimeout, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_somethod:
    def __init__(self):
        self._name = None
        return
unsetvserver_somethod.typecode = Struct(pname=("urn:NSConfig","unsetvserver_somethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_somethod, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_somethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_sopersistence:
    def __init__(self):
        self._name = None
        return
unsetvserver_sopersistence.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sopersistence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_sopersistence, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sopersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_sopersistencetimeout:
    def __init__(self):
        self._name = None
        return
unsetvserver_sopersistencetimeout.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sopersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_sopersistencetimeout, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sopersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class unsetvserver_sothreshold:
    def __init__(self):
        self._name = None
        return
unsetvserver_sothreshold.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sothreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserver_sothreshold, encoded="urn:NSConfig")

class unsetvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvserver_sothresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvserverResponse, encoded="urn:NSConfig")

class enablevserver:
    def __init__(self):
        self._name = None
        return
enablevserver.typecode = Struct(pname=("urn:NSConfig","enablevserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablevserver, encoded="urn:NSConfig")

class enablevserverResponse:
    def __init__(self):
        self._return = None
        return
enablevserverResponse.typecode = Struct(pname=("urn:NSConfig","enablevserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablevserverResponse, encoded="urn:NSConfig")

class disablevserver:
    def __init__(self):
        self._name = None
        return
disablevserver.typecode = Struct(pname=("urn:NSConfig","disablevserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablevserver, encoded="urn:NSConfig")

class disablevserverResponse:
    def __init__(self):
        self._return = None
        return
disablevserverResponse.typecode = Struct(pname=("urn:NSConfig","disablevserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablevserverResponse, encoded="urn:NSConfig")

class getvserver:
    def __init__(self):
        self._name = None
        return
getvserver.typecode = Struct(pname=("urn:NSConfig","getvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvserver, encoded="urn:NSConfig")

class getvserverResponse:
    def __init__(self):
        self._return = None
        return
getvserverResponse.typecode = Struct(pname=("urn:NSConfig","getvserverResponse"), ofwhat=[ns0.getvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvserverResponse, encoded="urn:NSConfig")

class getaaasession:
    def __init__(self):
        self._username = None
        self._groupname = None
        self._intranetip = None
        self._netmask = None
        return
getaaasession.typecode = Struct(pname=("urn:NSConfig","getaaasession"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaasession, encoded="urn:NSConfig")

class getaaasessionResponse:
    def __init__(self):
        self._return = None
        return
getaaasessionResponse.typecode = Struct(pname=("urn:NSConfig","getaaasessionResponse"), ofwhat=[ns0.getaaasessionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaasessionResponse, encoded="urn:NSConfig")

class killaaasession:
    def __init__(self):
        self._username = None
        self._groupname = None
        self._intranetip = None
        self._netmask = None
        self._all = None
        return
killaaasession.typecode = Struct(pname=("urn:NSConfig","killaaasession"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=killaaasession, encoded="urn:NSConfig")

class killaaasessionResponse:
    def __init__(self):
        self._return = None
        return
killaaasessionResponse.typecode = Struct(pname=("urn:NSConfig","killaaasessionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=killaaasessionResponse, encoded="urn:NSConfig")

class addaaauser:
    def __init__(self):
        self._username = None
        self._password = None
        return
addaaauser.typecode = Struct(pname=("urn:NSConfig","addaaauser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaauser, encoded="urn:NSConfig")

class addaaauserResponse:
    def __init__(self):
        self._return = None
        return
addaaauserResponse.typecode = Struct(pname=("urn:NSConfig","addaaauserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaauserResponse, encoded="urn:NSConfig")

class rmaaauser:
    def __init__(self):
        self._username = None
        return
rmaaauser.typecode = Struct(pname=("urn:NSConfig","rmaaauser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaauser, encoded="urn:NSConfig")

class rmaaauserResponse:
    def __init__(self):
        self._return = None
        return
rmaaauserResponse.typecode = Struct(pname=("urn:NSConfig","rmaaauserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaauserResponse, encoded="urn:NSConfig")

class setaaauser_password:
    def __init__(self):
        self._username = None
        self._password = None
        return
setaaauser_password.typecode = Struct(pname=("urn:NSConfig","setaaauser_password"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaauser_password, encoded="urn:NSConfig")

class setaaauserResponse:
    def __init__(self):
        self._return = None
        return
setaaauserResponse.typecode = Struct(pname=("urn:NSConfig","setaaauser_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaauserResponse, encoded="urn:NSConfig")

class bindaaauser_policy:
    def __init__(self):
        self._username = None
        self._policy = None
        self._priority = None
        return
bindaaauser_policy.typecode = Struct(pname=("urn:NSConfig","bindaaauser_policy"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauser_policy, encoded="urn:NSConfig")

class bindaaauserResponse:
    def __init__(self):
        self._return = None
        return
bindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","bindaaauser_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauserResponse, encoded="urn:NSConfig")

class bindaaauser_intranetapplication:
    def __init__(self):
        self._username = None
        self._intranetapplication = None
        return
bindaaauser_intranetapplication.typecode = Struct(pname=("urn:NSConfig","bindaaauser_intranetapplication"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauser_intranetapplication, encoded="urn:NSConfig")

class bindaaauserResponse:
    def __init__(self):
        self._return = None
        return
bindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","bindaaauser_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauserResponse, encoded="urn:NSConfig")

class bindaaauser_url:
    def __init__(self):
        self._username = None
        self._urlname = None
        return
bindaaauser_url.typecode = Struct(pname=("urn:NSConfig","bindaaauser_url"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauser_url, encoded="urn:NSConfig")

class bindaaauserResponse:
    def __init__(self):
        self._return = None
        return
bindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","bindaaauser_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauserResponse, encoded="urn:NSConfig")

class bindaaauser_intranetip:
    def __init__(self):
        self._username = None
        self._intranetip = None
        self._netmask = None
        return
bindaaauser_intranetip.typecode = Struct(pname=("urn:NSConfig","bindaaauser_intranetip"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauser_intranetip, encoded="urn:NSConfig")

class bindaaauserResponse:
    def __init__(self):
        self._return = None
        return
bindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","bindaaauser_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaauserResponse, encoded="urn:NSConfig")

class unbindaaauser_policy:
    def __init__(self):
        self._username = None
        self._policy = None
        return
unbindaaauser_policy.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_policy"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauser_policy, encoded="urn:NSConfig")

class unbindaaauserResponse:
    def __init__(self):
        self._return = None
        return
unbindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauserResponse, encoded="urn:NSConfig")

class unbindaaauser_intranetapplication:
    def __init__(self):
        self._username = None
        self._intranetapplication = None
        return
unbindaaauser_intranetapplication.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_intranetapplication"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauser_intranetapplication, encoded="urn:NSConfig")

class unbindaaauserResponse:
    def __init__(self):
        self._return = None
        return
unbindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauserResponse, encoded="urn:NSConfig")

class unbindaaauser_url:
    def __init__(self):
        self._username = None
        self._urlname = None
        return
unbindaaauser_url.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_url"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauser_url, encoded="urn:NSConfig")

class unbindaaauserResponse:
    def __init__(self):
        self._return = None
        return
unbindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauserResponse, encoded="urn:NSConfig")

class unbindaaauser_intranetip:
    def __init__(self):
        self._username = None
        self._intranetip = None
        self._netmask = None
        return
unbindaaauser_intranetip.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_intranetip"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauser_intranetip, encoded="urn:NSConfig")

class unbindaaauserResponse:
    def __init__(self):
        self._return = None
        return
unbindaaauserResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaauser_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaauserResponse, encoded="urn:NSConfig")

class getaaauser:
    def __init__(self):
        self._username = None
        self._loggedin = None
        return
getaaauser.typecode = Struct(pname=("urn:NSConfig","getaaauser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="loggedin", aname="_loggedin", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaauser, encoded="urn:NSConfig")

class getaaauserResponse:
    def __init__(self):
        self._return = None
        return
getaaauserResponse.typecode = Struct(pname=("urn:NSConfig","getaaauserResponse"), ofwhat=[ns0.getaaauserResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaauserResponse, encoded="urn:NSConfig")

class addaaagroup:
    def __init__(self):
        self._groupname = None
        return
addaaagroup.typecode = Struct(pname=("urn:NSConfig","addaaagroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaagroup, encoded="urn:NSConfig")

class addaaagroupResponse:
    def __init__(self):
        self._return = None
        return
addaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","addaaagroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaagroupResponse, encoded="urn:NSConfig")

class rmaaagroup:
    def __init__(self):
        self._groupname = None
        return
rmaaagroup.typecode = Struct(pname=("urn:NSConfig","rmaaagroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaagroup, encoded="urn:NSConfig")

class rmaaagroupResponse:
    def __init__(self):
        self._return = None
        return
rmaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","rmaaagroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaagroupResponse, encoded="urn:NSConfig")

class bindaaagroup_user:
    def __init__(self):
        self._groupname = None
        self._username = None
        return
bindaaagroup_user.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_user"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroup_user, encoded="urn:NSConfig")

class bindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
bindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_userResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroupResponse, encoded="urn:NSConfig")

class bindaaagroup_policy:
    def __init__(self):
        self._groupname = None
        self._policy = None
        self._priority = None
        return
bindaaagroup_policy.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_policy"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroup_policy, encoded="urn:NSConfig")

class bindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
bindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroupResponse, encoded="urn:NSConfig")

class bindaaagroup_intranetapplication:
    def __init__(self):
        self._groupname = None
        self._intranetapplication = None
        return
bindaaagroup_intranetapplication.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_intranetapplication"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroup_intranetapplication, encoded="urn:NSConfig")

class bindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
bindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroupResponse, encoded="urn:NSConfig")

class bindaaagroup_url:
    def __init__(self):
        self._groupname = None
        self._urlname = None
        return
bindaaagroup_url.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_url"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroup_url, encoded="urn:NSConfig")

class bindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
bindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroupResponse, encoded="urn:NSConfig")

class bindaaagroup_intranetip:
    def __init__(self):
        self._groupname = None
        self._intranetip = None
        self._netmask = None
        return
bindaaagroup_intranetip.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_intranetip"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroup_intranetip, encoded="urn:NSConfig")

class bindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
bindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","bindaaagroup_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaagroupResponse, encoded="urn:NSConfig")

class unbindaaagroup_user:
    def __init__(self):
        self._groupname = None
        self._username = None
        return
unbindaaagroup_user.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_user"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroup_user, encoded="urn:NSConfig")

class unbindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
unbindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_userResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroupResponse, encoded="urn:NSConfig")

class unbindaaagroup_policy:
    def __init__(self):
        self._groupname = None
        self._policy = None
        return
unbindaaagroup_policy.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_policy"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroup_policy, encoded="urn:NSConfig")

class unbindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
unbindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroupResponse, encoded="urn:NSConfig")

class unbindaaagroup_intranetapplication:
    def __init__(self):
        self._groupname = None
        self._intranetapplication = None
        return
unbindaaagroup_intranetapplication.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_intranetapplication"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroup_intranetapplication, encoded="urn:NSConfig")

class unbindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
unbindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroupResponse, encoded="urn:NSConfig")

class unbindaaagroup_url:
    def __init__(self):
        self._groupname = None
        self._urlname = None
        return
unbindaaagroup_url.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_url"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroup_url, encoded="urn:NSConfig")

class unbindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
unbindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroupResponse, encoded="urn:NSConfig")

class unbindaaagroup_intranetip:
    def __init__(self):
        self._groupname = None
        self._intranetip = None
        self._netmask = None
        return
unbindaaagroup_intranetip.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_intranetip"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroup_intranetip, encoded="urn:NSConfig")

class unbindaaagroupResponse:
    def __init__(self):
        self._return = None
        return
unbindaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaagroup_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaagroupResponse, encoded="urn:NSConfig")

class getaaagroup:
    def __init__(self):
        self._groupname = None
        self._loggedin = None
        return
getaaagroup.typecode = Struct(pname=("urn:NSConfig","getaaagroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="loggedin", aname="_loggedin", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaagroup, encoded="urn:NSConfig")

class getaaagroupResponse:
    def __init__(self):
        self._return = None
        return
getaaagroupResponse.typecode = Struct(pname=("urn:NSConfig","getaaagroupResponse"), ofwhat=[ns0.getaaagroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaagroupResponse, encoded="urn:NSConfig")

class setaaaradiusparams_serverip:
    def __init__(self):
        self._radkey = None
        self._serverip = None
        return
setaaaradiusparams_serverip.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_serverip"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_serverip, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_serverport:
    def __init__(self):
        self._radkey = None
        self._serverport = None
        return
setaaaradiusparams_serverport.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_serverport"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_serverport, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_authtimeout:
    def __init__(self):
        self._radkey = None
        self._authtimeout = None
        return
setaaaradiusparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_authtimeout"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_authtimeout, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radkey:
    def __init__(self):
        self._radkey = None
        return
setaaaradiusparams_radkey.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radkey"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radkey, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radnasip:
    def __init__(self):
        self._radkey = None
        self._radnasip = None
        return
setaaaradiusparams_radnasip.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radnasip"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="radnasip", aname="_radnasip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radnasip, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radnasid:
    def __init__(self):
        self._radkey = None
        self._radnasid = None
        return
setaaaradiusparams_radnasid.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radnasid"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radnasid", aname="_radnasid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radnasid, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radvendorid:
    def __init__(self):
        self._radkey = None
        self._radvendorid = None
        return
setaaaradiusparams_radvendorid.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radvendorid"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radvendorid", aname="_radvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radvendorid, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radattributetype:
    def __init__(self):
        self._radkey = None
        self._radattributetype = None
        return
setaaaradiusparams_radattributetype.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radattributetype"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radattributetype", aname="_radattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radattributetype, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radgroupsprefix:
    def __init__(self):
        self._radkey = None
        self._radgroupsprefix = None
        return
setaaaradiusparams_radgroupsprefix.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radgroupsprefix"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radgroupsprefix", aname="_radgroupsprefix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radgroupsprefix, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radgroupsprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_radgroupseparator:
    def __init__(self):
        self._radkey = None
        self._radgroupseparator = None
        return
setaaaradiusparams_radgroupseparator.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radgroupseparator"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radgroupseparator", aname="_radgroupseparator", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_radgroupseparator, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_radgroupseparatorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_passencoding:
    def __init__(self):
        self._radkey = None
        self._passencoding = None
        return
setaaaradiusparams_passencoding.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_passencoding"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.radpassencodingEnum_Def(pname="passencoding", aname="_passencoding", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_passencoding, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_passencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_ipvendorid:
    def __init__(self):
        self._radkey = None
        self._ipvendorid = None
        return
setaaaradiusparams_ipvendorid.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_ipvendorid"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipvendorid", aname="_ipvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_ipvendorid, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_ipvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_ipattributetype:
    def __init__(self):
        self._radkey = None
        self._ipattributetype = None
        return
setaaaradiusparams_ipattributetype.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_ipattributetype"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipattributetype", aname="_ipattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_ipattributetype, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_ipattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaradiusparams_accounting:
    def __init__(self):
        self._radkey = None
        self._accounting = None
        return
setaaaradiusparams_accounting.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_accounting"), ofwhat=[ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparams_accounting, encoded="urn:NSConfig")

class setaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaradiusparams_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_serverip:
    def __init__(self):
        return
unsetaaaradiusparams_serverip.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_serverip"), ofwhat=[], pyclass=unsetaaaradiusparams_serverip, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_serverport:
    def __init__(self):
        return
unsetaaaradiusparams_serverport.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_serverport"), ofwhat=[], pyclass=unsetaaaradiusparams_serverport, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_authtimeout:
    def __init__(self):
        return
unsetaaaradiusparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_authtimeout"), ofwhat=[], pyclass=unsetaaaradiusparams_authtimeout, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radnasip:
    def __init__(self):
        return
unsetaaaradiusparams_radnasip.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radnasip"), ofwhat=[], pyclass=unsetaaaradiusparams_radnasip, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radnasid:
    def __init__(self):
        return
unsetaaaradiusparams_radnasid.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radnasid"), ofwhat=[], pyclass=unsetaaaradiusparams_radnasid, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radvendorid:
    def __init__(self):
        return
unsetaaaradiusparams_radvendorid.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radvendorid"), ofwhat=[], pyclass=unsetaaaradiusparams_radvendorid, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radattributetype:
    def __init__(self):
        return
unsetaaaradiusparams_radattributetype.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radattributetype"), ofwhat=[], pyclass=unsetaaaradiusparams_radattributetype, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radgroupsprefix:
    def __init__(self):
        return
unsetaaaradiusparams_radgroupsprefix.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radgroupsprefix"), ofwhat=[], pyclass=unsetaaaradiusparams_radgroupsprefix, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radgroupsprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_radgroupseparator:
    def __init__(self):
        return
unsetaaaradiusparams_radgroupseparator.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radgroupseparator"), ofwhat=[], pyclass=unsetaaaradiusparams_radgroupseparator, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_radgroupseparatorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_passencoding:
    def __init__(self):
        return
unsetaaaradiusparams_passencoding.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_passencoding"), ofwhat=[], pyclass=unsetaaaradiusparams_passencoding, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_passencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_ipvendorid:
    def __init__(self):
        return
unsetaaaradiusparams_ipvendorid.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_ipvendorid"), ofwhat=[], pyclass=unsetaaaradiusparams_ipvendorid, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_ipvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_ipattributetype:
    def __init__(self):
        return
unsetaaaradiusparams_ipattributetype.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_ipattributetype"), ofwhat=[], pyclass=unsetaaaradiusparams_ipattributetype, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_ipattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class unsetaaaradiusparams_accounting:
    def __init__(self):
        return
unsetaaaradiusparams_accounting.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_accounting"), ofwhat=[], pyclass=unsetaaaradiusparams_accounting, encoded="urn:NSConfig")

class unsetaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaradiusparams_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaradiusparamsResponse, encoded="urn:NSConfig")

class getaaaradiusparams:
    def __init__(self):
        return
getaaaradiusparams.typecode = Struct(pname=("urn:NSConfig","getaaaradiusparams"), ofwhat=[], pyclass=getaaaradiusparams, encoded="urn:NSConfig")

class getaaaradiusparamsResponse:
    def __init__(self):
        self._return = None
        return
getaaaradiusparamsResponse.typecode = Struct(pname=("urn:NSConfig","getaaaradiusparamsResponse"), ofwhat=[ns0.getaaaradiusparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaaradiusparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_serverip:
    def __init__(self):
        self._serverip = None
        return
setaaaldapparams_serverip.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_serverip"), ofwhat=[ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_serverip, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_serverport:
    def __init__(self):
        self._serverport = None
        return
setaaaldapparams_serverport.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_serverport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_serverport, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_authtimeout:
    def __init__(self):
        self._authtimeout = None
        return
setaaaldapparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_authtimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_authtimeout, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_ldapbase:
    def __init__(self):
        self._ldapbase = None
        return
setaaaldapparams_ldapbase.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbase"), ofwhat=[ZSI.TC.String(pname="ldapbase", aname="_ldapbase", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_ldapbase, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_ldapbinddn:
    def __init__(self):
        self._ldapbinddn = None
        return
setaaaldapparams_ldapbinddn.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbinddn"), ofwhat=[ZSI.TC.String(pname="ldapbinddn", aname="_ldapbinddn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_ldapbinddn, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbinddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_ldapbinddnpassword:
    def __init__(self):
        self._ldapbinddnpassword = None
        return
setaaaldapparams_ldapbinddnpassword.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbinddnpassword"), ofwhat=[ZSI.TC.String(pname="ldapbinddnpassword", aname="_ldapbinddnpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_ldapbinddnpassword, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldapbinddnpasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_ldaploginname:
    def __init__(self):
        self._ldaploginname = None
        return
setaaaldapparams_ldaploginname.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldaploginname"), ofwhat=[ZSI.TC.String(pname="ldaploginname", aname="_ldaploginname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_ldaploginname, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ldaploginnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_searchfilter:
    def __init__(self):
        self._searchfilter = None
        return
setaaaldapparams_searchfilter.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_searchfilter"), ofwhat=[ZSI.TC.String(pname="searchfilter", aname="_searchfilter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_searchfilter, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_searchfilterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_groupattrname:
    def __init__(self):
        self._groupattrname = None
        return
setaaaldapparams_groupattrname.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_groupattrname"), ofwhat=[ZSI.TC.String(pname="groupattrname", aname="_groupattrname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_groupattrname, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_groupattrnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_subattributename:
    def __init__(self):
        self._subattributename = None
        return
setaaaldapparams_subattributename.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_subattributename"), ofwhat=[ZSI.TC.String(pname="subattributename", aname="_subattributename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_subattributename, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_subattributenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_sectype:
    def __init__(self):
        self._sectype = None
        return
setaaaldapparams_sectype.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_sectype"), ofwhat=[ns0.sectypeEnum_Def(pname="sectype", aname="_sectype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_sectype, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_sectypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaaldapparams_ssonameattribute:
    def __init__(self):
        self._ssonameattribute = None
        return
setaaaldapparams_ssonameattribute.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ssonameattribute"), ofwhat=[ZSI.TC.String(pname="ssonameattribute", aname="_ssonameattribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparams_ssonameattribute, encoded="urn:NSConfig")

class setaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaaldapparams_ssonameattributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_serverip:
    def __init__(self):
        return
unsetaaaldapparams_serverip.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_serverip"), ofwhat=[], pyclass=unsetaaaldapparams_serverip, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_serverport:
    def __init__(self):
        return
unsetaaaldapparams_serverport.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_serverport"), ofwhat=[], pyclass=unsetaaaldapparams_serverport, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_authtimeout:
    def __init__(self):
        return
unsetaaaldapparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_authtimeout"), ofwhat=[], pyclass=unsetaaaldapparams_authtimeout, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_ldapbase:
    def __init__(self):
        return
unsetaaaldapparams_ldapbase.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbase"), ofwhat=[], pyclass=unsetaaaldapparams_ldapbase, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_ldapbinddn:
    def __init__(self):
        return
unsetaaaldapparams_ldapbinddn.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbinddn"), ofwhat=[], pyclass=unsetaaaldapparams_ldapbinddn, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbinddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_ldapbinddnpassword:
    def __init__(self):
        return
unsetaaaldapparams_ldapbinddnpassword.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbinddnpassword"), ofwhat=[], pyclass=unsetaaaldapparams_ldapbinddnpassword, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldapbinddnpasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_ldaploginname:
    def __init__(self):
        return
unsetaaaldapparams_ldaploginname.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldaploginname"), ofwhat=[], pyclass=unsetaaaldapparams_ldaploginname, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ldaploginnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_searchfilter:
    def __init__(self):
        return
unsetaaaldapparams_searchfilter.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_searchfilter"), ofwhat=[], pyclass=unsetaaaldapparams_searchfilter, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_searchfilterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_groupattrname:
    def __init__(self):
        return
unsetaaaldapparams_groupattrname.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_groupattrname"), ofwhat=[], pyclass=unsetaaaldapparams_groupattrname, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_groupattrnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_subattributename:
    def __init__(self):
        return
unsetaaaldapparams_subattributename.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_subattributename"), ofwhat=[], pyclass=unsetaaaldapparams_subattributename, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_subattributenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_sectype:
    def __init__(self):
        return
unsetaaaldapparams_sectype.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_sectype"), ofwhat=[], pyclass=unsetaaaldapparams_sectype, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_sectypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class unsetaaaldapparams_ssonameattribute:
    def __init__(self):
        return
unsetaaaldapparams_ssonameattribute.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ssonameattribute"), ofwhat=[], pyclass=unsetaaaldapparams_ssonameattribute, encoded="urn:NSConfig")

class unsetaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaldapparams_ssonameattributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaldapparamsResponse, encoded="urn:NSConfig")

class getaaaldapparams:
    def __init__(self):
        return
getaaaldapparams.typecode = Struct(pname=("urn:NSConfig","getaaaldapparams"), ofwhat=[], pyclass=getaaaldapparams, encoded="urn:NSConfig")

class getaaaldapparamsResponse:
    def __init__(self):
        self._return = None
        return
getaaaldapparamsResponse.typecode = Struct(pname=("urn:NSConfig","getaaaldapparamsResponse"), ofwhat=[ns0.getaaaldapparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaaldapparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_serverip:
    def __init__(self):
        self._serverip = None
        return
setaaatacacsparams_serverip.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_serverip"), ofwhat=[ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_serverip, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_serverport:
    def __init__(self):
        self._serverport = None
        return
setaaatacacsparams_serverport.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_serverport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_serverport, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_authtimeout:
    def __init__(self):
        self._authtimeout = None
        return
setaaatacacsparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_authtimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_authtimeout, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_tacacssecret:
    def __init__(self):
        self._tacacssecret = None
        return
setaaatacacsparams_tacacssecret.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_tacacssecret"), ofwhat=[ZSI.TC.String(pname="tacacssecret", aname="_tacacssecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_tacacssecret, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_tacacssecretResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_authorization:
    def __init__(self):
        self._authorization = None
        return
setaaatacacsparams_authorization.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_authorization"), ofwhat=[ns0.onoffEnum_Def(pname="authorization", aname="_authorization", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_authorization, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_authorizationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaatacacsparams_accounting:
    def __init__(self):
        self._accounting = None
        return
setaaatacacsparams_accounting.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_accounting"), ofwhat=[ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparams_accounting, encoded="urn:NSConfig")

class setaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaatacacsparams_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_serverip:
    def __init__(self):
        return
unsetaaatacacsparams_serverip.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_serverip"), ofwhat=[], pyclass=unsetaaatacacsparams_serverip, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_serverport:
    def __init__(self):
        return
unsetaaatacacsparams_serverport.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_serverport"), ofwhat=[], pyclass=unsetaaatacacsparams_serverport, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_authtimeout:
    def __init__(self):
        return
unsetaaatacacsparams_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_authtimeout"), ofwhat=[], pyclass=unsetaaatacacsparams_authtimeout, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_tacacssecret:
    def __init__(self):
        return
unsetaaatacacsparams_tacacssecret.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_tacacssecret"), ofwhat=[], pyclass=unsetaaatacacsparams_tacacssecret, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_tacacssecretResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_authorization:
    def __init__(self):
        return
unsetaaatacacsparams_authorization.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_authorization"), ofwhat=[], pyclass=unsetaaatacacsparams_authorization, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_authorizationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class unsetaaatacacsparams_accounting:
    def __init__(self):
        return
unsetaaatacacsparams_accounting.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_accounting"), ofwhat=[], pyclass=unsetaaatacacsparams_accounting, encoded="urn:NSConfig")

class unsetaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaatacacsparams_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaatacacsparamsResponse, encoded="urn:NSConfig")

class getaaatacacsparams:
    def __init__(self):
        return
getaaatacacsparams.typecode = Struct(pname=("urn:NSConfig","getaaatacacsparams"), ofwhat=[], pyclass=getaaatacacsparams, encoded="urn:NSConfig")

class getaaatacacsparamsResponse:
    def __init__(self):
        self._return = None
        return
getaaatacacsparamsResponse.typecode = Struct(pname=("urn:NSConfig","getaaatacacsparamsResponse"), ofwhat=[ns0.getaaatacacsparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaatacacsparamsResponse, encoded="urn:NSConfig")

class setaaant4params_serverip:
    def __init__(self):
        self._serverip = None
        return
setaaant4params_serverip.typecode = Struct(pname=("urn:NSConfig","setaaant4params_serverip"), ofwhat=[ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4params_serverip, encoded="urn:NSConfig")

class setaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
setaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","setaaant4params_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4paramsResponse, encoded="urn:NSConfig")

class setaaant4params_nt4servername:
    def __init__(self):
        self._nt4servername = None
        return
setaaant4params_nt4servername.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4servername"), ofwhat=[ZSI.TC.String(pname="nt4servername", aname="_nt4servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4params_nt4servername, encoded="urn:NSConfig")

class setaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
setaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4servernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4paramsResponse, encoded="urn:NSConfig")

class setaaant4params_nt4domainname:
    def __init__(self):
        self._nt4domainname = None
        return
setaaant4params_nt4domainname.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4domainname"), ofwhat=[ZSI.TC.String(pname="nt4domainname", aname="_nt4domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4params_nt4domainname, encoded="urn:NSConfig")

class setaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
setaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4paramsResponse, encoded="urn:NSConfig")

class setaaant4params_nt4adminuser:
    def __init__(self):
        self._nt4adminuser = None
        return
setaaant4params_nt4adminuser.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4adminuser"), ofwhat=[ZSI.TC.String(pname="nt4adminuser", aname="_nt4adminuser", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4params_nt4adminuser, encoded="urn:NSConfig")

class setaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
setaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4adminuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4paramsResponse, encoded="urn:NSConfig")

class setaaant4params_nt4adminpasswd:
    def __init__(self):
        self._nt4adminpasswd = None
        return
setaaant4params_nt4adminpasswd.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4adminpasswd"), ofwhat=[ZSI.TC.String(pname="nt4adminpasswd", aname="_nt4adminpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4params_nt4adminpasswd, encoded="urn:NSConfig")

class setaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
setaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","setaaant4params_nt4adminpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaant4paramsResponse, encoded="urn:NSConfig")

class unsetaaant4params_serverip:
    def __init__(self):
        return
unsetaaant4params_serverip.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_serverip"), ofwhat=[], pyclass=unsetaaant4params_serverip, encoded="urn:NSConfig")

class unsetaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaant4paramsResponse, encoded="urn:NSConfig")

class unsetaaant4params_nt4servername:
    def __init__(self):
        return
unsetaaant4params_nt4servername.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4servername"), ofwhat=[], pyclass=unsetaaant4params_nt4servername, encoded="urn:NSConfig")

class unsetaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4servernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaant4paramsResponse, encoded="urn:NSConfig")

class unsetaaant4params_nt4domainname:
    def __init__(self):
        return
unsetaaant4params_nt4domainname.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4domainname"), ofwhat=[], pyclass=unsetaaant4params_nt4domainname, encoded="urn:NSConfig")

class unsetaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaant4paramsResponse, encoded="urn:NSConfig")

class unsetaaant4params_nt4adminuser:
    def __init__(self):
        return
unsetaaant4params_nt4adminuser.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4adminuser"), ofwhat=[], pyclass=unsetaaant4params_nt4adminuser, encoded="urn:NSConfig")

class unsetaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4adminuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaant4paramsResponse, encoded="urn:NSConfig")

class unsetaaant4params_nt4adminpasswd:
    def __init__(self):
        return
unsetaaant4params_nt4adminpasswd.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4adminpasswd"), ofwhat=[], pyclass=unsetaaant4params_nt4adminpasswd, encoded="urn:NSConfig")

class unsetaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaant4params_nt4adminpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaant4paramsResponse, encoded="urn:NSConfig")

class getaaant4params:
    def __init__(self):
        return
getaaant4params.typecode = Struct(pname=("urn:NSConfig","getaaant4params"), ofwhat=[], pyclass=getaaant4params, encoded="urn:NSConfig")

class getaaant4paramsResponse:
    def __init__(self):
        self._return = None
        return
getaaant4paramsResponse.typecode = Struct(pname=("urn:NSConfig","getaaant4paramsResponse"), ofwhat=[ns0.getaaant4paramsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaant4paramsResponse, encoded="urn:NSConfig")

class setaaacertparams_usernamefield:
    def __init__(self):
        self._usernamefield = None
        return
setaaacertparams_usernamefield.typecode = Struct(pname=("urn:NSConfig","setaaacertparams_usernamefield"), ofwhat=[ZSI.TC.String(pname="usernamefield", aname="_usernamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaacertparams_usernamefield, encoded="urn:NSConfig")

class setaaacertparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaacertparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaacertparams_usernamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaacertparamsResponse, encoded="urn:NSConfig")

class setaaacertparams_groupnamefield:
    def __init__(self):
        self._groupnamefield = None
        return
setaaacertparams_groupnamefield.typecode = Struct(pname=("urn:NSConfig","setaaacertparams_groupnamefield"), ofwhat=[ZSI.TC.String(pname="groupnamefield", aname="_groupnamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaacertparams_groupnamefield, encoded="urn:NSConfig")

class setaaacertparamsResponse:
    def __init__(self):
        self._return = None
        return
setaaacertparamsResponse.typecode = Struct(pname=("urn:NSConfig","setaaacertparams_groupnamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaacertparamsResponse, encoded="urn:NSConfig")

class unsetaaacertparams_usernamefield:
    def __init__(self):
        return
unsetaaacertparams_usernamefield.typecode = Struct(pname=("urn:NSConfig","unsetaaacertparams_usernamefield"), ofwhat=[], pyclass=unsetaaacertparams_usernamefield, encoded="urn:NSConfig")

class unsetaaacertparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaacertparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaacertparams_usernamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaacertparamsResponse, encoded="urn:NSConfig")

class unsetaaacertparams_groupnamefield:
    def __init__(self):
        return
unsetaaacertparams_groupnamefield.typecode = Struct(pname=("urn:NSConfig","unsetaaacertparams_groupnamefield"), ofwhat=[], pyclass=unsetaaacertparams_groupnamefield, encoded="urn:NSConfig")

class unsetaaacertparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetaaacertparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaacertparams_groupnamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaacertparamsResponse, encoded="urn:NSConfig")

class getaaacertparams:
    def __init__(self):
        return
getaaacertparams.typecode = Struct(pname=("urn:NSConfig","getaaacertparams"), ofwhat=[], pyclass=getaaacertparams, encoded="urn:NSConfig")

class getaaacertparamsResponse:
    def __init__(self):
        self._return = None
        return
getaaacertparamsResponse.typecode = Struct(pname=("urn:NSConfig","getaaacertparamsResponse"), ofwhat=[ns0.getaaacertparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaacertparamsResponse, encoded="urn:NSConfig")

class setaaaparameter_defaultauthtype:
    def __init__(self):
        self._defaultauthtype = None
        return
setaaaparameter_defaultauthtype.typecode = Struct(pname=("urn:NSConfig","setaaaparameter_defaultauthtype"), ofwhat=[ns0.authtypeEnum_Def(pname="defaultauthtype", aname="_defaultauthtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaparameter_defaultauthtype, encoded="urn:NSConfig")

class setaaaparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaaparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaaparameter_defaultauthtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaparameterResponse, encoded="urn:NSConfig")

class setaaaparameter_maxaaausers:
    def __init__(self):
        self._maxaaausers = None
        return
setaaaparameter_maxaaausers.typecode = Struct(pname=("urn:NSConfig","setaaaparameter_maxaaausers"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxaaausers", aname="_maxaaausers", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaparameter_maxaaausers, encoded="urn:NSConfig")

class setaaaparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaaparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaaparameter_maxaaausersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaaparameterResponse, encoded="urn:NSConfig")

class unsetaaaparameter_defaultauthtype:
    def __init__(self):
        return
unsetaaaparameter_defaultauthtype.typecode = Struct(pname=("urn:NSConfig","unsetaaaparameter_defaultauthtype"), ofwhat=[], pyclass=unsetaaaparameter_defaultauthtype, encoded="urn:NSConfig")

class unsetaaaparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaparameter_defaultauthtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaparameterResponse, encoded="urn:NSConfig")

class unsetaaaparameter_maxaaausers:
    def __init__(self):
        return
unsetaaaparameter_maxaaausers.typecode = Struct(pname=("urn:NSConfig","unsetaaaparameter_maxaaausers"), ofwhat=[], pyclass=unsetaaaparameter_maxaaausers, encoded="urn:NSConfig")

class unsetaaaparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaaparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaaparameter_maxaaausersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaaparameterResponse, encoded="urn:NSConfig")

class getaaaparameter:
    def __init__(self):
        return
getaaaparameter.typecode = Struct(pname=("urn:NSConfig","getaaaparameter"), ofwhat=[], pyclass=getaaaparameter, encoded="urn:NSConfig")

class getaaaparameterResponse:
    def __init__(self):
        self._return = None
        return
getaaaparameterResponse.typecode = Struct(pname=("urn:NSConfig","getaaaparameterResponse"), ofwhat=[ns0.getaaaparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaaparameterResponse, encoded="urn:NSConfig")

class addaaapreauthenticationaction:
    def __init__(self):
        self._name = None
        self._preauthenticationaction = None
        self._killprocess = None
        self._deletefiles = None
        return
addaaapreauthenticationaction.typecode = Struct(pname=("urn:NSConfig","addaaapreauthenticationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="preauthenticationaction", aname="_preauthenticationaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="killprocess", aname="_killprocess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="deletefiles", aname="_deletefiles", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaapreauthenticationaction, encoded="urn:NSConfig")

class addaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
addaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","addaaapreauthenticationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class rmaaapreauthenticationaction:
    def __init__(self):
        self._name = None
        return
rmaaapreauthenticationaction.typecode = Struct(pname=("urn:NSConfig","rmaaapreauthenticationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaapreauthenticationaction, encoded="urn:NSConfig")

class rmaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
rmaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","rmaaapreauthenticationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class setaaapreauthenticationaction_preauthenticationaction:
    def __init__(self):
        self._name = None
        self._preauthenticationaction = None
        return
setaaapreauthenticationaction_preauthenticationaction.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_preauthenticationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="preauthenticationaction", aname="_preauthenticationaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationaction_preauthenticationaction, encoded="urn:NSConfig")

class setaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_preauthenticationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class setaaapreauthenticationaction_killprocess:
    def __init__(self):
        self._name = None
        self._killprocess = None
        return
setaaapreauthenticationaction_killprocess.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_killprocess"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="killprocess", aname="_killprocess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationaction_killprocess, encoded="urn:NSConfig")

class setaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_killprocessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class setaaapreauthenticationaction_deletefiles:
    def __init__(self):
        self._name = None
        self._deletefiles = None
        return
setaaapreauthenticationaction_deletefiles.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_deletefiles"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="deletefiles", aname="_deletefiles", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationaction_deletefiles, encoded="urn:NSConfig")

class setaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationaction_deletefilesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationaction_killprocess:
    def __init__(self):
        self._name = None
        return
unsetaaapreauthenticationaction_killprocess.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationaction_killprocess"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationaction_killprocess, encoded="urn:NSConfig")

class unsetaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationaction_killprocessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationaction_deletefiles:
    def __init__(self):
        self._name = None
        return
unsetaaapreauthenticationaction_deletefiles.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationaction_deletefiles"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationaction_deletefiles, encoded="urn:NSConfig")

class unsetaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationaction_deletefilesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class getaaapreauthenticationaction:
    def __init__(self):
        self._name = None
        return
getaaapreauthenticationaction.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaapreauthenticationaction, encoded="urn:NSConfig")

class getaaapreauthenticationactionResponse:
    def __init__(self):
        self._return = None
        return
getaaapreauthenticationactionResponse.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationactionResponse"), ofwhat=[ns0.getaaapreauthenticationactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaapreauthenticationactionResponse, encoded="urn:NSConfig")

class addaaapreauthenticationpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addaaapreauthenticationpolicy.typecode = Struct(pname=("urn:NSConfig","addaaapreauthenticationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaapreauthenticationpolicy, encoded="urn:NSConfig")

class addaaapreauthenticationpolicyResponse:
    def __init__(self):
        self._return = None
        return
addaaapreauthenticationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addaaapreauthenticationpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addaaapreauthenticationpolicyResponse, encoded="urn:NSConfig")

class rmaaapreauthenticationpolicy:
    def __init__(self):
        self._name = None
        return
rmaaapreauthenticationpolicy.typecode = Struct(pname=("urn:NSConfig","rmaaapreauthenticationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaapreauthenticationpolicy, encoded="urn:NSConfig")

class rmaaapreauthenticationpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmaaapreauthenticationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmaaapreauthenticationpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmaaapreauthenticationpolicyResponse, encoded="urn:NSConfig")

class setaaapreauthenticationpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setaaapreauthenticationpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationpolicy_rule, encoded="urn:NSConfig")

class setaaapreauthenticationpolicyResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationpolicyResponse, encoded="urn:NSConfig")

class setaaapreauthenticationpolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setaaapreauthenticationpolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationpolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationpolicy_reqaction, encoded="urn:NSConfig")

class setaaapreauthenticationpolicyResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationpolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationpolicyResponse, encoded="urn:NSConfig")

class getaaapreauthenticationpolicy:
    def __init__(self):
        self._name = None
        return
getaaapreauthenticationpolicy.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaapreauthenticationpolicy, encoded="urn:NSConfig")

class getaaapreauthenticationpolicyResponse:
    def __init__(self):
        self._return = None
        return
getaaapreauthenticationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationpolicyResponse"), ofwhat=[ns0.getaaapreauthenticationpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaapreauthenticationpolicyResponse, encoded="urn:NSConfig")

class setaaapreauthenticationparameter_preauthenticationaction:
    def __init__(self):
        self._preauthenticationaction = None
        return
setaaapreauthenticationparameter_preauthenticationaction.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_preauthenticationaction"), ofwhat=[ns0.allowdenyEnum_Def(pname="preauthenticationaction", aname="_preauthenticationaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameter_preauthenticationaction, encoded="urn:NSConfig")

class setaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_preauthenticationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class setaaapreauthenticationparameter_rule:
    def __init__(self):
        self._rule = None
        return
setaaapreauthenticationparameter_rule.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_rule"), ofwhat=[ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameter_rule, encoded="urn:NSConfig")

class setaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class setaaapreauthenticationparameter_killprocess:
    def __init__(self):
        self._killprocess = None
        return
setaaapreauthenticationparameter_killprocess.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_killprocess"), ofwhat=[ZSI.TC.String(pname="killprocess", aname="_killprocess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameter_killprocess, encoded="urn:NSConfig")

class setaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_killprocessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class setaaapreauthenticationparameter_deletefiles:
    def __init__(self):
        self._deletefiles = None
        return
setaaapreauthenticationparameter_deletefiles.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_deletefiles"), ofwhat=[ZSI.TC.String(pname="deletefiles", aname="_deletefiles", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameter_deletefiles, encoded="urn:NSConfig")

class setaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
setaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","setaaapreauthenticationparameter_deletefilesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameter_rule:
    def __init__(self):
        return
unsetaaapreauthenticationparameter_rule.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_rule"), ofwhat=[], pyclass=unsetaaapreauthenticationparameter_rule, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameter_preauthenticationaction:
    def __init__(self):
        return
unsetaaapreauthenticationparameter_preauthenticationaction.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_preauthenticationaction"), ofwhat=[], pyclass=unsetaaapreauthenticationparameter_preauthenticationaction, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_preauthenticationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameter_killprocess:
    def __init__(self):
        return
unsetaaapreauthenticationparameter_killprocess.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_killprocess"), ofwhat=[], pyclass=unsetaaapreauthenticationparameter_killprocess, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_killprocessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameter_deletefiles:
    def __init__(self):
        return
unsetaaapreauthenticationparameter_deletefiles.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_deletefiles"), ofwhat=[], pyclass=unsetaaapreauthenticationparameter_deletefiles, encoded="urn:NSConfig")

class unsetaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetaaapreauthenticationparameter_deletefilesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class getaaapreauthenticationparameter:
    def __init__(self):
        return
getaaapreauthenticationparameter.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationparameter"), ofwhat=[], pyclass=getaaapreauthenticationparameter, encoded="urn:NSConfig")

class getaaapreauthenticationparameterResponse:
    def __init__(self):
        self._return = None
        return
getaaapreauthenticationparameterResponse.typecode = Struct(pname=("urn:NSConfig","getaaapreauthenticationparameterResponse"), ofwhat=[ns0.getaaapreauthenticationparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaapreauthenticationparameterResponse, encoded="urn:NSConfig")

class bindaaaglobal_policy:
    def __init__(self):
        self._policy = None
        self._priority = None
        return
bindaaaglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindaaaglobal_policy"), ofwhat=[ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaaglobal_policy, encoded="urn:NSConfig")

class bindaaaglobalResponse:
    def __init__(self):
        self._return = None
        return
bindaaaglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindaaaglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindaaaglobalResponse, encoded="urn:NSConfig")

class unbindaaaglobal_policy:
    def __init__(self):
        self._policy = None
        return
unbindaaaglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindaaaglobal_policy"), ofwhat=[ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaaglobal_policy, encoded="urn:NSConfig")

class unbindaaaglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindaaaglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindaaaglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindaaaglobalResponse, encoded="urn:NSConfig")

class getaaaglobal:
    def __init__(self):
        return
getaaaglobal.typecode = Struct(pname=("urn:NSConfig","getaaaglobal"), ofwhat=[], pyclass=getaaaglobal, encoded="urn:NSConfig")

class getaaaglobalResponse:
    def __init__(self):
        self._return = None
        return
getaaaglobalResponse.typecode = Struct(pname=("urn:NSConfig","getaaaglobalResponse"), ofwhat=[ns0.getaaaglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getaaaglobalResponse, encoded="urn:NSConfig")

class addappfwfieldtype:
    def __init__(self):
        self._name = None
        self._regex = None
        self._priority = None
        self._comment = None
        return
addappfwfieldtype.typecode = Struct(pname=("urn:NSConfig","addappfwfieldtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regex", aname="_regex", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwfieldtype, encoded="urn:NSConfig")

class addappfwfieldtypeResponse:
    def __init__(self):
        self._return = None
        return
addappfwfieldtypeResponse.typecode = Struct(pname=("urn:NSConfig","addappfwfieldtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwfieldtypeResponse, encoded="urn:NSConfig")

class rmappfwfieldtype:
    def __init__(self):
        self._name = None
        return
rmappfwfieldtype.typecode = Struct(pname=("urn:NSConfig","rmappfwfieldtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwfieldtype, encoded="urn:NSConfig")

class rmappfwfieldtypeResponse:
    def __init__(self):
        self._return = None
        return
rmappfwfieldtypeResponse.typecode = Struct(pname=("urn:NSConfig","rmappfwfieldtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwfieldtypeResponse, encoded="urn:NSConfig")

class setappfwfieldtype_regex:
    def __init__(self):
        self._name = None
        self._regex = None
        self._priority = None
        self._comment = None
        return
setappfwfieldtype_regex.typecode = Struct(pname=("urn:NSConfig","setappfwfieldtype_regex"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regex", aname="_regex", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwfieldtype_regex, encoded="urn:NSConfig")

class setappfwfieldtypeResponse:
    def __init__(self):
        self._return = None
        return
setappfwfieldtypeResponse.typecode = Struct(pname=("urn:NSConfig","setappfwfieldtype_regexResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwfieldtypeResponse, encoded="urn:NSConfig")

class getappfwfieldtype:
    def __init__(self):
        self._name = None
        return
getappfwfieldtype.typecode = Struct(pname=("urn:NSConfig","getappfwfieldtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwfieldtype, encoded="urn:NSConfig")

class getappfwfieldtypeResponse:
    def __init__(self):
        self._return = None
        return
getappfwfieldtypeResponse.typecode = Struct(pname=("urn:NSConfig","getappfwfieldtypeResponse"), ofwhat=[ns0.getappfwfieldtypeResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwfieldtypeResponse, encoded="urn:NSConfig")

class setappfwsettings_sessiontimeout:
    def __init__(self):
        self._sessiontimeout = None
        return
setappfwsettings_sessiontimeout.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_sessiontimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="sessiontimeout", aname="_sessiontimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettings_sessiontimeout, encoded="urn:NSConfig")

class setappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_sessiontimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettingsResponse, encoded="urn:NSConfig")

class setappfwsettings_sessioncookie:
    def __init__(self):
        self._sessioncookiename = None
        return
setappfwsettings_sessioncookie.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_sessioncookie"), ofwhat=[ZSI.TC.String(pname="sessioncookiename", aname="_sessioncookiename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettings_sessioncookie, encoded="urn:NSConfig")

class setappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_sessioncookieResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettingsResponse, encoded="urn:NSConfig")

class setappfwsettings_clientiploggingheader:
    def __init__(self):
        self._clientiploggingheader = None
        return
setappfwsettings_clientiploggingheader.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_clientiploggingheader"), ofwhat=[ZSI.TC.String(pname="clientiploggingheader", aname="_clientiploggingheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettings_clientiploggingheader, encoded="urn:NSConfig")

class setappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwsettings_clientiploggingheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwsettingsResponse, encoded="urn:NSConfig")

class unsetappfwsettings_sessiontimeout:
    def __init__(self):
        return
unsetappfwsettings_sessiontimeout.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_sessiontimeout"), ofwhat=[], pyclass=unsetappfwsettings_sessiontimeout, encoded="urn:NSConfig")

class unsetappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_sessiontimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwsettingsResponse, encoded="urn:NSConfig")

class unsetappfwsettings_sessioncookiename:
    def __init__(self):
        return
unsetappfwsettings_sessioncookiename.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_sessioncookiename"), ofwhat=[], pyclass=unsetappfwsettings_sessioncookiename, encoded="urn:NSConfig")

class unsetappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_sessioncookienameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwsettingsResponse, encoded="urn:NSConfig")

class unsetappfwsettings_clientiploggingheader:
    def __init__(self):
        return
unsetappfwsettings_clientiploggingheader.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_clientiploggingheader"), ofwhat=[], pyclass=unsetappfwsettings_clientiploggingheader, encoded="urn:NSConfig")

class unsetappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwsettings_clientiploggingheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwsettingsResponse, encoded="urn:NSConfig")

class getappfwsettings:
    def __init__(self):
        return
getappfwsettings.typecode = Struct(pname=("urn:NSConfig","getappfwsettings"), ofwhat=[], pyclass=getappfwsettings, encoded="urn:NSConfig")

class getappfwsettingsResponse:
    def __init__(self):
        self._return = None
        return
getappfwsettingsResponse.typecode = Struct(pname=("urn:NSConfig","getappfwsettingsResponse"), ofwhat=[ns0.getappfwsettingsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwsettingsResponse, encoded="urn:NSConfig")

class addappfwprofile:
    def __init__(self):
        self._name = None
        self._defaults = None
        return
addappfwprofile.typecode = Struct(pname=("urn:NSConfig","addappfwprofile"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecprofiledefaultEnum_Def(pname="defaults", aname="_defaults", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwprofile, encoded="urn:NSConfig")

class addappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
addappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","addappfwprofileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwprofileResponse, encoded="urn:NSConfig")

class rmappfwprofile:
    def __init__(self):
        self._name = None
        return
rmappfwprofile.typecode = Struct(pname=("urn:NSConfig","rmappfwprofile"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwprofile, encoded="urn:NSConfig")

class rmappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
rmappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","rmappfwprofileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_starturlaction:
    def __init__(self):
        self._name = None
        self._starturlaction = None
        return
setappfwprofile_starturlaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_starturlaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="starturlaction", aname="_starturlaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_starturlaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_starturlactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_starturlclosure:
    def __init__(self):
        self._name = None
        self._starturlclosure = None
        return
setappfwprofile_starturlclosure.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_starturlclosure"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="starturlclosure", aname="_starturlclosure", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_starturlclosure, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_starturlclosureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_denyurlaction:
    def __init__(self):
        self._name = None
        self._denyurlaction = None
        return
setappfwprofile_denyurlaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_denyurlaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositioncommerceEnum_Def(pname="denyurlaction", aname="_denyurlaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_denyurlaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_denyurlactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_cookieconsistencyaction:
    def __init__(self):
        self._name = None
        self._cookieconsistencyaction = None
        return
setappfwprofile_cookieconsistencyaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_cookieconsistencyaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="cookieconsistencyaction", aname="_cookieconsistencyaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_cookieconsistencyaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_cookieconsistencyactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_fieldconsistencyaction:
    def __init__(self):
        self._name = None
        self._fieldconsistencyaction = None
        return
setappfwprofile_fieldconsistencyaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_fieldconsistencyaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="fieldconsistencyaction", aname="_fieldconsistencyaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_fieldconsistencyaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_fieldconsistencyactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_crosssitescriptingaction:
    def __init__(self):
        self._name = None
        self._crosssitescriptingaction = None
        return
setappfwprofile_crosssitescriptingaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="crosssitescriptingaction", aname="_crosssitescriptingaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_crosssitescriptingaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_crosssitescriptingtransformunsafehtml:
    def __init__(self):
        self._name = None
        self._crosssitescriptingtransformunsafehtml = None
        return
setappfwprofile_crosssitescriptingtransformunsafehtml.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingtransformunsafehtml"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="crosssitescriptingtransformunsafehtml", aname="_crosssitescriptingtransformunsafehtml", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_crosssitescriptingtransformunsafehtml, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingtransformunsafehtmlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_crosssitescriptingcheckcompleteurls:
    def __init__(self):
        self._name = None
        self._crosssitescriptingcheckcompleteurls = None
        return
setappfwprofile_crosssitescriptingcheckcompleteurls.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingcheckcompleteurls"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="crosssitescriptingcheckcompleteurls", aname="_crosssitescriptingcheckcompleteurls", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_crosssitescriptingcheckcompleteurls, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_crosssitescriptingcheckcompleteurlsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_sqlinjectionaction:
    def __init__(self):
        self._name = None
        self._sqlinjectionaction = None
        return
setappfwprofile_sqlinjectionaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectionaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="sqlinjectionaction", aname="_sqlinjectionaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_sqlinjectionaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectionactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_sqlinjectiontransformspecialchars:
    def __init__(self):
        self._name = None
        self._sqlinjectiontransformspecialchars = None
        return
setappfwprofile_sqlinjectiontransformspecialchars.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectiontransformspecialchars"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sqlinjectiontransformspecialchars", aname="_sqlinjectiontransformspecialchars", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_sqlinjectiontransformspecialchars, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectiontransformspecialcharsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars:
    def __init__(self):
        self._name = None
        self._sqlinjectiononlycheckfieldswithsqlchars = None
        return
setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sqlinjectiononlycheckfieldswithsqlchars", aname="_sqlinjectiononlycheckfieldswithsqlchars", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_sqlinjectiononlycheckfieldswithsqlchars, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectiononlycheckfieldswithsqlcharsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_fieldformataction:
    def __init__(self):
        self._name = None
        self._fieldformataction = None
        return
setappfwprofile_fieldformataction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_fieldformataction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionEnum_Def(pname="fieldformataction", aname="_fieldformataction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_fieldformataction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_fieldformatactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_defaultfieldformattype:
    def __init__(self):
        self._name = None
        self._defaultfieldformattype = None
        return
setappfwprofile_defaultfieldformattype.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformattype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="defaultfieldformattype", aname="_defaultfieldformattype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_defaultfieldformattype, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformattypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_defaultfieldformatminlength:
    def __init__(self):
        self._name = None
        self._defaultfieldformatminlength = None
        return
setappfwprofile_defaultfieldformatminlength.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformatminlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="defaultfieldformatminlength", aname="_defaultfieldformatminlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_defaultfieldformatminlength, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformatminlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_defaultfieldformatmaxlength:
    def __init__(self):
        self._name = None
        self._defaultfieldformatmaxlength = None
        return
setappfwprofile_defaultfieldformatmaxlength.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformatmaxlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="defaultfieldformatmaxlength", aname="_defaultfieldformatmaxlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_defaultfieldformatmaxlength, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultfieldformatmaxlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_bufferoverflowaction:
    def __init__(self):
        self._name = None
        self._bufferoverflowaction = None
        return
setappfwprofile_bufferoverflowaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositioncommerceEnum_Def(pname="bufferoverflowaction", aname="_bufferoverflowaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_bufferoverflowaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_bufferoverflowmaxurllength:
    def __init__(self):
        self._name = None
        self._bufferoverflowmaxurllength = None
        return
setappfwprofile_bufferoverflowmaxurllength.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxurllength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxurllength", aname="_bufferoverflowmaxurllength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_bufferoverflowmaxurllength, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxurllengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_bufferoverflowmaxheaderlength:
    def __init__(self):
        self._name = None
        self._bufferoverflowmaxheaderlength = None
        return
setappfwprofile_bufferoverflowmaxheaderlength.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxheaderlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxheaderlength", aname="_bufferoverflowmaxheaderlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_bufferoverflowmaxheaderlength, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxheaderlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_bufferoverflowmaxcookielength:
    def __init__(self):
        self._name = None
        self._bufferoverflowmaxcookielength = None
        return
setappfwprofile_bufferoverflowmaxcookielength.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxcookielength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxcookielength", aname="_bufferoverflowmaxcookielength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_bufferoverflowmaxcookielength, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_bufferoverflowmaxcookielengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_creditcardaction:
    def __init__(self):
        self._name = None
        self._creditcardaction = None
        return
setappfwprofile_creditcardaction.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositioncommerceEnum_Def(pname="creditcardaction", aname="_creditcardaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_creditcardaction, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_creditcard:
    def __init__(self):
        self._name = None
        self._creditcard = None
        return
setappfwprofile_creditcard.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcard"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecsafecommercecardtypesEnum_Def(pname="creditcard", aname="_creditcard", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_creditcard, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_creditcardmaxallowed:
    def __init__(self):
        self._name = None
        self._creditcardmaxallowed = None
        return
setappfwprofile_creditcardmaxallowed.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardmaxallowed"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="creditcardmaxallowed", aname="_creditcardmaxallowed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_creditcardmaxallowed, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardmaxallowedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_creditcardxout:
    def __init__(self):
        self._name = None
        self._creditcardxout = None
        return
setappfwprofile_creditcardxout.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardxout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="creditcardxout", aname="_creditcardxout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_creditcardxout, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_creditcardxoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_errorurl:
    def __init__(self):
        self._name = None
        self._errorurl = None
        return
setappfwprofile_errorurl.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_errorurl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="errorurl", aname="_errorurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_errorurl, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_errorurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_stripcomments:
    def __init__(self):
        self._name = None
        self._stripcomments = None
        return
setappfwprofile_stripcomments.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_stripcomments"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="stripcomments", aname="_stripcomments", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_stripcomments, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_stripcommentsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_defaultcharset:
    def __init__(self):
        self._name = None
        self._defaultcharset = None
        return
setappfwprofile_defaultcharset.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultcharset"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="defaultcharset", aname="_defaultcharset", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_defaultcharset, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_defaultcharsetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_postbodylimit:
    def __init__(self):
        self._name = None
        self._postbodylimit = None
        return
setappfwprofile_postbodylimit.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_postbodylimit"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="postbodylimit", aname="_postbodylimit", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_postbodylimit, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_postbodylimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_canonicalizehtmlresponse:
    def __init__(self):
        self._name = None
        self._canonicalizehtmlresponse = None
        return
setappfwprofile_canonicalizehtmlresponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_canonicalizehtmlresponse"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="canonicalizehtmlresponse", aname="_canonicalizehtmlresponse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_canonicalizehtmlresponse, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_canonicalizehtmlresponseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_enableformtagging:
    def __init__(self):
        self._name = None
        self._enableformtagging = None
        return
setappfwprofile_enableformtagging.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_enableformtagging"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="enableformtagging", aname="_enableformtagging", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_enableformtagging, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_enableformtaggingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_excludefileuploadfromchecks:
    def __init__(self):
        self._name = None
        self._excludefileuploadfromchecks = None
        return
setappfwprofile_excludefileuploadfromchecks.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_excludefileuploadfromchecks"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="excludefileuploadfromchecks", aname="_excludefileuploadfromchecks", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_excludefileuploadfromchecks, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_excludefileuploadfromchecksResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class setappfwprofile_sqlinjectionparsecomments:
    def __init__(self):
        self._name = None
        self._sqlinjectionparsecomments = None
        return
setappfwprofile_sqlinjectionparsecomments.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectionparsecomments"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecsqlinjectionparsecommentsEnum_Def(pname="sqlinjectionparsecomments", aname="_sqlinjectionparsecomments", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofile_sqlinjectionparsecomments, encoded="urn:NSConfig")

class setappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
setappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","setappfwprofile_sqlinjectionparsecommentsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_starturlaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_starturlaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_starturlaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_starturlaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_starturlactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_starturlclosure:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_starturlclosure.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_starturlclosure"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_starturlclosure, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_starturlclosureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_denyurlaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_denyurlaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_denyurlaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_denyurlaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_denyurlactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_cookieconsistencyaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_cookieconsistencyaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_cookieconsistencyaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_cookieconsistencyaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_cookieconsistencyactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_fieldconsistencyaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_fieldconsistencyaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_fieldconsistencyaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_fieldconsistencyaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_fieldconsistencyactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_crosssitescriptingaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_crosssitescriptingaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_crosssitescriptingaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_crosssitescriptingtransformunsafehtml:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_crosssitescriptingtransformunsafehtml.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingtransformunsafehtml"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_crosssitescriptingtransformunsafehtml, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingtransformunsafehtmlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_crosssitescriptingcheckcompleteurls:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_crosssitescriptingcheckcompleteurls.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingcheckcompleteurls"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_crosssitescriptingcheckcompleteurls, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_crosssitescriptingcheckcompleteurlsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_sqlinjectionaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_sqlinjectionaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectionaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_sqlinjectionaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectionactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_sqlinjectiontransformspecialchars:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_sqlinjectiontransformspecialchars.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectiontransformspecialchars"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_sqlinjectiontransformspecialchars, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectiontransformspecialcharsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlchars, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectiononlycheckfieldswithsqlcharsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_fieldformataction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_fieldformataction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_fieldformataction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_fieldformataction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_fieldformatactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_defaultfieldformattype:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_defaultfieldformattype.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformattype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_defaultfieldformattype, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformattypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_defaultfieldformatminlength:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_defaultfieldformatminlength.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformatminlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_defaultfieldformatminlength, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformatminlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_defaultfieldformatmaxlength:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_defaultfieldformatmaxlength.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformatmaxlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_defaultfieldformatmaxlength, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultfieldformatmaxlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_bufferoverflowaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_bufferoverflowaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_bufferoverflowaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_bufferoverflowmaxurllength:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_bufferoverflowmaxurllength.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxurllength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_bufferoverflowmaxurllength, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxurllengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_bufferoverflowmaxheaderlength:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_bufferoverflowmaxheaderlength.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxheaderlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_bufferoverflowmaxheaderlength, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxheaderlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_bufferoverflowmaxcookielength:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_bufferoverflowmaxcookielength.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxcookielength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_bufferoverflowmaxcookielength, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_bufferoverflowmaxcookielengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_creditcardaction:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_creditcardaction.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_creditcardaction, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_creditcard:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_creditcard.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcard"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_creditcard, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_creditcardmaxallowed:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_creditcardmaxallowed.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardmaxallowed"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_creditcardmaxallowed, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardmaxallowedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_creditcardxout:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_creditcardxout.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardxout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_creditcardxout, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_creditcardxoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_errorurl:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_errorurl.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_errorurl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_errorurl, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_errorurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_stripcomments:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_stripcomments.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_stripcomments"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_stripcomments, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_stripcommentsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_defaultcharset:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_defaultcharset.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultcharset"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_defaultcharset, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_defaultcharsetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_postbodylimit:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_postbodylimit.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_postbodylimit"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_postbodylimit, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_postbodylimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_canonicalizehtmlresponse:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_canonicalizehtmlresponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_canonicalizehtmlresponse"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_canonicalizehtmlresponse, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_canonicalizehtmlresponseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_enableformtagging:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_enableformtagging.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_enableformtagging"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_enableformtagging, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_enableformtaggingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_excludefileuploadfromchecks:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_excludefileuploadfromchecks.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_excludefileuploadfromchecks"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_excludefileuploadfromchecks, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_excludefileuploadfromchecksResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class unsetappfwprofile_sqlinjectionparsecomments:
    def __init__(self):
        self._name = None
        return
unsetappfwprofile_sqlinjectionparsecomments.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectionparsecomments"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofile_sqlinjectionparsecomments, encoded="urn:NSConfig")

class unsetappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwprofile_sqlinjectionparsecommentsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_starturl:
    def __init__(self):
        self._name = None
        self._starturl = None
        return
bindappfwprofile_starturl.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_starturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="starturl", aname="_starturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_starturl, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_starturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_denyurl:
    def __init__(self):
        self._name = None
        self._denyurl = None
        return
bindappfwprofile_denyurl.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_denyurl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="denyurl", aname="_denyurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_denyurl, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_denyurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_fieldconsistency:
    def __init__(self):
        self._name = None
        self._fieldconsistency = None
        self._formactionurl = None
        self._isregex = None
        return
bindappfwprofile_fieldconsistency.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_fieldconsistency"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldconsistency", aname="_fieldconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl", aname="_formactionurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex", aname="_isregex", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_fieldconsistency, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_fieldconsistencyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_cookieconsistency:
    def __init__(self):
        self._name = None
        self._cookieconsistency = None
        self._isregex2 = None
        return
bindappfwprofile_cookieconsistency.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_cookieconsistency"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookieconsistency", aname="_cookieconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex2", aname="_isregex2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_cookieconsistency, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_cookieconsistencyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_sqlinjection:
    def __init__(self):
        self._name = None
        self._sqlinjection = None
        self._formactionurl2 = None
        self._isregex3 = None
        return
bindappfwprofile_sqlinjection.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_sqlinjection"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sqlinjection", aname="_sqlinjection", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl2", aname="_formactionurl2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex3", aname="_isregex3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_sqlinjection, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_sqlinjectionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_crosssitescripting:
    def __init__(self):
        self._name = None
        self._crosssitescripting = None
        self._formactionurl3 = None
        self._isregex4 = None
        return
bindappfwprofile_crosssitescripting.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_crosssitescripting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="crosssitescripting", aname="_crosssitescripting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl3", aname="_formactionurl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex4", aname="_isregex4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_crosssitescripting, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_crosssitescriptingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_fieldformat:
    def __init__(self):
        self._name = None
        self._fieldformat = None
        self._formactionurl4 = None
        self._fieldtype = None
        self._fieldformatminlength = None
        self._fieldformatmaxlength = None
        self._isregex5 = None
        return
bindappfwprofile_fieldformat.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_fieldformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldformat", aname="_fieldformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl4", aname="_formactionurl4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldtype", aname="_fieldtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldformatminlength", aname="_fieldformatminlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldformatmaxlength", aname="_fieldformatmaxlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex5", aname="_isregex5", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_fieldformat, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_fieldformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_safeobject:
    def __init__(self):
        self._name = None
        self._safeobject = None
        self._expression = None
        self._maxmatchlength = None
        self._actioN = None
        return
bindappfwprofile_safeobject.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_safeobject"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="safeobject", aname="_safeobject", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="expression", aname="_expression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxmatchlength", aname="_maxmatchlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appsecdispositionobjectexpressionEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_safeobject, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_safeobjectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_comment:
    def __init__(self):
        self._name = None
        self._comment = None
        return
bindappfwprofile_comment.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_comment"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_comment, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_commentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class bindappfwprofile_state:
    def __init__(self):
        self._name = None
        self._state = None
        return
bindappfwprofile_state.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_state"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofile_state, encoded="urn:NSConfig")

class bindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
bindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwprofile_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_starturl:
    def __init__(self):
        self._name = None
        self._starturl = None
        return
unbindappfwprofile_starturl.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_starturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="starturl", aname="_starturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_starturl, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_starturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_denyurl:
    def __init__(self):
        self._name = None
        self._denyurl = None
        return
unbindappfwprofile_denyurl.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_denyurl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="denyurl", aname="_denyurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_denyurl, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_denyurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_fieldconsistency:
    def __init__(self):
        self._name = None
        self._fieldconsistency = None
        self._formactionurl = None
        return
unbindappfwprofile_fieldconsistency.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_fieldconsistency"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldconsistency", aname="_fieldconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl", aname="_formactionurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_fieldconsistency, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_fieldconsistencyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_cookieconsistency:
    def __init__(self):
        self._name = None
        self._cookieconsistency = None
        return
unbindappfwprofile_cookieconsistency.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_cookieconsistency"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookieconsistency", aname="_cookieconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_cookieconsistency, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_cookieconsistencyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_sqlinjection:
    def __init__(self):
        self._name = None
        self._sqlinjection = None
        self._formactionurl2 = None
        return
unbindappfwprofile_sqlinjection.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_sqlinjection"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sqlinjection", aname="_sqlinjection", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl2", aname="_formactionurl2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_sqlinjection, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_sqlinjectionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_crosssitescripting:
    def __init__(self):
        self._name = None
        self._crosssitescripting = None
        self._formactionurl3 = None
        return
unbindappfwprofile_crosssitescripting.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_crosssitescripting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="crosssitescripting", aname="_crosssitescripting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl3", aname="_formactionurl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_crosssitescripting, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_crosssitescriptingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_fieldformat:
    def __init__(self):
        self._name = None
        self._fieldformat = None
        self._formactionurl4 = None
        return
unbindappfwprofile_fieldformat.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_fieldformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldformat", aname="_fieldformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl4", aname="_formactionurl4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_fieldformat, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_fieldformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class unbindappfwprofile_safeobject:
    def __init__(self):
        self._name = None
        self._safeobject = None
        return
unbindappfwprofile_safeobject.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_safeobject"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="safeobject", aname="_safeobject", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofile_safeobject, encoded="urn:NSConfig")

class unbindappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwprofile_safeobjectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwprofileResponse, encoded="urn:NSConfig")

class getappfwprofile:
    def __init__(self):
        self._name = None
        return
getappfwprofile.typecode = Struct(pname=("urn:NSConfig","getappfwprofile"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwprofile, encoded="urn:NSConfig")

class getappfwprofileResponse:
    def __init__(self):
        self._return = None
        return
getappfwprofileResponse.typecode = Struct(pname=("urn:NSConfig","getappfwprofileResponse"), ofwhat=[ns0.getappfwprofileResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwprofileResponse, encoded="urn:NSConfig")

class addappfwpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._profilename = None
        return
addappfwpolicy.typecode = Struct(pname=("urn:NSConfig","addappfwpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwpolicy, encoded="urn:NSConfig")

class addappfwpolicyResponse:
    def __init__(self):
        self._return = None
        return
addappfwpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addappfwpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwpolicyResponse, encoded="urn:NSConfig")

class rmappfwpolicy:
    def __init__(self):
        self._name = None
        return
rmappfwpolicy.typecode = Struct(pname=("urn:NSConfig","rmappfwpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwpolicy, encoded="urn:NSConfig")

class rmappfwpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmappfwpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmappfwpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwpolicyResponse, encoded="urn:NSConfig")

class setappfwpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        self._profilename = None
        return
setappfwpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setappfwpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwpolicy_rule, encoded="urn:NSConfig")

class setappfwpolicyResponse:
    def __init__(self):
        self._return = None
        return
setappfwpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setappfwpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwpolicyResponse, encoded="urn:NSConfig")

class getappfwpolicy:
    def __init__(self):
        self._name = None
        return
getappfwpolicy.typecode = Struct(pname=("urn:NSConfig","getappfwpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwpolicy, encoded="urn:NSConfig")

class getappfwpolicyResponse:
    def __init__(self):
        self._return = None
        return
getappfwpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getappfwpolicyResponse"), ofwhat=[ns0.getappfwpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwpolicyResponse, encoded="urn:NSConfig")

class bindappfwglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._state = None
        return
bindappfwglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindappfwglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwglobal_policy, encoded="urn:NSConfig")

class bindappfwglobalResponse:
    def __init__(self):
        self._return = None
        return
bindappfwglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindappfwglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindappfwglobalResponse, encoded="urn:NSConfig")

class unbindappfwglobal_policy:
    def __init__(self):
        self._policyname = None
        return
unbindappfwglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindappfwglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwglobal_policy, encoded="urn:NSConfig")

class unbindappfwglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindappfwglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindappfwglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindappfwglobalResponse, encoded="urn:NSConfig")

class getappfwglobal:
    def __init__(self):
        return
getappfwglobal.typecode = Struct(pname=("urn:NSConfig","getappfwglobal"), ofwhat=[], pyclass=getappfwglobal, encoded="urn:NSConfig")

class getappfwglobalResponse:
    def __init__(self):
        self._return = None
        return
getappfwglobalResponse.typecode = Struct(pname=("urn:NSConfig","getappfwglobalResponse"), ofwhat=[ns0.getappfwglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwglobalResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_starturlminthreshold:
    def __init__(self):
        self._profilename = None
        self._starturlminthreshold = None
        return
setappfwlearningsettings_starturlminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_starturlminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="starturlminthreshold", aname="_starturlminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_starturlminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_starturlminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_starturlpercentthreshold:
    def __init__(self):
        self._profilename = None
        self._starturlpercentthreshold = None
        return
setappfwlearningsettings_starturlpercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_starturlpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="starturlpercentthreshold", aname="_starturlpercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_starturlpercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_starturlpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_cookieconsistencyminthreshold:
    def __init__(self):
        self._profilename = None
        self._cookieconsistencyminthreshold = None
        return
setappfwlearningsettings_cookieconsistencyminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_cookieconsistencyminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cookieconsistencyminthreshold", aname="_cookieconsistencyminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_cookieconsistencyminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_cookieconsistencyminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_cookieconsistencypercentthreshold:
    def __init__(self):
        self._profilename = None
        self._cookieconsistencypercentthreshold = None
        return
setappfwlearningsettings_cookieconsistencypercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_cookieconsistencypercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cookieconsistencypercentthreshold", aname="_cookieconsistencypercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_cookieconsistencypercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_cookieconsistencypercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_fieldconsistencyminthreshold:
    def __init__(self):
        self._profilename = None
        self._fieldconsistencyminthreshold = None
        return
setappfwlearningsettings_fieldconsistencyminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldconsistencyminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldconsistencyminthreshold", aname="_fieldconsistencyminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_fieldconsistencyminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldconsistencyminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_fieldconsistencypercentthreshold:
    def __init__(self):
        self._profilename = None
        self._fieldconsistencypercentthreshold = None
        return
setappfwlearningsettings_fieldconsistencypercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldconsistencypercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldconsistencypercentthreshold", aname="_fieldconsistencypercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_fieldconsistencypercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldconsistencypercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_crosssitescriptingminthreshold:
    def __init__(self):
        self._profilename = None
        self._crosssitescriptingminthreshold = None
        return
setappfwlearningsettings_crosssitescriptingminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_crosssitescriptingminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="crosssitescriptingminthreshold", aname="_crosssitescriptingminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_crosssitescriptingminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_crosssitescriptingminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_crosssitescriptingpercentthreshold:
    def __init__(self):
        self._profilename = None
        self._crosssitescriptingpercentthreshold = None
        return
setappfwlearningsettings_crosssitescriptingpercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_crosssitescriptingpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="crosssitescriptingpercentthreshold", aname="_crosssitescriptingpercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_crosssitescriptingpercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_crosssitescriptingpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_sqlinjectionminthreshold:
    def __init__(self):
        self._profilename = None
        self._sqlinjectionminthreshold = None
        return
setappfwlearningsettings_sqlinjectionminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_sqlinjectionminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sqlinjectionminthreshold", aname="_sqlinjectionminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_sqlinjectionminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_sqlinjectionminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_sqlinjectionpercentthreshold:
    def __init__(self):
        self._profilename = None
        self._sqlinjectionpercentthreshold = None
        return
setappfwlearningsettings_sqlinjectionpercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_sqlinjectionpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sqlinjectionpercentthreshold", aname="_sqlinjectionpercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_sqlinjectionpercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_sqlinjectionpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_fieldformatminthreshold:
    def __init__(self):
        self._profilename = None
        self._fieldformatminthreshold = None
        return
setappfwlearningsettings_fieldformatminthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldformatminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldformatminthreshold", aname="_fieldformatminthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_fieldformatminthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldformatminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class setappfwlearningsettings_fieldformatpercentthreshold:
    def __init__(self):
        self._profilename = None
        self._fieldformatpercentthreshold = None
        return
setappfwlearningsettings_fieldformatpercentthreshold.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldformatpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="fieldformatpercentthreshold", aname="_fieldformatpercentthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettings_fieldformatpercentthreshold, encoded="urn:NSConfig")

class setappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
setappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","setappfwlearningsettings_fieldformatpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_starturlminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_starturlminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_starturlminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_starturlminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_starturlminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_starturlpercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_starturlpercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_starturlpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_starturlpercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_starturlpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_cookieconsistencyminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_cookieconsistencyminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_cookieconsistencyminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_cookieconsistencyminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_cookieconsistencyminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_cookieconsistencypercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_cookieconsistencypercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_cookieconsistencypercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_cookieconsistencypercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_cookieconsistencypercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_fieldconsistencyminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_fieldconsistencyminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldconsistencyminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_fieldconsistencyminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldconsistencyminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_fieldconsistencypercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_fieldconsistencypercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldconsistencypercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_fieldconsistencypercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldconsistencypercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_crosssitescriptingminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_crosssitescriptingminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_crosssitescriptingminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_crosssitescriptingminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_crosssitescriptingminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_crosssitescriptingpercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_crosssitescriptingpercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_crosssitescriptingpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_crosssitescriptingpercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_crosssitescriptingpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_sqlinjectionminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_sqlinjectionminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_sqlinjectionminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_sqlinjectionminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_sqlinjectionminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_sqlinjectionpercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_sqlinjectionpercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_sqlinjectionpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_sqlinjectionpercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_sqlinjectionpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_fieldformatminthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_fieldformatminthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldformatminthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_fieldformatminthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldformatminthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class unsetappfwlearningsettings_fieldformatpercentthreshold:
    def __init__(self):
        self._profilename = None
        return
unsetappfwlearningsettings_fieldformatpercentthreshold.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldformatpercentthreshold"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettings_fieldformatpercentthreshold, encoded="urn:NSConfig")

class unsetappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwlearningsettings_fieldformatpercentthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwlearningsettingsResponse, encoded="urn:NSConfig")

class getappfwlearningsettings:
    def __init__(self):
        self._profilename = None
        return
getappfwlearningsettings.typecode = Struct(pname=("urn:NSConfig","getappfwlearningsettings"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwlearningsettings, encoded="urn:NSConfig")

class getappfwlearningsettingsResponse:
    def __init__(self):
        self._return = None
        return
getappfwlearningsettingsResponse.typecode = Struct(pname=("urn:NSConfig","getappfwlearningsettingsResponse"), ofwhat=[ns0.getappfwlearningsettingsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwlearningsettingsResponse, encoded="urn:NSConfig")

class rmappfwlearningdata:
    def __init__(self):
        self._profilename = None
        self._starturl = None
        self._cookieconsistency = None
        self._fieldconsistency = None
        self._formactionurl = None
        self._crosssitescripting = None
        self._formactionurl2 = None
        self._sqlinjection = None
        self._formactionurl3 = None
        self._fieldformat = None
        self._formactionurl4 = None
        return
rmappfwlearningdata.typecode = Struct(pname=("urn:NSConfig","rmappfwlearningdata"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="starturl", aname="_starturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookieconsistency", aname="_cookieconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldconsistency", aname="_fieldconsistency", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl", aname="_formactionurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="crosssitescripting", aname="_crosssitescripting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl2", aname="_formactionurl2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sqlinjection", aname="_sqlinjection", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl3", aname="_formactionurl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fieldformat", aname="_fieldformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="formactionurl4", aname="_formactionurl4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwlearningdata, encoded="urn:NSConfig")

class rmappfwlearningdataResponse:
    def __init__(self):
        self._return = None
        return
rmappfwlearningdataResponse.typecode = Struct(pname=("urn:NSConfig","rmappfwlearningdataResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwlearningdataResponse, encoded="urn:NSConfig")

class getappfwlearningdata:
    def __init__(self):
        self._profilename = None
        self._securitycheck = None
        return
getappfwlearningdata.typecode = Struct(pname=("urn:NSConfig","getappfwlearningdata"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="securitycheck", aname="_securitycheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwlearningdata, encoded="urn:NSConfig")

class getappfwlearningdataResponse:
    def __init__(self):
        self._return = None
        return
getappfwlearningdataResponse.typecode = Struct(pname=("urn:NSConfig","getappfwlearningdataResponse"), ofwhat=[ns0.getappfwlearningdataResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwlearningdataResponse, encoded="urn:NSConfig")

class addappfwconfidfield:
    def __init__(self):
        self._fieldname = None
        self._url = None
        self._isregex = None
        self._comment = None
        self._state = None
        return
addappfwconfidfield.typecode = Struct(pname=("urn:NSConfig","addappfwconfidfield"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.regexnotregexEnum_Def(pname="isregex", aname="_isregex", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwconfidfield, encoded="urn:NSConfig")

class addappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
addappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","addappfwconfidfieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addappfwconfidfieldResponse, encoded="urn:NSConfig")

class rmappfwconfidfield:
    def __init__(self):
        self._fieldname = None
        self._url = None
        return
rmappfwconfidfield.typecode = Struct(pname=("urn:NSConfig","rmappfwconfidfield"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwconfidfield, encoded="urn:NSConfig")

class rmappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
rmappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","rmappfwconfidfieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmappfwconfidfieldResponse, encoded="urn:NSConfig")

class setappfwconfidfield_comment:
    def __init__(self):
        self._fieldname = None
        self._url = None
        self._comment = None
        return
setappfwconfidfield_comment.typecode = Struct(pname=("urn:NSConfig","setappfwconfidfield_comment"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="comment", aname="_comment", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwconfidfield_comment, encoded="urn:NSConfig")

class setappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
setappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","setappfwconfidfield_commentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwconfidfieldResponse, encoded="urn:NSConfig")

class setappfwconfidfield_state:
    def __init__(self):
        self._fieldname = None
        self._url = None
        self._state = None
        return
setappfwconfidfield_state.typecode = Struct(pname=("urn:NSConfig","setappfwconfidfield_state"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwconfidfield_state, encoded="urn:NSConfig")

class setappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
setappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","setappfwconfidfield_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setappfwconfidfieldResponse, encoded="urn:NSConfig")

class unsetappfwconfidfield_comment:
    def __init__(self):
        self._fieldname = None
        self._url = None
        return
unsetappfwconfidfield_comment.typecode = Struct(pname=("urn:NSConfig","unsetappfwconfidfield_comment"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwconfidfield_comment, encoded="urn:NSConfig")

class unsetappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwconfidfield_commentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwconfidfieldResponse, encoded="urn:NSConfig")

class unsetappfwconfidfield_state:
    def __init__(self):
        self._fieldname = None
        self._url = None
        return
unsetappfwconfidfield_state.typecode = Struct(pname=("urn:NSConfig","unsetappfwconfidfield_state"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwconfidfield_state, encoded="urn:NSConfig")

class unsetappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
unsetappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","unsetappfwconfidfield_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetappfwconfidfieldResponse, encoded="urn:NSConfig")

class getappfwconfidfield:
    def __init__(self):
        self._fieldname = None
        self._url = None
        return
getappfwconfidfield.typecode = Struct(pname=("urn:NSConfig","getappfwconfidfield"), ofwhat=[ZSI.TC.String(pname="fieldname", aname="_fieldname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwconfidfield, encoded="urn:NSConfig")

class getappfwconfidfieldResponse:
    def __init__(self):
        self._return = None
        return
getappfwconfidfieldResponse.typecode = Struct(pname=("urn:NSConfig","getappfwconfidfieldResponse"), ofwhat=[ns0.getappfwconfidfieldResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getappfwconfidfieldResponse, encoded="urn:NSConfig")

class getauditmessages:
    def __init__(self):
        self._loglevel = None
        self._numofmesgs = None
        return
getauditmessages.typecode = Struct(pname=("urn:NSConfig","getauditmessages"), ofwhat=[ZSI.TC.String(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="numofmesgs", aname="_numofmesgs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditmessages, encoded="urn:NSConfig")

class getauditmessagesResponse:
    def __init__(self):
        self._return = None
        return
getauditmessagesResponse.typecode = Struct(pname=("urn:NSConfig","getauditmessagesResponse"), ofwhat=[ns0.getauditmessagesResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditmessagesResponse, encoded="urn:NSConfig")

class addauditsyslogaction:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._loglevel = None
        return
addauditsyslogaction.typecode = Struct(pname=("urn:NSConfig","addauditsyslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditsyslogaction, encoded="urn:NSConfig")

class addauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
addauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","addauditsyslogactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditsyslogactionResponse, encoded="urn:NSConfig")

class rmauditsyslogaction:
    def __init__(self):
        self._name = None
        return
rmauditsyslogaction.typecode = Struct(pname=("urn:NSConfig","rmauditsyslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditsyslogaction, encoded="urn:NSConfig")

class rmauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
rmauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauditsyslogactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauditsyslogaction_serverip.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_serverip, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_serverport:
    def __init__(self):
        self._name = None
        self._serverport = None
        return
setauditsyslogaction_serverport.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_serverport, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_loglevel:
    def __init__(self):
        self._name = None
        self._loglevel = None
        return
setauditsyslogaction_loglevel.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_loglevel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_loglevel, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_dateformat:
    def __init__(self):
        self._name = None
        self._dateformat = None
        return
setauditsyslogaction_dateformat.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_dateformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.dateformatEnum_Def(pname="dateformat", aname="_dateformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_dateformat, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_logfacility:
    def __init__(self):
        self._name = None
        self._logfacility = None
        return
setauditsyslogaction_logfacility.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_logfacility"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.syslogfacilityEnum_Def(pname="logfacility", aname="_logfacility", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_logfacility, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_tcp:
    def __init__(self):
        self._name = None
        self._tcp = None
        return
setauditsyslogaction_tcp.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_tcp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditlogstatusEnum_Def(pname="tcp", aname="_tcp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_tcp, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class setauditsyslogaction_timezone:
    def __init__(self):
        self._name = None
        self._timezone = None
        return
setauditsyslogaction_timezone.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_timezone"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditlogtimezoneEnum_Def(pname="timezone", aname="_timezone", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogaction_timezone, encoded="urn:NSConfig")

class setauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogaction_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_serverport:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_serverport, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_loglevel:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_loglevel.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_loglevel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_loglevel, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_dateformat:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_dateformat.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_dateformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_dateformat, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_logfacility:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_logfacility.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_logfacility"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_logfacility, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_tcp:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_tcp.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_tcp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_tcp, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class unsetauditsyslogaction_timezone:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogaction_timezone.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_timezone"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogaction_timezone, encoded="urn:NSConfig")

class unsetauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogaction_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogactionResponse, encoded="urn:NSConfig")

class getauditsyslogaction:
    def __init__(self):
        self._name = None
        return
getauditsyslogaction.typecode = Struct(pname=("urn:NSConfig","getauditsyslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditsyslogaction, encoded="urn:NSConfig")

class getauditsyslogactionResponse:
    def __init__(self):
        self._return = None
        return
getauditsyslogactionResponse.typecode = Struct(pname=("urn:NSConfig","getauditsyslogactionResponse"), ofwhat=[ns0.getauditsyslogactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditsyslogactionResponse, encoded="urn:NSConfig")

class addauditsyslogpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addauditsyslogpolicy.typecode = Struct(pname=("urn:NSConfig","addauditsyslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditsyslogpolicy, encoded="urn:NSConfig")

class addauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
addauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauditsyslogpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditsyslogpolicyResponse, encoded="urn:NSConfig")

class rmauditsyslogpolicy:
    def __init__(self):
        self._name = None
        return
rmauditsyslogpolicy.typecode = Struct(pname=("urn:NSConfig","rmauditsyslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditsyslogpolicy, encoded="urn:NSConfig")

class rmauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauditsyslogpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditsyslogpolicyResponse, encoded="urn:NSConfig")

class setauditsyslogpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauditsyslogpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauditsyslogpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogpolicy_rule, encoded="urn:NSConfig")

class setauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogpolicyResponse, encoded="urn:NSConfig")

class setauditsyslogpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setauditsyslogpolicy_action.typecode = Struct(pname=("urn:NSConfig","setauditsyslogpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogpolicy_action, encoded="urn:NSConfig")

class setauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogpolicyResponse, encoded="urn:NSConfig")

class unsetauditsyslogpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogpolicy_rule, encoded="urn:NSConfig")

class unsetauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogpolicyResponse, encoded="urn:NSConfig")

class unsetauditsyslogpolicy_action:
    def __init__(self):
        self._name = None
        return
unsetauditsyslogpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogpolicy_action, encoded="urn:NSConfig")

class unsetauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogpolicyResponse, encoded="urn:NSConfig")

class getauditsyslogpolicy:
    def __init__(self):
        self._name = None
        return
getauditsyslogpolicy.typecode = Struct(pname=("urn:NSConfig","getauditsyslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditsyslogpolicy, encoded="urn:NSConfig")

class getauditsyslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
getauditsyslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauditsyslogpolicyResponse"), ofwhat=[ns0.getauditsyslogpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditsyslogpolicyResponse, encoded="urn:NSConfig")

class setauditsyslogparams_serverip:
    def __init__(self):
        self._serverip = None
        return
setauditsyslogparams_serverip.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_serverip"), ofwhat=[ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_serverip, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_serverport:
    def __init__(self):
        self._serverport = None
        return
setauditsyslogparams_serverport.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_serverport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_serverport, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_dateformat:
    def __init__(self):
        self._dateformat = None
        return
setauditsyslogparams_dateformat.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_dateformat"), ofwhat=[ns0.dateformatEnum_Def(pname="dateformat", aname="_dateformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_dateformat, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_loglevel:
    def __init__(self):
        self._loglevel = None
        return
setauditsyslogparams_loglevel.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_loglevel"), ofwhat=[ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_loglevel, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_logfacility:
    def __init__(self):
        self._logfacility = None
        return
setauditsyslogparams_logfacility.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_logfacility"), ofwhat=[ns0.syslogfacilityEnum_Def(pname="logfacility", aname="_logfacility", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_logfacility, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_tcp:
    def __init__(self):
        self._tcp = None
        return
setauditsyslogparams_tcp.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_tcp"), ofwhat=[ns0.auditlogstatusEnum_Def(pname="tcp", aname="_tcp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_tcp, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class setauditsyslogparams_timezone:
    def __init__(self):
        self._timezone = None
        return
setauditsyslogparams_timezone.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_timezone"), ofwhat=[ns0.auditlogtimezoneEnum_Def(pname="timezone", aname="_timezone", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparams_timezone, encoded="urn:NSConfig")

class setauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditsyslogparams_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_serverip:
    def __init__(self):
        return
unsetauditsyslogparams_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_serverip"), ofwhat=[], pyclass=unsetauditsyslogparams_serverip, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_serverport:
    def __init__(self):
        return
unsetauditsyslogparams_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_serverport"), ofwhat=[], pyclass=unsetauditsyslogparams_serverport, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_loglevel:
    def __init__(self):
        return
unsetauditsyslogparams_loglevel.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_loglevel"), ofwhat=[], pyclass=unsetauditsyslogparams_loglevel, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_dateformat:
    def __init__(self):
        return
unsetauditsyslogparams_dateformat.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_dateformat"), ofwhat=[], pyclass=unsetauditsyslogparams_dateformat, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_logfacility:
    def __init__(self):
        return
unsetauditsyslogparams_logfacility.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_logfacility"), ofwhat=[], pyclass=unsetauditsyslogparams_logfacility, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_tcp:
    def __init__(self):
        return
unsetauditsyslogparams_tcp.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_tcp"), ofwhat=[], pyclass=unsetauditsyslogparams_tcp, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class unsetauditsyslogparams_timezone:
    def __init__(self):
        return
unsetauditsyslogparams_timezone.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_timezone"), ofwhat=[], pyclass=unsetauditsyslogparams_timezone, encoded="urn:NSConfig")

class unsetauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditsyslogparams_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditsyslogparamsResponse, encoded="urn:NSConfig")

class getauditsyslogparams:
    def __init__(self):
        return
getauditsyslogparams.typecode = Struct(pname=("urn:NSConfig","getauditsyslogparams"), ofwhat=[], pyclass=getauditsyslogparams, encoded="urn:NSConfig")

class getauditsyslogparamsResponse:
    def __init__(self):
        self._return = None
        return
getauditsyslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","getauditsyslogparamsResponse"), ofwhat=[ns0.getauditsyslogparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditsyslogparamsResponse, encoded="urn:NSConfig")

class addauditnslogaction:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._loglevel = None
        return
addauditnslogaction.typecode = Struct(pname=("urn:NSConfig","addauditnslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditnslogaction, encoded="urn:NSConfig")

class addauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
addauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","addauditnslogactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditnslogactionResponse, encoded="urn:NSConfig")

class rmauditnslogaction:
    def __init__(self):
        self._name = None
        return
rmauditnslogaction.typecode = Struct(pname=("urn:NSConfig","rmauditnslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditnslogaction, encoded="urn:NSConfig")

class rmauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
rmauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauditnslogactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauditnslogaction_serverip.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_serverip, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_serverport:
    def __init__(self):
        self._name = None
        self._serverport = None
        return
setauditnslogaction_serverport.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_serverport, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_loglevel:
    def __init__(self):
        self._name = None
        self._loglevel = None
        return
setauditnslogaction_loglevel.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_loglevel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_loglevel, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_dateformat:
    def __init__(self):
        self._name = None
        self._dateformat = None
        return
setauditnslogaction_dateformat.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_dateformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.dateformatEnum_Def(pname="dateformat", aname="_dateformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_dateformat, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_logfacility:
    def __init__(self):
        self._name = None
        self._logfacility = None
        return
setauditnslogaction_logfacility.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_logfacility"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.syslogfacilityEnum_Def(pname="logfacility", aname="_logfacility", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_logfacility, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_tcp:
    def __init__(self):
        self._name = None
        self._tcp = None
        return
setauditnslogaction_tcp.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_tcp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditlogstatusEnum_Def(pname="tcp", aname="_tcp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_tcp, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class setauditnslogaction_timezone:
    def __init__(self):
        self._name = None
        self._timezone = None
        return
setauditnslogaction_timezone.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_timezone"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.auditlogtimezoneEnum_Def(pname="timezone", aname="_timezone", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogaction_timezone, encoded="urn:NSConfig")

class setauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogaction_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_serverport:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_serverport, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_loglevel:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_loglevel.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_loglevel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_loglevel, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_dateformat:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_dateformat.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_dateformat"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_dateformat, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_logfacility:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_logfacility.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_logfacility"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_logfacility, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_tcp:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_tcp.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_tcp"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_tcp, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class unsetauditnslogaction_timezone:
    def __init__(self):
        self._name = None
        return
unsetauditnslogaction_timezone.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_timezone"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogaction_timezone, encoded="urn:NSConfig")

class unsetauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogaction_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogactionResponse, encoded="urn:NSConfig")

class getauditnslogaction:
    def __init__(self):
        self._name = None
        return
getauditnslogaction.typecode = Struct(pname=("urn:NSConfig","getauditnslogaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditnslogaction, encoded="urn:NSConfig")

class getauditnslogactionResponse:
    def __init__(self):
        self._return = None
        return
getauditnslogactionResponse.typecode = Struct(pname=("urn:NSConfig","getauditnslogactionResponse"), ofwhat=[ns0.getauditnslogactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditnslogactionResponse, encoded="urn:NSConfig")

class addauditnslogpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addauditnslogpolicy.typecode = Struct(pname=("urn:NSConfig","addauditnslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditnslogpolicy, encoded="urn:NSConfig")

class addauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
addauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauditnslogpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauditnslogpolicyResponse, encoded="urn:NSConfig")

class rmauditnslogpolicy:
    def __init__(self):
        self._name = None
        return
rmauditnslogpolicy.typecode = Struct(pname=("urn:NSConfig","rmauditnslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditnslogpolicy, encoded="urn:NSConfig")

class rmauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauditnslogpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauditnslogpolicyResponse, encoded="urn:NSConfig")

class setauditnslogpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauditnslogpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauditnslogpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogpolicy_rule, encoded="urn:NSConfig")

class setauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogpolicyResponse, encoded="urn:NSConfig")

class setauditnslogpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setauditnslogpolicy_action.typecode = Struct(pname=("urn:NSConfig","setauditnslogpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogpolicy_action, encoded="urn:NSConfig")

class setauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogpolicyResponse, encoded="urn:NSConfig")

class unsetauditnslogpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauditnslogpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogpolicy_rule, encoded="urn:NSConfig")

class unsetauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogpolicyResponse, encoded="urn:NSConfig")

class unsetauditnslogpolicy_action:
    def __init__(self):
        self._name = None
        return
unsetauditnslogpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogpolicy_action, encoded="urn:NSConfig")

class unsetauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogpolicyResponse, encoded="urn:NSConfig")

class getauditnslogpolicy:
    def __init__(self):
        self._name = None
        return
getauditnslogpolicy.typecode = Struct(pname=("urn:NSConfig","getauditnslogpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditnslogpolicy, encoded="urn:NSConfig")

class getauditnslogpolicyResponse:
    def __init__(self):
        self._return = None
        return
getauditnslogpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauditnslogpolicyResponse"), ofwhat=[ns0.getauditnslogpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditnslogpolicyResponse, encoded="urn:NSConfig")

class setauditnslogparams_serverip:
    def __init__(self):
        self._serverip = None
        return
setauditnslogparams_serverip.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_serverip"), ofwhat=[ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_serverip, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_serverport:
    def __init__(self):
        self._serverport = None
        return
setauditnslogparams_serverport.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_serverport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_serverport, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_dateformat:
    def __init__(self):
        self._dateformat = None
        return
setauditnslogparams_dateformat.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_dateformat"), ofwhat=[ns0.dateformatEnum_Def(pname="dateformat", aname="_dateformat", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_dateformat, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_loglevel:
    def __init__(self):
        self._loglevel = None
        return
setauditnslogparams_loglevel.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_loglevel"), ofwhat=[ns0.auditloglevelEnum_Def(pname="loglevel", aname="_loglevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_loglevel, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_logfacility:
    def __init__(self):
        self._logfacility = None
        return
setauditnslogparams_logfacility.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_logfacility"), ofwhat=[ns0.syslogfacilityEnum_Def(pname="logfacility", aname="_logfacility", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_logfacility, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_tcp:
    def __init__(self):
        self._tcp = None
        return
setauditnslogparams_tcp.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_tcp"), ofwhat=[ns0.auditlogstatusEnum_Def(pname="tcp", aname="_tcp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_tcp, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class setauditnslogparams_timezone:
    def __init__(self):
        self._timezone = None
        return
setauditnslogparams_timezone.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_timezone"), ofwhat=[ns0.auditlogtimezoneEnum_Def(pname="timezone", aname="_timezone", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparams_timezone, encoded="urn:NSConfig")

class setauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
setauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","setauditnslogparams_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_serverip:
    def __init__(self):
        return
unsetauditnslogparams_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_serverip"), ofwhat=[], pyclass=unsetauditnslogparams_serverip, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_serverport:
    def __init__(self):
        return
unsetauditnslogparams_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_serverport"), ofwhat=[], pyclass=unsetauditnslogparams_serverport, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_loglevel:
    def __init__(self):
        return
unsetauditnslogparams_loglevel.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_loglevel"), ofwhat=[], pyclass=unsetauditnslogparams_loglevel, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_loglevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_dateformat:
    def __init__(self):
        return
unsetauditnslogparams_dateformat.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_dateformat"), ofwhat=[], pyclass=unsetauditnslogparams_dateformat, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_dateformatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_logfacility:
    def __init__(self):
        return
unsetauditnslogparams_logfacility.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_logfacility"), ofwhat=[], pyclass=unsetauditnslogparams_logfacility, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_logfacilityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_tcp:
    def __init__(self):
        return
unsetauditnslogparams_tcp.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_tcp"), ofwhat=[], pyclass=unsetauditnslogparams_tcp, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_tcpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class unsetauditnslogparams_timezone:
    def __init__(self):
        return
unsetauditnslogparams_timezone.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_timezone"), ofwhat=[], pyclass=unsetauditnslogparams_timezone, encoded="urn:NSConfig")

class unsetauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetauditnslogparams_timezoneResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauditnslogparamsResponse, encoded="urn:NSConfig")

class getauditnslogparams:
    def __init__(self):
        return
getauditnslogparams.typecode = Struct(pname=("urn:NSConfig","getauditnslogparams"), ofwhat=[], pyclass=getauditnslogparams, encoded="urn:NSConfig")

class getauditnslogparamsResponse:
    def __init__(self):
        self._return = None
        return
getauditnslogparamsResponse.typecode = Struct(pname=("urn:NSConfig","getauditnslogparamsResponse"), ofwhat=[ns0.getauditnslogparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauditnslogparamsResponse, encoded="urn:NSConfig")

class addauthenticationradiusaction:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._serverport = None
        self._authtimeout = None
        self._radkey = None
        self._radnasip = None
        self._radnasid = None
        self._radvendorid = None
        self._radattributetype = None
        self._passencoding = None
        self._ipvendorid = None
        self._ipattributetype = None
        self._accounting = None
        return
addauthenticationradiusaction.typecode = Struct(pname=("urn:NSConfig","addauthenticationradiusaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="radnasip", aname="_radnasip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radnasid", aname="_radnasid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radvendorid", aname="_radvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radattributetype", aname="_radattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.radpassencodingEnum_Def(pname="passencoding", aname="_passencoding", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipvendorid", aname="_ipvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipattributetype", aname="_ipattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationradiusaction, encoded="urn:NSConfig")

class addauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationradiusactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationradiusactionResponse, encoded="urn:NSConfig")

class rmauthenticationradiusaction:
    def __init__(self):
        self._name = None
        return
rmauthenticationradiusaction.typecode = Struct(pname=("urn:NSConfig","rmauthenticationradiusaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationradiusaction, encoded="urn:NSConfig")

class rmauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationradiusactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauthenticationradiusaction_serverip.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_serverip, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_serverport:
    def __init__(self):
        self._name = None
        self._serverport = None
        return
setauthenticationradiusaction_serverport.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_serverport, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_authtimeout:
    def __init__(self):
        self._name = None
        self._authtimeout = None
        return
setauthenticationradiusaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_authtimeout, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radkey:
    def __init__(self):
        self._name = None
        self._radkey = None
        return
setauthenticationradiusaction_radkey.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radkey"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radkey, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radnasip:
    def __init__(self):
        self._name = None
        self._radnasip = None
        return
setauthenticationradiusaction_radnasip.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radnasip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="radnasip", aname="_radnasip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radnasip, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radnasid:
    def __init__(self):
        self._name = None
        self._radnasid = None
        return
setauthenticationradiusaction_radnasid.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radnasid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radnasid", aname="_radnasid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radnasid, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radvendorid:
    def __init__(self):
        self._name = None
        self._radvendorid = None
        return
setauthenticationradiusaction_radvendorid.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radvendorid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radvendorid", aname="_radvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radvendorid, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radattributetype:
    def __init__(self):
        self._name = None
        self._radattributetype = None
        return
setauthenticationradiusaction_radattributetype.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radattributetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="radattributetype", aname="_radattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radattributetype, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radgroupsprefix:
    def __init__(self):
        self._name = None
        self._radgroupsprefix = None
        return
setauthenticationradiusaction_radgroupsprefix.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radgroupsprefix"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radgroupsprefix", aname="_radgroupsprefix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radgroupsprefix, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radgroupsprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_radgroupseparator:
    def __init__(self):
        self._name = None
        self._radgroupseparator = None
        return
setauthenticationradiusaction_radgroupseparator.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radgroupseparator"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radgroupseparator", aname="_radgroupseparator", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_radgroupseparator, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_radgroupseparatorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_passencoding:
    def __init__(self):
        self._name = None
        self._passencoding = None
        return
setauthenticationradiusaction_passencoding.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_passencoding"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.radpassencodingEnum_Def(pname="passencoding", aname="_passencoding", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_passencoding, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_passencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_ipvendorid:
    def __init__(self):
        self._name = None
        self._ipvendorid = None
        return
setauthenticationradiusaction_ipvendorid.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_ipvendorid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipvendorid", aname="_ipvendorid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_ipvendorid, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_ipvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_ipattributetype:
    def __init__(self):
        self._name = None
        self._ipattributetype = None
        return
setauthenticationradiusaction_ipattributetype.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_ipattributetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ipattributetype", aname="_ipattributetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_ipattributetype, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_ipattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class setauthenticationradiusaction_accounting:
    def __init__(self):
        self._name = None
        self._accounting = None
        return
setauthenticationradiusaction_accounting.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_accounting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusaction_accounting, encoded="urn:NSConfig")

class setauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiusaction_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_serverip:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_serverip, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_serverport:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_serverport, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_authtimeout:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_authtimeout, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radnasip:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radnasip.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radnasip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radnasip, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radnasid:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radnasid.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radnasid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radnasid, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radvendorid:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radvendorid.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radvendorid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radvendorid, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radattributetype:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radattributetype.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radattributetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radattributetype, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radgroupsprefix:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radgroupsprefix.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radgroupsprefix"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radgroupsprefix, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radgroupsprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_radgroupseparator:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_radgroupseparator.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radgroupseparator"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_radgroupseparator, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_radgroupseparatorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_passencoding:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_passencoding.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_passencoding"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_passencoding, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_passencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_ipvendorid:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_ipvendorid.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_ipvendorid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_ipvendorid, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_ipvendoridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_ipattributetype:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_ipattributetype.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_ipattributetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_ipattributetype, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_ipattributetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class unsetauthenticationradiusaction_accounting:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiusaction_accounting.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_accounting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusaction_accounting, encoded="urn:NSConfig")

class unsetauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiusaction_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiusactionResponse, encoded="urn:NSConfig")

class getauthenticationradiusaction:
    def __init__(self):
        self._name = None
        return
getauthenticationradiusaction.typecode = Struct(pname=("urn:NSConfig","getauthenticationradiusaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationradiusaction, encoded="urn:NSConfig")

class getauthenticationradiusactionResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationradiusactionResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationradiusactionResponse"), ofwhat=[ns0.getauthenticationradiusactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationradiusactionResponse, encoded="urn:NSConfig")

class addauthenticationldapaction:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._serverport = None
        self._authtimeout = None
        self._ldapbase = None
        self._ldapbinddn = None
        self._ldapbinddnpassword = None
        self._ldaploginname = None
        self._searchfilter = None
        self._groupattrname = None
        self._subattributename = None
        self._sectype = None
        self._authentication = None
        self._requireuser = None
        return
addauthenticationldapaction.typecode = Struct(pname=("urn:NSConfig","addauthenticationldapaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbase", aname="_ldapbase", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbinddn", aname="_ldapbinddn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbinddnpassword", aname="_ldapbinddnpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldaploginname", aname="_ldaploginname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="searchfilter", aname="_searchfilter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupattrname", aname="_groupattrname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subattributename", aname="_subattributename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.sectypeEnum_Def(pname="sectype", aname="_sectype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="authentication", aname="_authentication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="requireuser", aname="_requireuser", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationldapaction, encoded="urn:NSConfig")

class addauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationldapactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationldapactionResponse, encoded="urn:NSConfig")

class rmauthenticationldapaction:
    def __init__(self):
        self._name = None
        return
rmauthenticationldapaction.typecode = Struct(pname=("urn:NSConfig","rmauthenticationldapaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationldapaction, encoded="urn:NSConfig")

class rmauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationldapactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauthenticationldapaction_serverip.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_serverip, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_serverport:
    def __init__(self):
        self._name = None
        self._serverport = None
        return
setauthenticationldapaction_serverport.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_serverport, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_authtimeout:
    def __init__(self):
        self._name = None
        self._authtimeout = None
        return
setauthenticationldapaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_authtimeout, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_ldapbase:
    def __init__(self):
        self._name = None
        self._ldapbase = None
        return
setauthenticationldapaction_ldapbase.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbase"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbase", aname="_ldapbase", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_ldapbase, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_ldapbinddn:
    def __init__(self):
        self._name = None
        self._ldapbinddn = None
        return
setauthenticationldapaction_ldapbinddn.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbinddn"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbinddn", aname="_ldapbinddn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_ldapbinddn, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbinddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_ldapbinddnpassword:
    def __init__(self):
        self._name = None
        self._ldapbinddnpassword = None
        return
setauthenticationldapaction_ldapbinddnpassword.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbinddnpassword"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldapbinddnpassword", aname="_ldapbinddnpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_ldapbinddnpassword, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldapbinddnpasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_ldaploginname:
    def __init__(self):
        self._name = None
        self._ldaploginname = None
        return
setauthenticationldapaction_ldaploginname.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldaploginname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ldaploginname", aname="_ldaploginname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_ldaploginname, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ldaploginnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_searchfilter:
    def __init__(self):
        self._name = None
        self._searchfilter = None
        return
setauthenticationldapaction_searchfilter.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_searchfilter"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="searchfilter", aname="_searchfilter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_searchfilter, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_searchfilterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_groupattrname:
    def __init__(self):
        self._name = None
        self._groupattrname = None
        return
setauthenticationldapaction_groupattrname.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_groupattrname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupattrname", aname="_groupattrname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_groupattrname, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_groupattrnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_subattributename:
    def __init__(self):
        self._name = None
        self._subattributename = None
        return
setauthenticationldapaction_subattributename.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_subattributename"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subattributename", aname="_subattributename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_subattributename, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_subattributenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_sectype:
    def __init__(self):
        self._name = None
        self._sectype = None
        return
setauthenticationldapaction_sectype.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_sectype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.sectypeEnum_Def(pname="sectype", aname="_sectype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_sectype, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_sectypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_ssonameattribute:
    def __init__(self):
        self._name = None
        self._ssonameattribute = None
        return
setauthenticationldapaction_ssonameattribute.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ssonameattribute"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ssonameattribute", aname="_ssonameattribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_ssonameattribute, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_ssonameattributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_authentication:
    def __init__(self):
        self._name = None
        self._authentication = None
        return
setauthenticationldapaction_authentication.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_authentication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="authentication", aname="_authentication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_authentication, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_authenticationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class setauthenticationldapaction_requireuser:
    def __init__(self):
        self._name = None
        self._requireuser = None
        return
setauthenticationldapaction_requireuser.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_requireuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="requireuser", aname="_requireuser", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapaction_requireuser, encoded="urn:NSConfig")

class setauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldapaction_requireuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_serverip:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_serverip, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_serverport:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_serverport, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_authtimeout:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_authtimeout, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_ldapbase:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_ldapbase.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbase"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_ldapbase, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_ldapbinddn:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_ldapbinddn.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbinddn"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_ldapbinddn, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbinddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_ldapbinddnpassword:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_ldapbinddnpassword.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbinddnpassword"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_ldapbinddnpassword, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldapbinddnpasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_ldaploginname:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_ldaploginname.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldaploginname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_ldaploginname, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ldaploginnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_searchfilter:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_searchfilter.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_searchfilter"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_searchfilter, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_searchfilterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_groupattrname:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_groupattrname.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_groupattrname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_groupattrname, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_groupattrnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_subattributename:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_subattributename.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_subattributename"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_subattributename, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_subattributenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_sectype:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_sectype.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_sectype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_sectype, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_sectypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_ssonameattribute:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_ssonameattribute.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ssonameattribute"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_ssonameattribute, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_ssonameattributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_authentication:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_authentication.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_authentication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_authentication, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_authenticationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class unsetauthenticationldapaction_requireuser:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldapaction_requireuser.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_requireuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapaction_requireuser, encoded="urn:NSConfig")

class unsetauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldapaction_requireuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldapactionResponse, encoded="urn:NSConfig")

class getauthenticationldapaction:
    def __init__(self):
        self._name = None
        return
getauthenticationldapaction.typecode = Struct(pname=("urn:NSConfig","getauthenticationldapaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationldapaction, encoded="urn:NSConfig")

class getauthenticationldapactionResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationldapactionResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationldapactionResponse"), ofwhat=[ns0.getauthenticationldapactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationldapactionResponse, encoded="urn:NSConfig")

class addauthenticationtacacsaction:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._serverport = None
        self._authtimeout = None
        self._tacacssecret = None
        self._authorization = None
        self._accounting = None
        return
addauthenticationtacacsaction.typecode = Struct(pname=("urn:NSConfig","addauthenticationtacacsaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tacacssecret", aname="_tacacssecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="authorization", aname="_authorization", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationtacacsaction, encoded="urn:NSConfig")

class addauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationtacacsactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class rmauthenticationtacacsaction:
    def __init__(self):
        self._name = None
        return
rmauthenticationtacacsaction.typecode = Struct(pname=("urn:NSConfig","rmauthenticationtacacsaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationtacacsaction, encoded="urn:NSConfig")

class rmauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationtacacsactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauthenticationtacacsaction_serverip.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_serverip, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_serverport:
    def __init__(self):
        self._name = None
        self._serverport = None
        return
setauthenticationtacacsaction_serverport.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_serverport, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_authtimeout:
    def __init__(self):
        self._name = None
        self._authtimeout = None
        return
setauthenticationtacacsaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_authtimeout, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_tacacssecret:
    def __init__(self):
        self._name = None
        self._tacacssecret = None
        return
setauthenticationtacacsaction_tacacssecret.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_tacacssecret"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tacacssecret", aname="_tacacssecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_tacacssecret, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_tacacssecretResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_authorization:
    def __init__(self):
        self._name = None
        self._authorization = None
        return
setauthenticationtacacsaction_authorization.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_authorization"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="authorization", aname="_authorization", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_authorization, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_authorizationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class setauthenticationtacacsaction_accounting:
    def __init__(self):
        self._name = None
        self._accounting = None
        return
setauthenticationtacacsaction_accounting.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_accounting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="accounting", aname="_accounting", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsaction_accounting, encoded="urn:NSConfig")

class setauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacsaction_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_serverip:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_serverip, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_serverport:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_serverport.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_serverport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_serverport, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_serverportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_authtimeout:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_authtimeout.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_authtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_authtimeout, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_authtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_tacacssecret:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_tacacssecret.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_tacacssecret"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_tacacssecret, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_tacacssecretResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_authorization:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_authorization.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_authorization"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_authorization, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_authorizationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacsaction_accounting:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacsaction_accounting.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_accounting"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsaction_accounting, encoded="urn:NSConfig")

class unsetauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacsaction_accountingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class getauthenticationtacacsaction:
    def __init__(self):
        self._name = None
        return
getauthenticationtacacsaction.typecode = Struct(pname=("urn:NSConfig","getauthenticationtacacsaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationtacacsaction, encoded="urn:NSConfig")

class getauthenticationtacacsactionResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationtacacsactionResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationtacacsactionResponse"), ofwhat=[ns0.getauthenticationtacacsactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationtacacsactionResponse, encoded="urn:NSConfig")

class addauthenticationnt4action:
    def __init__(self):
        self._name = None
        self._serverip = None
        self._nt4servername = None
        self._nt4domainname = None
        self._nt4adminuser = None
        self._nt4adminpasswd = None
        return
addauthenticationnt4action.typecode = Struct(pname=("urn:NSConfig","addauthenticationnt4action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4servername", aname="_nt4servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4domainname", aname="_nt4domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4adminuser", aname="_nt4adminuser", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4adminpasswd", aname="_nt4adminpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationnt4action, encoded="urn:NSConfig")

class addauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationnt4actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationnt4actionResponse, encoded="urn:NSConfig")

class rmauthenticationnt4action:
    def __init__(self):
        self._name = None
        return
rmauthenticationnt4action.typecode = Struct(pname=("urn:NSConfig","rmauthenticationnt4action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationnt4action, encoded="urn:NSConfig")

class rmauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationnt4actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationnt4actionResponse, encoded="urn:NSConfig")

class setauthenticationnt4action_serverip:
    def __init__(self):
        self._name = None
        self._serverip = None
        return
setauthenticationnt4action_serverip.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="serverip", aname="_serverip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4action_serverip, encoded="urn:NSConfig")

class setauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4actionResponse, encoded="urn:NSConfig")

class setauthenticationnt4action_nt4servername:
    def __init__(self):
        self._name = None
        self._nt4servername = None
        return
setauthenticationnt4action_nt4servername.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4servername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4servername", aname="_nt4servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4action_nt4servername, encoded="urn:NSConfig")

class setauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4servernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4actionResponse, encoded="urn:NSConfig")

class setauthenticationnt4action_nt4domainname:
    def __init__(self):
        self._name = None
        self._nt4domainname = None
        return
setauthenticationnt4action_nt4domainname.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4domainname", aname="_nt4domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4action_nt4domainname, encoded="urn:NSConfig")

class setauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4actionResponse, encoded="urn:NSConfig")

class setauthenticationnt4action_nt4adminuser:
    def __init__(self):
        self._name = None
        self._nt4adminuser = None
        return
setauthenticationnt4action_nt4adminuser.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4adminuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4adminuser", aname="_nt4adminuser", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4action_nt4adminuser, encoded="urn:NSConfig")

class setauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4adminuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4actionResponse, encoded="urn:NSConfig")

class setauthenticationnt4action_nt4adminpasswd:
    def __init__(self):
        self._name = None
        self._nt4adminpasswd = None
        return
setauthenticationnt4action_nt4adminpasswd.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4adminpasswd"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nt4adminpasswd", aname="_nt4adminpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4action_nt4adminpasswd, encoded="urn:NSConfig")

class setauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4action_nt4adminpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4actionResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4action_serverip:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4action_serverip.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_serverip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4action_serverip, encoded="urn:NSConfig")

class unsetauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_serveripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4actionResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4action_nt4servername:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4action_nt4servername.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4servername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4action_nt4servername, encoded="urn:NSConfig")

class unsetauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4servernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4actionResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4action_nt4domainname:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4action_nt4domainname.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4action_nt4domainname, encoded="urn:NSConfig")

class unsetauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4actionResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4action_nt4adminuser:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4action_nt4adminuser.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4adminuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4action_nt4adminuser, encoded="urn:NSConfig")

class unsetauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4adminuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4actionResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4action_nt4adminpasswd:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4action_nt4adminpasswd.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4adminpasswd"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4action_nt4adminpasswd, encoded="urn:NSConfig")

class unsetauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4action_nt4adminpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4actionResponse, encoded="urn:NSConfig")

class getauthenticationnt4action:
    def __init__(self):
        self._name = None
        return
getauthenticationnt4action.typecode = Struct(pname=("urn:NSConfig","getauthenticationnt4action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationnt4action, encoded="urn:NSConfig")

class getauthenticationnt4actionResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationnt4actionResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationnt4actionResponse"), ofwhat=[ns0.getauthenticationnt4actionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationnt4actionResponse, encoded="urn:NSConfig")

class addauthenticationcertaction:
    def __init__(self):
        self._name = None
        self._twofactor = None
        self._usernamefield = None
        self._groupnamefield = None
        return
addauthenticationcertaction.typecode = Struct(pname=("urn:NSConfig","addauthenticationcertaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="twofactor", aname="_twofactor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="usernamefield", aname="_usernamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupnamefield", aname="_groupnamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationcertaction, encoded="urn:NSConfig")

class addauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationcertactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationcertactionResponse, encoded="urn:NSConfig")

class rmauthenticationcertaction:
    def __init__(self):
        self._name = None
        return
rmauthenticationcertaction.typecode = Struct(pname=("urn:NSConfig","rmauthenticationcertaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationcertaction, encoded="urn:NSConfig")

class rmauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationcertactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationcertactionResponse, encoded="urn:NSConfig")

class setauthenticationcertaction_twofactor:
    def __init__(self):
        self._name = None
        self._twofactor = None
        return
setauthenticationcertaction_twofactor.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_twofactor"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="twofactor", aname="_twofactor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertaction_twofactor, encoded="urn:NSConfig")

class setauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_twofactorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertactionResponse, encoded="urn:NSConfig")

class setauthenticationcertaction_usernamefield:
    def __init__(self):
        self._name = None
        self._usernamefield = None
        return
setauthenticationcertaction_usernamefield.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_usernamefield"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="usernamefield", aname="_usernamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertaction_usernamefield, encoded="urn:NSConfig")

class setauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_usernamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertactionResponse, encoded="urn:NSConfig")

class setauthenticationcertaction_groupnamefield:
    def __init__(self):
        self._name = None
        self._groupnamefield = None
        return
setauthenticationcertaction_groupnamefield.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_groupnamefield"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupnamefield", aname="_groupnamefield", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertaction_groupnamefield, encoded="urn:NSConfig")

class setauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertaction_groupnamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertactionResponse, encoded="urn:NSConfig")

class unsetauthenticationcertaction_twofactor:
    def __init__(self):
        self._name = None
        return
unsetauthenticationcertaction_twofactor.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_twofactor"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertaction_twofactor, encoded="urn:NSConfig")

class unsetauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_twofactorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertactionResponse, encoded="urn:NSConfig")

class unsetauthenticationcertaction_usernamefield:
    def __init__(self):
        self._name = None
        return
unsetauthenticationcertaction_usernamefield.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_usernamefield"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertaction_usernamefield, encoded="urn:NSConfig")

class unsetauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_usernamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertactionResponse, encoded="urn:NSConfig")

class unsetauthenticationcertaction_groupnamefield:
    def __init__(self):
        self._name = None
        return
unsetauthenticationcertaction_groupnamefield.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_groupnamefield"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertaction_groupnamefield, encoded="urn:NSConfig")

class unsetauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertaction_groupnamefieldResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertactionResponse, encoded="urn:NSConfig")

class getauthenticationcertaction:
    def __init__(self):
        self._name = None
        return
getauthenticationcertaction.typecode = Struct(pname=("urn:NSConfig","getauthenticationcertaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationcertaction, encoded="urn:NSConfig")

class getauthenticationcertactionResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationcertactionResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationcertactionResponse"), ofwhat=[ns0.getauthenticationcertactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationcertactionResponse, encoded="urn:NSConfig")

class addauthenticationlocalpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        return
addauthenticationlocalpolicy.typecode = Struct(pname=("urn:NSConfig","addauthenticationlocalpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationlocalpolicy, encoded="urn:NSConfig")

class addauthenticationlocalpolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationlocalpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationlocalpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationlocalpolicyResponse, encoded="urn:NSConfig")

class rmauthenticationlocalpolicy:
    def __init__(self):
        self._name = None
        return
rmauthenticationlocalpolicy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationlocalpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationlocalpolicy, encoded="urn:NSConfig")

class rmauthenticationlocalpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationlocalpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationlocalpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationlocalpolicyResponse, encoded="urn:NSConfig")

class setauthenticationlocalpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationlocalpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationlocalpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationlocalpolicy_rule, encoded="urn:NSConfig")

class setauthenticationlocalpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationlocalpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationlocalpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationlocalpolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationlocalpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationlocalpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationlocalpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationlocalpolicy_rule, encoded="urn:NSConfig")

class unsetauthenticationlocalpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationlocalpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationlocalpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationlocalpolicyResponse, encoded="urn:NSConfig")

class getauthenticationlocalpolicy:
    def __init__(self):
        self._name = None
        return
getauthenticationlocalpolicy.typecode = Struct(pname=("urn:NSConfig","getauthenticationlocalpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationlocalpolicy, encoded="urn:NSConfig")

class getauthenticationlocalpolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationlocalpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationlocalpolicyResponse"), ofwhat=[ns0.getauthenticationlocalpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationlocalpolicyResponse, encoded="urn:NSConfig")

class addauthenticationradiuspolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addauthenticationradiuspolicy.typecode = Struct(pname=("urn:NSConfig","addauthenticationradiuspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationradiuspolicy, encoded="urn:NSConfig")

class addauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationradiuspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class rmauthenticationradiuspolicy:
    def __init__(self):
        self._name = None
        return
rmauthenticationradiuspolicy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationradiuspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationradiuspolicy, encoded="urn:NSConfig")

class rmauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationradiuspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class setauthenticationradiuspolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationradiuspolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiuspolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiuspolicy_rule, encoded="urn:NSConfig")

class setauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiuspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class setauthenticationradiuspolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setauthenticationradiuspolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiuspolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiuspolicy_reqaction, encoded="urn:NSConfig")

class setauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationradiuspolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationradiuspolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiuspolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiuspolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiuspolicy_rule, encoded="urn:NSConfig")

class unsetauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiuspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationradiuspolicy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetauthenticationradiuspolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiuspolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiuspolicy_reqaction, encoded="urn:NSConfig")

class unsetauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationradiuspolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class getauthenticationradiuspolicy:
    def __init__(self):
        self._name = None
        return
getauthenticationradiuspolicy.typecode = Struct(pname=("urn:NSConfig","getauthenticationradiuspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationradiuspolicy, encoded="urn:NSConfig")

class getauthenticationradiuspolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationradiuspolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationradiuspolicyResponse"), ofwhat=[ns0.getauthenticationradiuspolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationradiuspolicyResponse, encoded="urn:NSConfig")

class addauthenticationcertpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addauthenticationcertpolicy.typecode = Struct(pname=("urn:NSConfig","addauthenticationcertpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationcertpolicy, encoded="urn:NSConfig")

class addauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationcertpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class rmauthenticationcertpolicy:
    def __init__(self):
        self._name = None
        return
rmauthenticationcertpolicy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationcertpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationcertpolicy, encoded="urn:NSConfig")

class rmauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationcertpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class setauthenticationcertpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationcertpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertpolicy_rule, encoded="urn:NSConfig")

class setauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class setauthenticationcertpolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setauthenticationcertpolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertpolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertpolicy_reqaction, encoded="urn:NSConfig")

class setauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationcertpolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationcertpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationcertpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertpolicy_rule, encoded="urn:NSConfig")

class unsetauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationcertpolicy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetauthenticationcertpolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertpolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertpolicy_reqaction, encoded="urn:NSConfig")

class unsetauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationcertpolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class getauthenticationcertpolicy:
    def __init__(self):
        self._name = None
        return
getauthenticationcertpolicy.typecode = Struct(pname=("urn:NSConfig","getauthenticationcertpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationcertpolicy, encoded="urn:NSConfig")

class getauthenticationcertpolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationcertpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationcertpolicyResponse"), ofwhat=[ns0.getauthenticationcertpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationcertpolicyResponse, encoded="urn:NSConfig")

class addauthenticationldappolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addauthenticationldappolicy.typecode = Struct(pname=("urn:NSConfig","addauthenticationldappolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationldappolicy, encoded="urn:NSConfig")

class addauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationldappolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationldappolicyResponse, encoded="urn:NSConfig")

class rmauthenticationldappolicy:
    def __init__(self):
        self._name = None
        return
rmauthenticationldappolicy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationldappolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationldappolicy, encoded="urn:NSConfig")

class rmauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationldappolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationldappolicyResponse, encoded="urn:NSConfig")

class setauthenticationldappolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationldappolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationldappolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldappolicy_rule, encoded="urn:NSConfig")

class setauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldappolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldappolicyResponse, encoded="urn:NSConfig")

class setauthenticationldappolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setauthenticationldappolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setauthenticationldappolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldappolicy_reqaction, encoded="urn:NSConfig")

class setauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationldappolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationldappolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationldappolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldappolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldappolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldappolicy_rule, encoded="urn:NSConfig")

class unsetauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldappolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldappolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationldappolicy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetauthenticationldappolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldappolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldappolicy_reqaction, encoded="urn:NSConfig")

class unsetauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationldappolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationldappolicyResponse, encoded="urn:NSConfig")

class getauthenticationldappolicy:
    def __init__(self):
        self._name = None
        return
getauthenticationldappolicy.typecode = Struct(pname=("urn:NSConfig","getauthenticationldappolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationldappolicy, encoded="urn:NSConfig")

class getauthenticationldappolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationldappolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationldappolicyResponse"), ofwhat=[ns0.getauthenticationldappolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationldappolicyResponse, encoded="urn:NSConfig")

class addauthenticationtacacspolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addauthenticationtacacspolicy.typecode = Struct(pname=("urn:NSConfig","addauthenticationtacacspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationtacacspolicy, encoded="urn:NSConfig")

class addauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationtacacspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class rmauthenticationtacacspolicy:
    def __init__(self):
        self._name = None
        return
rmauthenticationtacacspolicy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationtacacspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationtacacspolicy, encoded="urn:NSConfig")

class rmauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationtacacspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class setauthenticationtacacspolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationtacacspolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacspolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacspolicy_rule, encoded="urn:NSConfig")

class setauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class setauthenticationtacacspolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setauthenticationtacacspolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacspolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacspolicy_reqaction, encoded="urn:NSConfig")

class setauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationtacacspolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacspolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacspolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacspolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacspolicy_rule, encoded="urn:NSConfig")

class unsetauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class unsetauthenticationtacacspolicy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetauthenticationtacacspolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacspolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacspolicy_reqaction, encoded="urn:NSConfig")

class unsetauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationtacacspolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class getauthenticationtacacspolicy:
    def __init__(self):
        self._name = None
        return
getauthenticationtacacspolicy.typecode = Struct(pname=("urn:NSConfig","getauthenticationtacacspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationtacacspolicy, encoded="urn:NSConfig")

class getauthenticationtacacspolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationtacacspolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationtacacspolicyResponse"), ofwhat=[ns0.getauthenticationtacacspolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationtacacspolicyResponse, encoded="urn:NSConfig")

class addauthenticationnt4policy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addauthenticationnt4policy.typecode = Struct(pname=("urn:NSConfig","addauthenticationnt4policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationnt4policy, encoded="urn:NSConfig")

class addauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
addauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","addauthenticationnt4policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthenticationnt4policyResponse, encoded="urn:NSConfig")

class rmauthenticationnt4policy:
    def __init__(self):
        self._name = None
        return
rmauthenticationnt4policy.typecode = Struct(pname=("urn:NSConfig","rmauthenticationnt4policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationnt4policy, encoded="urn:NSConfig")

class rmauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
rmauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthenticationnt4policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthenticationnt4policyResponse, encoded="urn:NSConfig")

class setauthenticationnt4policy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthenticationnt4policy_rule.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4policy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4policy_rule, encoded="urn:NSConfig")

class setauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4policy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4policyResponse, encoded="urn:NSConfig")

class setauthenticationnt4policy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setauthenticationnt4policy_reqaction.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4policy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4policy_reqaction, encoded="urn:NSConfig")

class setauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
setauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","setauthenticationnt4policy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthenticationnt4policyResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4policy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4policy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4policy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4policy_rule, encoded="urn:NSConfig")

class unsetauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4policy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4policyResponse, encoded="urn:NSConfig")

class unsetauthenticationnt4policy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetauthenticationnt4policy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4policy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4policy_reqaction, encoded="urn:NSConfig")

class unsetauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthenticationnt4policy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthenticationnt4policyResponse, encoded="urn:NSConfig")

class getauthenticationnt4policy:
    def __init__(self):
        self._name = None
        return
getauthenticationnt4policy.typecode = Struct(pname=("urn:NSConfig","getauthenticationnt4policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationnt4policy, encoded="urn:NSConfig")

class getauthenticationnt4policyResponse:
    def __init__(self):
        self._return = None
        return
getauthenticationnt4policyResponse.typecode = Struct(pname=("urn:NSConfig","getauthenticationnt4policyResponse"), ofwhat=[ns0.getauthenticationnt4policyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthenticationnt4policyResponse, encoded="urn:NSConfig")

class addauthorizationpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addauthorizationpolicy.typecode = Struct(pname=("urn:NSConfig","addauthorizationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthorizationpolicy, encoded="urn:NSConfig")

class addauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
addauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addauthorizationpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addauthorizationpolicyResponse, encoded="urn:NSConfig")

class rmauthorizationpolicy:
    def __init__(self):
        self._name = None
        return
rmauthorizationpolicy.typecode = Struct(pname=("urn:NSConfig","rmauthorizationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthorizationpolicy, encoded="urn:NSConfig")

class rmauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmauthorizationpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmauthorizationpolicyResponse, encoded="urn:NSConfig")

class setauthorizationpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setauthorizationpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setauthorizationpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthorizationpolicy_rule, encoded="urn:NSConfig")

class setauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthorizationpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthorizationpolicyResponse, encoded="urn:NSConfig")

class setauthorizationpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setauthorizationpolicy_action.typecode = Struct(pname=("urn:NSConfig","setauthorizationpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthorizationpolicy_action, encoded="urn:NSConfig")

class setauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
setauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setauthorizationpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setauthorizationpolicyResponse, encoded="urn:NSConfig")

class unsetauthorizationpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetauthorizationpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetauthorizationpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthorizationpolicy_rule, encoded="urn:NSConfig")

class unsetauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthorizationpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthorizationpolicyResponse, encoded="urn:NSConfig")

class unsetauthorizationpolicy_action:
    def __init__(self):
        self._name = None
        return
unsetauthorizationpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsetauthorizationpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthorizationpolicy_action, encoded="urn:NSConfig")

class unsetauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetauthorizationpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetauthorizationpolicyResponse, encoded="urn:NSConfig")

class getauthorizationpolicy:
    def __init__(self):
        self._name = None
        return
getauthorizationpolicy.typecode = Struct(pname=("urn:NSConfig","getauthorizationpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthorizationpolicy, encoded="urn:NSConfig")

class getauthorizationpolicyResponse:
    def __init__(self):
        self._return = None
        return
getauthorizationpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getauthorizationpolicyResponse"), ofwhat=[ns0.getauthorizationpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getauthorizationpolicyResponse, encoded="urn:NSConfig")

class getcacheobject:
    def __init__(self):
        self._url = None
        self._locator = None
        self._host = None
        self._port = None
        self._groupname = None
        self._httpmethod = None
        self._group = None
        self._ignoremarkerobjects = None
        self._includenotreadyobjects = None
        return
getcacheobject.typecode = Struct(pname=("urn:NSConfig","getcacheobject"), ofwhat=[ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedLong(pname="locator", aname="_locator", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="host", aname="_host", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="httpmethod", aname="_httpmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="group", aname="_group", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ignoremarkerobjects", aname="_ignoremarkerobjects", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="includenotreadyobjects", aname="_includenotreadyobjects", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheobject, encoded="urn:NSConfig")

class getcacheobjectResponse:
    def __init__(self):
        self._return = None
        return
getcacheobjectResponse.typecode = Struct(pname=("urn:NSConfig","getcacheobjectResponse"), ofwhat=[ns0.getcacheobjectResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheobjectResponse, encoded="urn:NSConfig")

class expirecacheobject:
    def __init__(self):
        self._locator = None
        self._url = None
        self._host = None
        self._port = None
        self._groupname = None
        self._httpmethod = None
        return
expirecacheobject.typecode = Struct(pname=("urn:NSConfig","expirecacheobject"), ofwhat=[ZSI.TCnumbers.IunsignedLong(pname="locator", aname="_locator", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="host", aname="_host", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.httpmethodEnum_Def(pname="httpmethod", aname="_httpmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=expirecacheobject, encoded="urn:NSConfig")

class expirecacheobjectResponse:
    def __init__(self):
        self._return = None
        return
expirecacheobjectResponse.typecode = Struct(pname=("urn:NSConfig","expirecacheobjectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=expirecacheobjectResponse, encoded="urn:NSConfig")

class flushcacheobject:
    def __init__(self):
        self._locator = None
        self._url = None
        self._host = None
        self._port = None
        self._groupname = None
        self._httpmethod = None
        return
flushcacheobject.typecode = Struct(pname=("urn:NSConfig","flushcacheobject"), ofwhat=[ZSI.TCnumbers.IunsignedLong(pname="locator", aname="_locator", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="host", aname="_host", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.httpmethodEnum_Def(pname="httpmethod", aname="_httpmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=flushcacheobject, encoded="urn:NSConfig")

class flushcacheobjectResponse:
    def __init__(self):
        self._return = None
        return
flushcacheobjectResponse.typecode = Struct(pname=("urn:NSConfig","flushcacheobjectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=flushcacheobjectResponse, encoded="urn:NSConfig")

class addcachepolicy:
    def __init__(self):
        self._policyname = None
        self._rule = None
        self._actioN = None
        self._storeingroup = None
        self._invalgroups = None
        self._invalobjects = None
        return
addcachepolicy.typecode = Struct(pname=("urn:NSConfig","addcachepolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.cachedirectiveEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="storeingroup", aname="_storeingroup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invalgroups", aname="_invalgroups", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invalobjects", aname="_invalobjects", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcachepolicy, encoded="urn:NSConfig")

class addcachepolicyResponse:
    def __init__(self):
        self._return = None
        return
addcachepolicyResponse.typecode = Struct(pname=("urn:NSConfig","addcachepolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcachepolicyResponse, encoded="urn:NSConfig")

class rmcachepolicy:
    def __init__(self):
        self._policyname = None
        return
rmcachepolicy.typecode = Struct(pname=("urn:NSConfig","rmcachepolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcachepolicy, encoded="urn:NSConfig")

class rmcachepolicyResponse:
    def __init__(self):
        self._return = None
        return
rmcachepolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmcachepolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcachepolicyResponse, encoded="urn:NSConfig")

class getcachepolicy:
    def __init__(self):
        self._policyname = None
        return
getcachepolicy.typecode = Struct(pname=("urn:NSConfig","getcachepolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcachepolicy, encoded="urn:NSConfig")

class getcachepolicyResponse:
    def __init__(self):
        self._return = None
        return
getcachepolicyResponse.typecode = Struct(pname=("urn:NSConfig","getcachepolicyResponse"), ofwhat=[ns0.getcachepolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcachepolicyResponse, encoded="urn:NSConfig")

class bindcacheglobal_policy:
    def __init__(self):
        self._policy = None
        self._priority = None
        self._precededefrules = None
        return
bindcacheglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindcacheglobal_policy"), ofwhat=[ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="precededefrules", aname="_precededefrules", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcacheglobal_policy, encoded="urn:NSConfig")

class bindcacheglobalResponse:
    def __init__(self):
        self._return = None
        return
bindcacheglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindcacheglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcacheglobalResponse, encoded="urn:NSConfig")

class unbindcacheglobal_policy:
    def __init__(self):
        self._policy = None
        return
unbindcacheglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindcacheglobal_policy"), ofwhat=[ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcacheglobal_policy, encoded="urn:NSConfig")

class unbindcacheglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindcacheglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindcacheglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcacheglobalResponse, encoded="urn:NSConfig")

class getcacheglobal:
    def __init__(self):
        return
getcacheglobal.typecode = Struct(pname=("urn:NSConfig","getcacheglobal"), ofwhat=[], pyclass=getcacheglobal, encoded="urn:NSConfig")

class getcacheglobalResponse:
    def __init__(self):
        self._return = None
        return
getcacheglobalResponse.typecode = Struct(pname=("urn:NSConfig","getcacheglobalResponse"), ofwhat=[ns0.getcacheglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheglobalResponse, encoded="urn:NSConfig")

class addcachecontentgroup:
    def __init__(self):
        self._name = None
        self._prefetchmaxpending = None
        self._alwaysevalpolicies = None
        self._pinned = None
        self._hitselector = None
        self._invalselector = None
        return
addcachecontentgroup.typecode = Struct(pname=("urn:NSConfig","addcachecontentgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="prefetchmaxpending", aname="_prefetchmaxpending", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="alwaysevalpolicies", aname="_alwaysevalpolicies", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="pinned", aname="_pinned", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hitselector", aname="_hitselector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invalselector", aname="_invalselector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcachecontentgroup, encoded="urn:NSConfig")

class addcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
addcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","addcachecontentgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcachecontentgroupResponse, encoded="urn:NSConfig")

class rmcachecontentgroup:
    def __init__(self):
        self._name = None
        return
rmcachecontentgroup.typecode = Struct(pname=("urn:NSConfig","rmcachecontentgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcachecontentgroup, encoded="urn:NSConfig")

class rmcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
rmcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","rmcachecontentgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_weakposrelexpiry:
    def __init__(self):
        self._name = None
        self._weakposrelexpiry = None
        return
setcachecontentgroup_weakposrelexpiry.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_weakposrelexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weakposrelexpiry", aname="_weakposrelexpiry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_weakposrelexpiry, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_weakposrelexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_heurexpiryparam:
    def __init__(self):
        self._name = None
        self._heurexpiryparam = None
        return
setcachecontentgroup_heurexpiryparam.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_heurexpiryparam"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="heurexpiryparam", aname="_heurexpiryparam", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_heurexpiryparam, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_heurexpiryparamResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_relexpiry:
    def __init__(self):
        self._name = None
        self._relexpiry = None
        return
setcachecontentgroup_relexpiry.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_relexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="relexpiry", aname="_relexpiry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_relexpiry, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_relexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_relexpirymillisec:
    def __init__(self):
        self._name = None
        self._relexpirymillisec = None
        return
setcachecontentgroup_relexpirymillisec.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_relexpirymillisec"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="relexpirymillisec", aname="_relexpirymillisec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_relexpirymillisec, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_relexpirymillisecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_absexpiry:
    def __init__(self):
        self._name = None
        self._absexpiry = None
        return
setcachecontentgroup_absexpiry.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_absexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="absexpiry", aname="_absexpiry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_absexpiry, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_absexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_absexpirygmt:
    def __init__(self):
        self._name = None
        self._absexpirygmt = None
        return
setcachecontentgroup_absexpirygmt.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_absexpirygmt"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="absexpirygmt", aname="_absexpirygmt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_absexpirygmt, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_absexpirygmtResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_weaknegrelexpiry:
    def __init__(self):
        self._name = None
        self._weaknegrelexpiry = None
        return
setcachecontentgroup_weaknegrelexpiry.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_weaknegrelexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weaknegrelexpiry", aname="_weaknegrelexpiry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_weaknegrelexpiry, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_weaknegrelexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_hitparams:
    def __init__(self):
        self._name = None
        self._hitparams = None
        return
setcachecontentgroup_hitparams.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_hitparams"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hitparams", aname="_hitparams", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_hitparams, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_hitparamsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_invalparams:
    def __init__(self):
        self._name = None
        self._invalparams = None
        return
setcachecontentgroup_invalparams.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalparams"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invalparams", aname="_invalparams", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_invalparams, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalparamsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_ignoreparamvaluecase:
    def __init__(self):
        self._name = None
        self._ignoreparamvaluecase = None
        return
setcachecontentgroup_ignoreparamvaluecase.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignoreparamvaluecase"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="ignoreparamvaluecase", aname="_ignoreparamvaluecase", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_ignoreparamvaluecase, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignoreparamvaluecaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_matchcookies:
    def __init__(self):
        self._name = None
        self._matchcookies = None
        return
setcachecontentgroup_matchcookies.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_matchcookies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="matchcookies", aname="_matchcookies", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_matchcookies, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_matchcookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_invalrestrictedtohost:
    def __init__(self):
        self._name = None
        self._invalrestrictedtohost = None
        return
setcachecontentgroup_invalrestrictedtohost.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalrestrictedtohost"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="invalrestrictedtohost", aname="_invalrestrictedtohost", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_invalrestrictedtohost, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalrestrictedtohostResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_polleverytime:
    def __init__(self):
        self._name = None
        self._polleverytime = None
        return
setcachecontentgroup_polleverytime.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_polleverytime"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="polleverytime", aname="_polleverytime", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_polleverytime, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_polleverytimeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_ignorereloadreq:
    def __init__(self):
        self._name = None
        self._ignorereloadreq = None
        return
setcachecontentgroup_ignorereloadreq.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignorereloadreq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="ignorereloadreq", aname="_ignorereloadreq", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_ignorereloadreq, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignorereloadreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_removecookies:
    def __init__(self):
        self._name = None
        self._removecookies = None
        return
setcachecontentgroup_removecookies.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_removecookies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="removecookies", aname="_removecookies", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_removecookies, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_removecookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_prefetch:
    def __init__(self):
        self._name = None
        self._prefetch = None
        return
setcachecontentgroup_prefetch.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetch"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="prefetch", aname="_prefetch", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_prefetch, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_prefetchperiod:
    def __init__(self):
        self._name = None
        self._prefetchperiod = None
        return
setcachecontentgroup_prefetchperiod.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchperiod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiod", aname="_prefetchperiod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_prefetchperiod, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchperiodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_prefetchperiodmillisec:
    def __init__(self):
        self._name = None
        self._prefetchperiodmillisec = None
        return
setcachecontentgroup_prefetchperiodmillisec.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchperiodmillisec"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiodmillisec", aname="_prefetchperiodmillisec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_prefetchperiodmillisec, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchperiodmillisecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_prefetchmaxpending:
    def __init__(self):
        self._name = None
        self._prefetchmaxpending = None
        return
setcachecontentgroup_prefetchmaxpending.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchmaxpending"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="prefetchmaxpending", aname="_prefetchmaxpending", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_prefetchmaxpending, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_prefetchmaxpendingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_flashcache:
    def __init__(self):
        self._name = None
        self._flashcache = None
        return
setcachecontentgroup_flashcache.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_flashcache"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="flashcache", aname="_flashcache", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_flashcache, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_flashcacheResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_expireatlastbyte:
    def __init__(self):
        self._name = None
        self._expireatlastbyte = None
        return
setcachecontentgroup_expireatlastbyte.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_expireatlastbyte"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="expireatlastbyte", aname="_expireatlastbyte", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_expireatlastbyte, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_expireatlastbyteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_insertvia:
    def __init__(self):
        self._name = None
        self._insertvia = None
        return
setcachecontentgroup_insertvia.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertvia"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="insertvia", aname="_insertvia", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_insertvia, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertviaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_insertage:
    def __init__(self):
        self._name = None
        self._insertage = None
        return
setcachecontentgroup_insertage.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="insertage", aname="_insertage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_insertage, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_insertetag:
    def __init__(self):
        self._name = None
        self._insertetag = None
        return
setcachecontentgroup_insertetag.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertetag"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="insertetag", aname="_insertetag", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_insertetag, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_insertetagResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_cachecontrol:
    def __init__(self):
        self._name = None
        self._cachecontrol = None
        return
setcachecontentgroup_cachecontrol.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_cachecontrol"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cachecontrol", aname="_cachecontrol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_cachecontrol, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_cachecontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_quickabortsize:
    def __init__(self):
        self._name = None
        self._quickabortsize = None
        return
setcachecontentgroup_quickabortsize.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_quickabortsize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="quickabortsize", aname="_quickabortsize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_quickabortsize, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_quickabortsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_minressize:
    def __init__(self):
        self._name = None
        self._minressize = None
        return
setcachecontentgroup_minressize.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_minressize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="minressize", aname="_minressize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_minressize, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_minressizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_maxressize:
    def __init__(self):
        self._name = None
        self._maxressize = None
        return
setcachecontentgroup_maxressize.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_maxressize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxressize", aname="_maxressize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_maxressize, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_maxressizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_memlimit:
    def __init__(self):
        self._name = None
        self._memlimit = None
        return
setcachecontentgroup_memlimit.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_memlimit"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_memlimit, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_ignorereqcachinghdrs:
    def __init__(self):
        self._name = None
        self._ignorereqcachinghdrs = None
        return
setcachecontentgroup_ignorereqcachinghdrs.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignorereqcachinghdrs"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="ignorereqcachinghdrs", aname="_ignorereqcachinghdrs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_ignorereqcachinghdrs, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_ignorereqcachinghdrsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_minhits:
    def __init__(self):
        self._name = None
        self._minhits = None
        return
setcachecontentgroup_minhits.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_minhits"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="minhits", aname="_minhits", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_minhits, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_minhitsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_alwaysevalpolicies:
    def __init__(self):
        self._name = None
        self._alwaysevalpolicies = None
        return
setcachecontentgroup_alwaysevalpolicies.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_alwaysevalpolicies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="alwaysevalpolicies", aname="_alwaysevalpolicies", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_alwaysevalpolicies, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_alwaysevalpoliciesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_pinned:
    def __init__(self):
        self._name = None
        self._pinned = None
        return
setcachecontentgroup_pinned.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_pinned"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="pinned", aname="_pinned", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_pinned, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_pinnedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_lazydnsresolve:
    def __init__(self):
        self._name = None
        self._lazydnsresolve = None
        return
setcachecontentgroup_lazydnsresolve.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_lazydnsresolve"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="lazydnsresolve", aname="_lazydnsresolve", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_lazydnsresolve, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_lazydnsresolveResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_hitselector:
    def __init__(self):
        self._name = None
        self._hitselector = None
        return
setcachecontentgroup_hitselector.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_hitselector"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hitselector", aname="_hitselector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_hitselector, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_hitselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class setcachecontentgroup_invalselector:
    def __init__(self):
        self._name = None
        self._invalselector = None
        return
setcachecontentgroup_invalselector.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalselector"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="invalselector", aname="_invalselector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroup_invalselector, encoded="urn:NSConfig")

class setcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
setcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","setcachecontentgroup_invalselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_weakposrelexpiry:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_weakposrelexpiry.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_weakposrelexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_weakposrelexpiry, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_weakposrelexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_heurexpiryparam:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_heurexpiryparam.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_heurexpiryparam"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_heurexpiryparam, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_heurexpiryparamResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_relexpiry:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_relexpiry.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_relexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_relexpiry, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_relexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_relexpirymillisec:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_relexpirymillisec.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_relexpirymillisec"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_relexpirymillisec, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_relexpirymillisecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_absexpiry:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_absexpiry.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_absexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_absexpiry, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_absexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_absexpirygmt:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_absexpirygmt.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_absexpirygmt"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_absexpirygmt, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_absexpirygmtResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_weaknegrelexpiry:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_weaknegrelexpiry.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_weaknegrelexpiry"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_weaknegrelexpiry, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_weaknegrelexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_hitparams:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_hitparams.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_hitparams"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_hitparams, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_hitparamsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_invalparams:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_invalparams.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalparams"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_invalparams, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalparamsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_ignoreparamvaluecase:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_ignoreparamvaluecase.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignoreparamvaluecase"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_ignoreparamvaluecase, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignoreparamvaluecaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_matchcookies:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_matchcookies.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_matchcookies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_matchcookies, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_matchcookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_invalrestrictedtohost:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_invalrestrictedtohost.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalrestrictedtohost"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_invalrestrictedtohost, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalrestrictedtohostResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_polleverytime:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_polleverytime.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_polleverytime"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_polleverytime, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_polleverytimeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_ignorereloadreq:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_ignorereloadreq.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignorereloadreq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_ignorereloadreq, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignorereloadreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_removecookies:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_removecookies.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_removecookies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_removecookies, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_removecookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_prefetch:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_prefetch.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetch"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_prefetch, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_prefetchperiod:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_prefetchperiod.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchperiod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_prefetchperiod, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchperiodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_prefetchperiodmillisec:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_prefetchperiodmillisec.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchperiodmillisec"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_prefetchperiodmillisec, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchperiodmillisecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_prefetchmaxpending:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_prefetchmaxpending.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchmaxpending"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_prefetchmaxpending, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_prefetchmaxpendingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_flashcache:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_flashcache.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_flashcache"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_flashcache, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_flashcacheResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_expireatlastbyte:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_expireatlastbyte.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_expireatlastbyte"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_expireatlastbyte, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_expireatlastbyteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_insertvia:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_insertvia.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertvia"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_insertvia, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertviaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_insertage:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_insertage.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_insertage, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_insertetag:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_insertetag.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertetag"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_insertetag, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_insertetagResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_cachecontrol:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_cachecontrol.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_cachecontrol"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_cachecontrol, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_cachecontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_quickabortsize:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_quickabortsize.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_quickabortsize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_quickabortsize, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_quickabortsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_minressize:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_minressize.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_minressize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_minressize, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_minressizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_maxressize:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_maxressize.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_maxressize"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_maxressize, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_maxressizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_memlimit:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_memlimit.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_memlimit"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_memlimit, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_ignorereqcachinghdrs:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_ignorereqcachinghdrs.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignorereqcachinghdrs"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_ignorereqcachinghdrs, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_ignorereqcachinghdrsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_minhits:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_minhits.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_minhits"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_minhits, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_minhitsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_alwaysevalpolicies:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_alwaysevalpolicies.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_alwaysevalpolicies"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_alwaysevalpolicies, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_alwaysevalpoliciesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_pinned:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_pinned.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_pinned"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_pinned, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_pinnedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_lazydnsresolve:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_lazydnsresolve.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_lazydnsresolve"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_lazydnsresolve, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_lazydnsresolveResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_hitselector:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_hitselector.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_hitselector"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_hitselector, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_hitselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class unsetcachecontentgroup_invalselector:
    def __init__(self):
        self._name = None
        return
unsetcachecontentgroup_invalselector.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalselector"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroup_invalselector, encoded="urn:NSConfig")

class unsetcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetcachecontentgroup_invalselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcachecontentgroupResponse, encoded="urn:NSConfig")

class getcachecontentgroup:
    def __init__(self):
        self._name = None
        return
getcachecontentgroup.typecode = Struct(pname=("urn:NSConfig","getcachecontentgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcachecontentgroup, encoded="urn:NSConfig")

class getcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
getcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","getcachecontentgroupResponse"), ofwhat=[ns0.getcachecontentgroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcachecontentgroupResponse, encoded="urn:NSConfig")

class expirecachecontentgroup:
    def __init__(self):
        self._name = None
        return
expirecachecontentgroup.typecode = Struct(pname=("urn:NSConfig","expirecachecontentgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=expirecachecontentgroup, encoded="urn:NSConfig")

class expirecachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
expirecachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","expirecachecontentgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=expirecachecontentgroupResponse, encoded="urn:NSConfig")

class flushcachecontentgroup:
    def __init__(self):
        self._name = None
        self._query = None
        self._host = None
        self._selectorvalue = None
        return
flushcachecontentgroup.typecode = Struct(pname=("urn:NSConfig","flushcachecontentgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="query", aname="_query", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="host", aname="_host", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="selectorvalue", aname="_selectorvalue", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=flushcachecontentgroup, encoded="urn:NSConfig")

class flushcachecontentgroupResponse:
    def __init__(self):
        self._return = None
        return
flushcachecontentgroupResponse.typecode = Struct(pname=("urn:NSConfig","flushcachecontentgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=flushcachecontentgroupResponse, encoded="urn:NSConfig")

class addcacheforwardproxy:
    def __init__(self):
        self._ipaddress = None
        self._port = None
        return
addcacheforwardproxy.typecode = Struct(pname=("urn:NSConfig","addcacheforwardproxy"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcacheforwardproxy, encoded="urn:NSConfig")

class addcacheforwardproxyResponse:
    def __init__(self):
        self._return = None
        return
addcacheforwardproxyResponse.typecode = Struct(pname=("urn:NSConfig","addcacheforwardproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcacheforwardproxyResponse, encoded="urn:NSConfig")

class rmcacheforwardproxy:
    def __init__(self):
        self._ipaddress = None
        self._port = None
        return
rmcacheforwardproxy.typecode = Struct(pname=("urn:NSConfig","rmcacheforwardproxy"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcacheforwardproxy, encoded="urn:NSConfig")

class rmcacheforwardproxyResponse:
    def __init__(self):
        self._return = None
        return
rmcacheforwardproxyResponse.typecode = Struct(pname=("urn:NSConfig","rmcacheforwardproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcacheforwardproxyResponse, encoded="urn:NSConfig")

class getcacheforwardproxy:
    def __init__(self):
        return
getcacheforwardproxy.typecode = Struct(pname=("urn:NSConfig","getcacheforwardproxy"), ofwhat=[], pyclass=getcacheforwardproxy, encoded="urn:NSConfig")

class getcacheforwardproxyResponse:
    def __init__(self):
        self._return = None
        return
getcacheforwardproxyResponse.typecode = Struct(pname=("urn:NSConfig","getcacheforwardproxyResponse"), ofwhat=[ns0.getcacheforwardproxyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheforwardproxyResponse, encoded="urn:NSConfig")

class addcacheselector:
    def __init__(self):
        self._selectorname = None
        self._rule = None
        return
addcacheselector.typecode = Struct(pname=("urn:NSConfig","addcacheselector"), ofwhat=[ZSI.TC.String(pname="selectorname", aname="_selectorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcacheselector, encoded="urn:NSConfig")

class addcacheselectorResponse:
    def __init__(self):
        self._return = None
        return
addcacheselectorResponse.typecode = Struct(pname=("urn:NSConfig","addcacheselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcacheselectorResponse, encoded="urn:NSConfig")

class rmcacheselector:
    def __init__(self):
        self._selectorname = None
        return
rmcacheselector.typecode = Struct(pname=("urn:NSConfig","rmcacheselector"), ofwhat=[ZSI.TC.String(pname="selectorname", aname="_selectorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcacheselector, encoded="urn:NSConfig")

class rmcacheselectorResponse:
    def __init__(self):
        self._return = None
        return
rmcacheselectorResponse.typecode = Struct(pname=("urn:NSConfig","rmcacheselectorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcacheselectorResponse, encoded="urn:NSConfig")

class setcacheselector_rule:
    def __init__(self):
        self._selectorname = None
        self._rule = None
        return
setcacheselector_rule.typecode = Struct(pname=("urn:NSConfig","setcacheselector_rule"), ofwhat=[ZSI.TC.String(pname="selectorname", aname="_selectorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheselector_rule, encoded="urn:NSConfig")

class setcacheselectorResponse:
    def __init__(self):
        self._return = None
        return
setcacheselectorResponse.typecode = Struct(pname=("urn:NSConfig","setcacheselector_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheselectorResponse, encoded="urn:NSConfig")

class getcacheselector:
    def __init__(self):
        self._selectorname = None
        return
getcacheselector.typecode = Struct(pname=("urn:NSConfig","getcacheselector"), ofwhat=[ZSI.TC.String(pname="selectorname", aname="_selectorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheselector, encoded="urn:NSConfig")

class getcacheselectorResponse:
    def __init__(self):
        self._return = None
        return
getcacheselectorResponse.typecode = Struct(pname=("urn:NSConfig","getcacheselectorResponse"), ofwhat=[ns0.getcacheselectorResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheselectorResponse, encoded="urn:NSConfig")

class setcacheparameter_memlimit:
    def __init__(self):
        self._memlimit = None
        return
setcacheparameter_memlimit.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_memlimit"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_memlimit, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class setcacheparameter_via:
    def __init__(self):
        self._via = None
        return
setcacheparameter_via.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_via"), ofwhat=[ZSI.TC.String(pname="via", aname="_via", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_via, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_viaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class setcacheparameter_verifyusing:
    def __init__(self):
        self._verifyusing = None
        return
setcacheparameter_verifyusing.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_verifyusing"), ofwhat=[ns0.verifyusingEnum_Def(pname="verifyusing", aname="_verifyusing", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_verifyusing, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_verifyusingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class setcacheparameter_maxpostlen:
    def __init__(self):
        self._maxpostlen = None
        return
setcacheparameter_maxpostlen.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_maxpostlen"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxpostlen", aname="_maxpostlen", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_maxpostlen, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_maxpostlenResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class setcacheparameter_prefetchmaxpending:
    def __init__(self):
        self._prefetchmaxpending = None
        return
setcacheparameter_prefetchmaxpending.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_prefetchmaxpending"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="prefetchmaxpending", aname="_prefetchmaxpending", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_prefetchmaxpending, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_prefetchmaxpendingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class setcacheparameter_enablebypass:
    def __init__(self):
        self._enablebypass = None
        return
setcacheparameter_enablebypass.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_enablebypass"), ofwhat=[ns0.yesnoEnum_Def(pname="enablebypass", aname="_enablebypass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameter_enablebypass, encoded="urn:NSConfig")

class setcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
setcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcacheparameter_enablebypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_memlimit:
    def __init__(self):
        return
unsetcacheparameter_memlimit.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_memlimit"), ofwhat=[], pyclass=unsetcacheparameter_memlimit, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_via:
    def __init__(self):
        return
unsetcacheparameter_via.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_via"), ofwhat=[], pyclass=unsetcacheparameter_via, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_viaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_verifyusing:
    def __init__(self):
        return
unsetcacheparameter_verifyusing.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_verifyusing"), ofwhat=[], pyclass=unsetcacheparameter_verifyusing, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_verifyusingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_maxpostlen:
    def __init__(self):
        return
unsetcacheparameter_maxpostlen.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_maxpostlen"), ofwhat=[], pyclass=unsetcacheparameter_maxpostlen, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_maxpostlenResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_prefetchmaxpending:
    def __init__(self):
        return
unsetcacheparameter_prefetchmaxpending.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_prefetchmaxpending"), ofwhat=[], pyclass=unsetcacheparameter_prefetchmaxpending, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_prefetchmaxpendingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class unsetcacheparameter_enablebypass:
    def __init__(self):
        return
unsetcacheparameter_enablebypass.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_enablebypass"), ofwhat=[], pyclass=unsetcacheparameter_enablebypass, encoded="urn:NSConfig")

class unsetcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcacheparameter_enablebypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcacheparameterResponse, encoded="urn:NSConfig")

class getcacheparameter:
    def __init__(self):
        return
getcacheparameter.typecode = Struct(pname=("urn:NSConfig","getcacheparameter"), ofwhat=[], pyclass=getcacheparameter, encoded="urn:NSConfig")

class getcacheparameterResponse:
    def __init__(self):
        self._return = None
        return
getcacheparameterResponse.typecode = Struct(pname=("urn:NSConfig","getcacheparameterResponse"), ofwhat=[ns0.getcacheparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcacheparameterResponse, encoded="urn:NSConfig")

class getclioutput:
    def __init__(self):
        self._command = None
        return
getclioutput.typecode = Struct(pname=("urn:NSConfig","getclioutput"), ofwhat=[ZSI.TC.String(pname="command", aname="_command", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getclioutput, encoded="urn:NSConfig")

class getclioutputResponse:
    def __init__(self):
        self._return = None
        return
getclioutputResponse.typecode = Struct(pname=("urn:NSConfig","getclioutputResponse"), ofwhat=[ns0.getclioutputResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getclioutputResponse, encoded="urn:NSConfig")

class addcmpaction:
    def __init__(self):
        self._name = None
        self._cmptype = None
        self._deltatype = None
        return
addcmpaction.typecode = Struct(pname=("urn:NSConfig","addcmpaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actioncmptypeEnum_Def(pname="cmptype", aname="_cmptype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actiondeltacmptypeEnum_Def(pname="deltatype", aname="_deltatype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcmpaction, encoded="urn:NSConfig")

class addcmpactionResponse:
    def __init__(self):
        self._return = None
        return
addcmpactionResponse.typecode = Struct(pname=("urn:NSConfig","addcmpactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcmpactionResponse, encoded="urn:NSConfig")

class rmcmpaction:
    def __init__(self):
        self._name = None
        return
rmcmpaction.typecode = Struct(pname=("urn:NSConfig","rmcmpaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcmpaction, encoded="urn:NSConfig")

class rmcmpactionResponse:
    def __init__(self):
        self._return = None
        return
rmcmpactionResponse.typecode = Struct(pname=("urn:NSConfig","rmcmpactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcmpactionResponse, encoded="urn:NSConfig")

class getcmpaction:
    def __init__(self):
        self._name = None
        return
getcmpaction.typecode = Struct(pname=("urn:NSConfig","getcmpaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmpaction, encoded="urn:NSConfig")

class getcmpactionResponse:
    def __init__(self):
        self._return = None
        return
getcmpactionResponse.typecode = Struct(pname=("urn:NSConfig","getcmpactionResponse"), ofwhat=[ns0.getcmpactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmpactionResponse, encoded="urn:NSConfig")

class addcmppolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._resaction = None
        return
addcmppolicy.typecode = Struct(pname=("urn:NSConfig","addcmppolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resaction", aname="_resaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcmppolicy, encoded="urn:NSConfig")

class addcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
addcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","addcmppolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcmppolicyResponse, encoded="urn:NSConfig")

class rmcmppolicy:
    def __init__(self):
        self._name = None
        return
rmcmppolicy.typecode = Struct(pname=("urn:NSConfig","rmcmppolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcmppolicy, encoded="urn:NSConfig")

class rmcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
rmcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmcmppolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcmppolicyResponse, encoded="urn:NSConfig")

class setcmppolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setcmppolicy_rule.typecode = Struct(pname=("urn:NSConfig","setcmppolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmppolicy_rule, encoded="urn:NSConfig")

class setcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
setcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcmppolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmppolicyResponse, encoded="urn:NSConfig")

class setcmppolicy_resaction:
    def __init__(self):
        self._name = None
        self._resaction = None
        return
setcmppolicy_resaction.typecode = Struct(pname=("urn:NSConfig","setcmppolicy_resaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resaction", aname="_resaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmppolicy_resaction, encoded="urn:NSConfig")

class setcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
setcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcmppolicy_resactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmppolicyResponse, encoded="urn:NSConfig")

class unsetcmppolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetcmppolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetcmppolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmppolicy_rule, encoded="urn:NSConfig")

class unsetcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmppolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmppolicyResponse, encoded="urn:NSConfig")

class unsetcmppolicy_resaction:
    def __init__(self):
        self._name = None
        return
unsetcmppolicy_resaction.typecode = Struct(pname=("urn:NSConfig","unsetcmppolicy_resaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmppolicy_resaction, encoded="urn:NSConfig")

class unsetcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmppolicy_resactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmppolicyResponse, encoded="urn:NSConfig")

class getcmppolicy:
    def __init__(self):
        self._name = None
        return
getcmppolicy.typecode = Struct(pname=("urn:NSConfig","getcmppolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmppolicy, encoded="urn:NSConfig")

class getcmppolicyResponse:
    def __init__(self):
        self._return = None
        return
getcmppolicyResponse.typecode = Struct(pname=("urn:NSConfig","getcmppolicyResponse"), ofwhat=[ns0.getcmppolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmppolicyResponse, encoded="urn:NSConfig")

class bindcmpglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._state = None
        return
bindcmpglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindcmpglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcmpglobal_policy, encoded="urn:NSConfig")

class bindcmpglobalResponse:
    def __init__(self):
        self._return = None
        return
bindcmpglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindcmpglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcmpglobalResponse, encoded="urn:NSConfig")

class unbindcmpglobal_policy:
    def __init__(self):
        self._policyname = None
        return
unbindcmpglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindcmpglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcmpglobal_policy, encoded="urn:NSConfig")

class unbindcmpglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindcmpglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindcmpglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcmpglobalResponse, encoded="urn:NSConfig")

class getcmpglobal:
    def __init__(self):
        return
getcmpglobal.typecode = Struct(pname=("urn:NSConfig","getcmpglobal"), ofwhat=[], pyclass=getcmpglobal, encoded="urn:NSConfig")

class getcmpglobalResponse:
    def __init__(self):
        self._return = None
        return
getcmpglobalResponse.typecode = Struct(pname=("urn:NSConfig","getcmpglobalResponse"), ofwhat=[ns0.getcmpglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmpglobalResponse, encoded="urn:NSConfig")

class setcmpparameter_cmplevel:
    def __init__(self):
        self._cmplevel = None
        return
setcmpparameter_cmplevel.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_cmplevel"), ofwhat=[ns0.cmplevelEnum_Def(pname="cmplevel", aname="_cmplevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_cmplevel, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_cmplevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class setcmpparameter_quantumsize:
    def __init__(self):
        self._quantumsize = None
        return
setcmpparameter_quantumsize.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_quantumsize"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="quantumsize", aname="_quantumsize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_quantumsize, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_quantumsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class setcmpparameter_servercmp:
    def __init__(self):
        self._servercmp = None
        return
setcmpparameter_servercmp.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_servercmp"), ofwhat=[ns0.onoffEnum_Def(pname="servercmp", aname="_servercmp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_servercmp, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_servercmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class setcmpparameter_heurexpiry:
    def __init__(self):
        self._heurexpiry = None
        return
setcmpparameter_heurexpiry.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpiry"), ofwhat=[ns0.onoffEnum_Def(pname="heurexpiry", aname="_heurexpiry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_heurexpiry, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class setcmpparameter_heurexpirythres:
    def __init__(self):
        self._heurexpirythres = None
        return
setcmpparameter_heurexpirythres.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpirythres"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="heurexpirythres", aname="_heurexpirythres", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_heurexpirythres, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpirythresResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class setcmpparameter_heurexpiryhistwt:
    def __init__(self):
        self._heurexpiryhistwt = None
        return
setcmpparameter_heurexpiryhistwt.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpiryhistwt"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="heurexpiryhistwt", aname="_heurexpiryhistwt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameter_heurexpiryhistwt, encoded="urn:NSConfig")

class setcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
setcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","setcmpparameter_heurexpiryhistwtResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_cmplevel:
    def __init__(self):
        return
unsetcmpparameter_cmplevel.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_cmplevel"), ofwhat=[], pyclass=unsetcmpparameter_cmplevel, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_cmplevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_quantumsize:
    def __init__(self):
        return
unsetcmpparameter_quantumsize.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_quantumsize"), ofwhat=[], pyclass=unsetcmpparameter_quantumsize, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_quantumsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_servercmp:
    def __init__(self):
        return
unsetcmpparameter_servercmp.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_servercmp"), ofwhat=[], pyclass=unsetcmpparameter_servercmp, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_servercmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_heurexpiry:
    def __init__(self):
        return
unsetcmpparameter_heurexpiry.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpiry"), ofwhat=[], pyclass=unsetcmpparameter_heurexpiry, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpiryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_heurexpirythres:
    def __init__(self):
        return
unsetcmpparameter_heurexpirythres.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpirythres"), ofwhat=[], pyclass=unsetcmpparameter_heurexpirythres, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpirythresResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class unsetcmpparameter_heurexpiryhistwt:
    def __init__(self):
        return
unsetcmpparameter_heurexpiryhistwt.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpiryhistwt"), ofwhat=[], pyclass=unsetcmpparameter_heurexpiryhistwt, encoded="urn:NSConfig")

class unsetcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetcmpparameter_heurexpiryhistwtResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcmpparameterResponse, encoded="urn:NSConfig")

class getcmpparameter:
    def __init__(self):
        return
getcmpparameter.typecode = Struct(pname=("urn:NSConfig","getcmpparameter"), ofwhat=[], pyclass=getcmpparameter, encoded="urn:NSConfig")

class getcmpparameterResponse:
    def __init__(self):
        self._return = None
        return
getcmpparameterResponse.typecode = Struct(pname=("urn:NSConfig","getcmpparameterResponse"), ofwhat=[ns0.getcmpparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcmpparameterResponse, encoded="urn:NSConfig")

class addcrpolicy:
    def __init__(self):
        self._policyname = None
        self._rule = None
        return
addcrpolicy.typecode = Struct(pname=("urn:NSConfig","addcrpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcrpolicy, encoded="urn:NSConfig")

class addcrpolicyResponse:
    def __init__(self):
        self._return = None
        return
addcrpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addcrpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcrpolicyResponse, encoded="urn:NSConfig")

class rmcrpolicy:
    def __init__(self):
        self._policyname = None
        return
rmcrpolicy.typecode = Struct(pname=("urn:NSConfig","rmcrpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcrpolicy, encoded="urn:NSConfig")

class rmcrpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmcrpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmcrpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcrpolicyResponse, encoded="urn:NSConfig")

class setcrpolicy_rule:
    def __init__(self):
        self._policyname = None
        self._rule = None
        return
setcrpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setcrpolicy_rule"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrpolicy_rule, encoded="urn:NSConfig")

class setcrpolicyResponse:
    def __init__(self):
        self._return = None
        return
setcrpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcrpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrpolicyResponse, encoded="urn:NSConfig")

class getcrpolicy:
    def __init__(self):
        self._policyname = None
        return
getcrpolicy.typecode = Struct(pname=("urn:NSConfig","getcrpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcrpolicy, encoded="urn:NSConfig")

class getcrpolicyResponse:
    def __init__(self):
        self._return = None
        return
getcrpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getcrpolicyResponse"), ofwhat=[ns0.getcrpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcrpolicyResponse, encoded="urn:NSConfig")

class addcrvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._port = None
        self._range = None
        self._cachetype = None
        self._state = None
        return
addcrvserver.typecode = Struct(pname=("urn:NSConfig","addcrvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.cachtypeEnum_Def(pname="cachetype", aname="_cachetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcrvserver, encoded="urn:NSConfig")

class addcrvserverResponse:
    def __init__(self):
        self._return = None
        return
addcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","addcrvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcrvserverResponse, encoded="urn:NSConfig")

class rmcrvserver:
    def __init__(self):
        self._name = None
        return
rmcrvserver.typecode = Struct(pname=("urn:NSConfig","rmcrvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcrvserver, encoded="urn:NSConfig")

class rmcrvserverResponse:
    def __init__(self):
        self._return = None
        return
rmcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmcrvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setcrvserver_ipaddress.typecode = Struct(pname=("urn:NSConfig","setcrvserver_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_ipaddress, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_redirect:
    def __init__(self):
        self._name = None
        self._redirect = None
        return
setcrvserver_redirect.typecode = Struct(pname=("urn:NSConfig","setcrvserver_redirect"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crdtypeEnum_Def(pname="redirect", aname="_redirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_redirect, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_precedence:
    def __init__(self):
        self._name = None
        self._precedence = None
        return
setcrvserver_precedence.typecode = Struct(pname=("urn:NSConfig","setcrvserver_precedence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.csprecedenceEnum_Def(pname="precedence", aname="_precedence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_precedence, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_precedenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_via:
    def __init__(self):
        self._name = None
        self._via = None
        return
setcrvserver_via.typecode = Struct(pname=("urn:NSConfig","setcrvserver_via"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="via", aname="_via", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_via, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_viaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_cachevserver:
    def __init__(self):
        self._name = None
        self._cachevserver = None
        return
setcrvserver_cachevserver.typecode = Struct(pname=("urn:NSConfig","setcrvserver_cachevserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_cachevserver, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_cachevserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_dnsvservername:
    def __init__(self):
        self._name = None
        self._dnsvservername = None
        return
setcrvserver_dnsvservername.typecode = Struct(pname=("urn:NSConfig","setcrvserver_dnsvservername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_dnsvservername, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_destinationvserver:
    def __init__(self):
        self._name = None
        self._destinationvserver = None
        return
setcrvserver_destinationvserver.typecode = Struct(pname=("urn:NSConfig","setcrvserver_destinationvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destinationvserver", aname="_destinationvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_destinationvserver, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_destinationvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_domain:
    def __init__(self):
        self._name = None
        self._domain = None
        return
setcrvserver_domain.typecode = Struct(pname=("urn:NSConfig","setcrvserver_domain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_domain, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_domainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_reuse:
    def __init__(self):
        self._name = None
        self._reuse = None
        return
setcrvserver_reuse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_reuse"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="reuse", aname="_reuse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_reuse, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_reuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_backupvserver:
    def __init__(self):
        self._name = None
        self._backupvserver = None
        return
setcrvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","setcrvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_backupvserver, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_redirecturl:
    def __init__(self):
        self._name = None
        self._redirecturl = None
        return
setcrvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","setcrvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_redirecturl, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_clttimeout:
    def __init__(self):
        self._name = None
        self._clttimeout = None
        return
setcrvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","setcrvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_clttimeout, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class setcrvserver_downstateflush:
    def __init__(self):
        self._name = None
        self._downstateflush = None
        return
setcrvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","setcrvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserver_downstateflush, encoded="urn:NSConfig")

class setcrvserverResponse:
    def __init__(self):
        self._return = None
        return
setcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcrvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_cachevserver:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_cachevserver.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_cachevserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_cachevserver, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_cachevserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_dnsvserver:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_dnsvserver.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_dnsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_dnsvserver, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_dnsvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_destinationvserver:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_destinationvserver.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_destinationvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_destinationvserver, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_destinationvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_domainname:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_domainname.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_domainname, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_backupvserver:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_backupvserver, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_redirecturl:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_redirecturl, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_redirect:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_redirect.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_redirect"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_redirect, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_precedence:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_precedence.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_precedence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_precedence, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_precedenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_via:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_via.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_via"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_via, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_viaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_cachevserver2:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_cachevserver2.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_cachevserver2"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_cachevserver2, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_cachevserver2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_dnsvservername:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_dnsvservername.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_dnsvservername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_dnsvservername, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_destinationvserver2:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_destinationvserver2.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_destinationvserver2"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_destinationvserver2, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_destinationvserver2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_domain:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_domain.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_domain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_domain, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_domainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_reuse:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_reuse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_reuse"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_reuse, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_reuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_clttimeout:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_clttimeout, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class unsetcrvserver_downstateflush:
    def __init__(self):
        self._name = None
        return
unsetcrvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserver_downstateflush, encoded="urn:NSConfig")

class unsetcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcrvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcrvserverResponse, encoded="urn:NSConfig")

class bindcrvserver_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        self._targetvserver = None
        return
bindcrvserver_policy.typecode = Struct(pname=("urn:NSConfig","bindcrvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="targetvserver", aname="_targetvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcrvserver_policy, encoded="urn:NSConfig")

class bindcrvserverResponse:
    def __init__(self):
        self._return = None
        return
bindcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindcrvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcrvserverResponse, encoded="urn:NSConfig")

class unbindcrvserver_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        return
unbindcrvserver_policy.typecode = Struct(pname=("urn:NSConfig","unbindcrvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcrvserver_policy, encoded="urn:NSConfig")

class unbindcrvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindcrvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcrvserverResponse, encoded="urn:NSConfig")

class enablecrvserver:
    def __init__(self):
        self._name = None
        return
enablecrvserver.typecode = Struct(pname=("urn:NSConfig","enablecrvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablecrvserver, encoded="urn:NSConfig")

class enablecrvserverResponse:
    def __init__(self):
        self._return = None
        return
enablecrvserverResponse.typecode = Struct(pname=("urn:NSConfig","enablecrvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablecrvserverResponse, encoded="urn:NSConfig")

class disablecrvserver:
    def __init__(self):
        self._name = None
        return
disablecrvserver.typecode = Struct(pname=("urn:NSConfig","disablecrvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablecrvserver, encoded="urn:NSConfig")

class disablecrvserverResponse:
    def __init__(self):
        self._return = None
        return
disablecrvserverResponse.typecode = Struct(pname=("urn:NSConfig","disablecrvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablecrvserverResponse, encoded="urn:NSConfig")

class getcrvserver:
    def __init__(self):
        self._name = None
        return
getcrvserver.typecode = Struct(pname=("urn:NSConfig","getcrvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcrvserver, encoded="urn:NSConfig")

class getcrvserverResponse:
    def __init__(self):
        self._return = None
        return
getcrvserverResponse.typecode = Struct(pname=("urn:NSConfig","getcrvserverResponse"), ofwhat=[ns0.getcrvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcrvserverResponse, encoded="urn:NSConfig")

class addcspolicy:
    def __init__(self):
        self._policyname = None
        self._url = None
        self._rule = None
        self._domain = None
        return
addcspolicy.typecode = Struct(pname=("urn:NSConfig","addcspolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcspolicy, encoded="urn:NSConfig")

class addcspolicyResponse:
    def __init__(self):
        self._return = None
        return
addcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","addcspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcspolicyResponse, encoded="urn:NSConfig")

class rmcspolicy:
    def __init__(self):
        self._policyname = None
        return
rmcspolicy.typecode = Struct(pname=("urn:NSConfig","rmcspolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcspolicy, encoded="urn:NSConfig")

class rmcspolicyResponse:
    def __init__(self):
        self._return = None
        return
rmcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmcspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcspolicyResponse, encoded="urn:NSConfig")

class setcspolicy_url:
    def __init__(self):
        self._policyname = None
        self._url = None
        return
setcspolicy_url.typecode = Struct(pname=("urn:NSConfig","setcspolicy_url"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicy_url, encoded="urn:NSConfig")

class setcspolicyResponse:
    def __init__(self):
        self._return = None
        return
setcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcspolicy_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicyResponse, encoded="urn:NSConfig")

class setcspolicy_rule:
    def __init__(self):
        self._policyname = None
        self._rule = None
        return
setcspolicy_rule.typecode = Struct(pname=("urn:NSConfig","setcspolicy_rule"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicy_rule, encoded="urn:NSConfig")

class setcspolicyResponse:
    def __init__(self):
        self._return = None
        return
setcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicyResponse, encoded="urn:NSConfig")

class setcspolicy_domain:
    def __init__(self):
        self._policyname = None
        self._domain = None
        return
setcspolicy_domain.typecode = Struct(pname=("urn:NSConfig","setcspolicy_domain"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicy_domain, encoded="urn:NSConfig")

class setcspolicyResponse:
    def __init__(self):
        self._return = None
        return
setcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setcspolicy_domainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcspolicyResponse, encoded="urn:NSConfig")

class unsetcspolicy_url:
    def __init__(self):
        self._policyname = None
        return
unsetcspolicy_url.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_url"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicy_url, encoded="urn:NSConfig")

class unsetcspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicyResponse, encoded="urn:NSConfig")

class unsetcspolicy_rule:
    def __init__(self):
        self._policyname = None
        return
unsetcspolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_rule"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicy_rule, encoded="urn:NSConfig")

class unsetcspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicyResponse, encoded="urn:NSConfig")

class unsetcspolicy_domain:
    def __init__(self):
        self._policyname = None
        return
unsetcspolicy_domain.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_domain"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicy_domain, encoded="urn:NSConfig")

class unsetcspolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetcspolicy_domainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcspolicyResponse, encoded="urn:NSConfig")

class getcspolicy:
    def __init__(self):
        self._policyname = None
        return
getcspolicy.typecode = Struct(pname=("urn:NSConfig","getcspolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcspolicy, encoded="urn:NSConfig")

class getcspolicyResponse:
    def __init__(self):
        self._return = None
        return
getcspolicyResponse.typecode = Struct(pname=("urn:NSConfig","getcspolicyResponse"), ofwhat=[ns0.getcspolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcspolicyResponse, encoded="urn:NSConfig")

class addcsvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._range = None
        self._port = None
        self._state = None
        self._vipheader = None
        return
addcsvserver.typecode = Struct(pname=("urn:NSConfig","addcsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.csvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vipheader", aname="_vipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcsvserver, encoded="urn:NSConfig")

class addcsvserverResponse:
    def __init__(self):
        self._return = None
        return
addcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","addcsvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcsvserverResponse, encoded="urn:NSConfig")

class addcsvserverEx:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._ippattern = None
        self._ipmask = None
        self._range = None
        self._port = None
        self._state = None
        self._vipheader = None
        return
addcsvserverEx.typecode = Struct(pname=("urn:NSConfig","addcsvserverEx"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.csvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ippattern", aname="_ippattern", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipmask", aname="_ipmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vipheader", aname="_vipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcsvserverEx, encoded="urn:NSConfig")

class addcsvserverResponse:
    def __init__(self):
        self._return = None
        return
addcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","addcsvserverExResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addcsvserverResponse, encoded="urn:NSConfig")

class rmcsvserver:
    def __init__(self):
        self._name = None
        return
rmcsvserver.typecode = Struct(pname=("urn:NSConfig","rmcsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcsvserver, encoded="urn:NSConfig")

class rmcsvserverResponse:
    def __init__(self):
        self._return = None
        return
rmcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmcsvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setcsvserver_ipaddress.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_ipaddress, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_ippattern:
    def __init__(self):
        self._name = None
        self._ippattern = None
        return
setcsvserver_ippattern.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ippattern"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ippattern", aname="_ippattern", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_ippattern, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ippatternResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_ipmask:
    def __init__(self):
        self._name = None
        self._ipmask = None
        return
setcsvserver_ipmask.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ipmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipmask", aname="_ipmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_ipmask, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_ipmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_stateupdate:
    def __init__(self):
        self._name = None
        self._stateupdate = None
        return
setcsvserver_stateupdate.typecode = Struct(pname=("urn:NSConfig","setcsvserver_stateupdate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="stateupdate", aname="_stateupdate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_stateupdate, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_stateupdateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_precedence:
    def __init__(self):
        self._name = None
        self._precedence = None
        return
setcsvserver_precedence.typecode = Struct(pname=("urn:NSConfig","setcsvserver_precedence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.csprecedenceEnum_Def(pname="precedence", aname="_precedence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_precedence, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_precedenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_casesensitive:
    def __init__(self):
        self._name = None
        self._casesensitive = None
        return
setcsvserver_casesensitive.typecode = Struct(pname=("urn:NSConfig","setcsvserver_casesensitive"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="casesensitive", aname="_casesensitive", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_casesensitive, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_casesensitiveResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_backupvserver:
    def __init__(self):
        self._name = None
        self._backupvserver = None
        return
setcsvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","setcsvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_backupvserver, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_redirecturl:
    def __init__(self):
        self._name = None
        self._redirecturl = None
        return
setcsvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","setcsvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_redirecturl, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_cacheable:
    def __init__(self):
        self._name = None
        self._cacheable = None
        return
setcsvserver_cacheable.typecode = Struct(pname=("urn:NSConfig","setcsvserver_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cacheable", aname="_cacheable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_cacheable, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_clttimeout:
    def __init__(self):
        self._name = None
        self._clttimeout = None
        return
setcsvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","setcsvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_clttimeout, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_somethod:
    def __init__(self):
        self._name = None
        self._somethod = None
        return
setcsvserver_somethod.typecode = Struct(pname=("urn:NSConfig","setcsvserver_somethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.spillovermethodsEnum_Def(pname="somethod", aname="_somethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_somethod, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_somethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_sopersistence:
    def __init__(self):
        self._name = None
        self._sopersistence = None
        return
setcsvserver_sopersistence.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sopersistence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sopersistence", aname="_sopersistence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_sopersistence, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sopersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_sopersistencetimeout:
    def __init__(self):
        self._name = None
        self._sopersistencetimeout = None
        return
setcsvserver_sopersistencetimeout.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sopersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_sopersistencetimeout, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sopersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_sothreshold:
    def __init__(self):
        self._name = None
        self._sothreshold = None
        return
setcsvserver_sothreshold.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sothreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_sothreshold, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_sothresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_redirectportrewrite:
    def __init__(self):
        self._name = None
        self._redirectportrewrite = None
        return
setcsvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","setcsvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="redirectportrewrite", aname="_redirectportrewrite", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_redirectportrewrite, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_downstateflush:
    def __init__(self):
        self._name = None
        self._downstateflush = None
        return
setcsvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","setcsvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_downstateflush, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class setcsvserver_insertvserveripport:
    def __init__(self):
        self._name = None
        self._insertvserveripport = None
        self._vipheader = None
        return
setcsvserver_insertvserveripport.typecode = Struct(pname=("urn:NSConfig","setcsvserver_insertvserveripport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vipinsertEnum_Def(pname="insertvserveripport", aname="_insertvserveripport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vipheader", aname="_vipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserver_insertvserveripport, encoded="urn:NSConfig")

class setcsvserverResponse:
    def __init__(self):
        self._return = None
        return
setcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","setcsvserver_insertvserveripportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_casesensitive:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_casesensitive.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_casesensitive"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_casesensitive, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_casesensitiveResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_backupvserver:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_backupvserver, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_redirecturl:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_redirecturl, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_stateupdate:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_stateupdate.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_stateupdate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_stateupdate, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_stateupdateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_precedence:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_precedence.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_precedence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_precedence, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_precedenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_cacheable:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_cacheable.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_cacheable, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_clttimeout:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_clttimeout, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_somethod:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_somethod.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_somethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_somethod, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_somethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_sopersistence:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_sopersistence.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sopersistence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_sopersistence, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sopersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_sopersistencetimeout:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_sopersistencetimeout.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sopersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_sopersistencetimeout, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sopersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_sothreshold:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_sothreshold.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sothreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_sothreshold, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_sothresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_redirectportrewrite:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_redirectportrewrite, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_downstateflush:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_downstateflush, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_insertvserveripport:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_insertvserveripport.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_insertvserveripport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_insertvserveripport, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_insertvserveripportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class unsetcsvserver_vipheader:
    def __init__(self):
        self._name = None
        return
unsetcsvserver_vipheader.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_vipheader"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserver_vipheader, encoded="urn:NSConfig")

class unsetcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetcsvserver_vipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetcsvserverResponse, encoded="urn:NSConfig")

class bindcsvserver_targetvserver:
    def __init__(self):
        self._name = None
        self._targetvserver = None
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._type = None
        self._invoke = None
        self._labeltype = None
        self._labelname = None
        return
bindcsvserver_targetvserver.typecode = Struct(pname=("urn:NSConfig","bindcsvserver_targetvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="targetvserver", aname="_targetvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vserverbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcsvserver_targetvserver, encoded="urn:NSConfig")

class bindcsvserverResponse:
    def __init__(self):
        self._return = None
        return
bindcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindcsvserver_targetvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindcsvserverResponse, encoded="urn:NSConfig")

class unbindcsvserver_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        self._type = None
        return
unbindcsvserver_policy.typecode = Struct(pname=("urn:NSConfig","unbindcsvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vserverbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcsvserver_policy, encoded="urn:NSConfig")

class unbindcsvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindcsvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindcsvserverResponse, encoded="urn:NSConfig")

class enablecsvserver:
    def __init__(self):
        self._name = None
        return
enablecsvserver.typecode = Struct(pname=("urn:NSConfig","enablecsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablecsvserver, encoded="urn:NSConfig")

class enablecsvserverResponse:
    def __init__(self):
        self._return = None
        return
enablecsvserverResponse.typecode = Struct(pname=("urn:NSConfig","enablecsvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablecsvserverResponse, encoded="urn:NSConfig")

class disablecsvserver:
    def __init__(self):
        self._name = None
        return
disablecsvserver.typecode = Struct(pname=("urn:NSConfig","disablecsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablecsvserver, encoded="urn:NSConfig")

class disablecsvserverResponse:
    def __init__(self):
        self._return = None
        return
disablecsvserverResponse.typecode = Struct(pname=("urn:NSConfig","disablecsvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablecsvserverResponse, encoded="urn:NSConfig")

class getcsvserver:
    def __init__(self):
        self._name = None
        return
getcsvserver.typecode = Struct(pname=("urn:NSConfig","getcsvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcsvserver, encoded="urn:NSConfig")

class getcsvserverResponse:
    def __init__(self):
        self._return = None
        return
getcsvserverResponse.typecode = Struct(pname=("urn:NSConfig","getcsvserverResponse"), ofwhat=[ns0.getcsvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getcsvserverResponse, encoded="urn:NSConfig")

class flushdnsproxyrecords:
    def __init__(self):
        return
flushdnsproxyrecords.typecode = Struct(pname=("urn:NSConfig","flushdnsproxyrecords"), ofwhat=[], pyclass=flushdnsproxyrecords, encoded="urn:NSConfig")

class flushdnsproxyrecordsResponse:
    def __init__(self):
        self._return = None
        return
flushdnsproxyrecordsResponse.typecode = Struct(pname=("urn:NSConfig","flushdnsproxyrecordsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=flushdnsproxyrecordsResponse, encoded="urn:NSConfig")

class adddnsaaaarec:
    def __init__(self):
        self._hostname = None
        self._ipv6address = None
        self._ttl = None
        return
adddnsaaaarec.typecode = Struct(pname=("urn:NSConfig","adddnsaaaarec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsaaaarec, encoded="urn:NSConfig")

class adddnsaaaarecResponse:
    def __init__(self):
        self._return = None
        return
adddnsaaaarecResponse.typecode = Struct(pname=("urn:NSConfig","adddnsaaaarecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsaaaarecResponse, encoded="urn:NSConfig")

class rmdnsaaaarec:
    def __init__(self):
        self._hostname = None
        self._ipv6address = None
        return
rmdnsaaaarec.typecode = Struct(pname=("urn:NSConfig","rmdnsaaaarec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsaaaarec, encoded="urn:NSConfig")

class rmdnsaaaarecResponse:
    def __init__(self):
        self._return = None
        return
rmdnsaaaarecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsaaaarecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsaaaarecResponse, encoded="urn:NSConfig")

class getdnsaaaarec:
    def __init__(self):
        self._hostname = None
        self._type = None
        return
getdnsaaaarec.typecode = Struct(pname=("urn:NSConfig","getdnsaaaarec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsaaaarec, encoded="urn:NSConfig")

class getdnsaaaarecResponse:
    def __init__(self):
        self._return = None
        return
getdnsaaaarecResponse.typecode = Struct(pname=("urn:NSConfig","getdnsaaaarecResponse"), ofwhat=[ns0.getdnsaaaarecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsaaaarecResponse, encoded="urn:NSConfig")

class adddnsaddrec:
    def __init__(self):
        self._hostname = None
        self._ipaddress = None
        self._ttl = None
        return
adddnsaddrec.typecode = Struct(pname=("urn:NSConfig","adddnsaddrec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsaddrec, encoded="urn:NSConfig")

class adddnsaddrecResponse:
    def __init__(self):
        self._return = None
        return
adddnsaddrecResponse.typecode = Struct(pname=("urn:NSConfig","adddnsaddrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsaddrecResponse, encoded="urn:NSConfig")

class rmdnsaddrec:
    def __init__(self):
        self._hostname = None
        self._ipaddress = None
        return
rmdnsaddrec.typecode = Struct(pname=("urn:NSConfig","rmdnsaddrec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsaddrec, encoded="urn:NSConfig")

class rmdnsaddrecResponse:
    def __init__(self):
        self._return = None
        return
rmdnsaddrecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsaddrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsaddrecResponse, encoded="urn:NSConfig")

class getdnsaddrec:
    def __init__(self):
        self._hostname = None
        self._type = None
        return
getdnsaddrec.typecode = Struct(pname=("urn:NSConfig","getdnsaddrec"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsaddrec, encoded="urn:NSConfig")

class getdnsaddrecResponse:
    def __init__(self):
        self._return = None
        return
getdnsaddrecResponse.typecode = Struct(pname=("urn:NSConfig","getdnsaddrecResponse"), ofwhat=[ns0.getdnsaddrecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsaddrecResponse, encoded="urn:NSConfig")

class adddnscnamerec:
    def __init__(self):
        self._aliasname = None
        self._canonicalname = None
        self._ttl = None
        return
adddnscnamerec.typecode = Struct(pname=("urn:NSConfig","adddnscnamerec"), ofwhat=[ZSI.TC.String(pname="aliasname", aname="_aliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="canonicalname", aname="_canonicalname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnscnamerec, encoded="urn:NSConfig")

class adddnscnamerecResponse:
    def __init__(self):
        self._return = None
        return
adddnscnamerecResponse.typecode = Struct(pname=("urn:NSConfig","adddnscnamerecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnscnamerecResponse, encoded="urn:NSConfig")

class rmdnscnamerec:
    def __init__(self):
        self._aliasname = None
        return
rmdnscnamerec.typecode = Struct(pname=("urn:NSConfig","rmdnscnamerec"), ofwhat=[ZSI.TC.String(pname="aliasname", aname="_aliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnscnamerec, encoded="urn:NSConfig")

class rmdnscnamerecResponse:
    def __init__(self):
        self._return = None
        return
rmdnscnamerecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnscnamerecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnscnamerecResponse, encoded="urn:NSConfig")

class getdnscnamerec:
    def __init__(self):
        self._aliasname = None
        self._type = None
        return
getdnscnamerec.typecode = Struct(pname=("urn:NSConfig","getdnscnamerec"), ofwhat=[ZSI.TC.String(pname="aliasname", aname="_aliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnscnamerec, encoded="urn:NSConfig")

class getdnscnamerecResponse:
    def __init__(self):
        self._return = None
        return
getdnscnamerecResponse.typecode = Struct(pname=("urn:NSConfig","getdnscnamerecResponse"), ofwhat=[ns0.getdnscnamerecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnscnamerecResponse, encoded="urn:NSConfig")

class adddnsmxrec:
    def __init__(self):
        self._domain = None
        self._mx = None
        self._pref = None
        return
adddnsmxrec.typecode = Struct(pname=("urn:NSConfig","adddnsmxrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mx", aname="_mx", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="pref", aname="_pref", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsmxrec, encoded="urn:NSConfig")

class adddnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
adddnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","adddnsmxrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsmxrecResponse, encoded="urn:NSConfig")

class rmdnsmxrec:
    def __init__(self):
        self._domain = None
        self._mx = None
        return
rmdnsmxrec.typecode = Struct(pname=("urn:NSConfig","rmdnsmxrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mx", aname="_mx", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsmxrec, encoded="urn:NSConfig")

class rmdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
rmdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsmxrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsmxrecResponse, encoded="urn:NSConfig")

class setdnsmxrec_mx:
    def __init__(self):
        self._domain = None
        self._mx = None
        return
setdnsmxrec_mx.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_mx"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mx", aname="_mx", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrec_mx, encoded="urn:NSConfig")

class setdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
setdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_mxResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrecResponse, encoded="urn:NSConfig")

class setdnsmxrec_pref:
    def __init__(self):
        self._domain = None
        self._mx = None
        self._pref = None
        return
setdnsmxrec_pref.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_pref"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mx", aname="_mx", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="pref", aname="_pref", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrec_pref, encoded="urn:NSConfig")

class setdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
setdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_prefResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrecResponse, encoded="urn:NSConfig")

class setdnsmxrec_ttl:
    def __init__(self):
        self._domain = None
        self._mx = None
        self._ttl = None
        return
setdnsmxrec_ttl.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mx", aname="_mx", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrec_ttl, encoded="urn:NSConfig")

class setdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
setdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnsmxrec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsmxrecResponse, encoded="urn:NSConfig")

class unsetdnsmxrec_ttl:
    def __init__(self):
        self._domain = None
        return
unsetdnsmxrec_ttl.typecode = Struct(pname=("urn:NSConfig","unsetdnsmxrec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsmxrec_ttl, encoded="urn:NSConfig")

class unsetdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsmxrec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsmxrecResponse, encoded="urn:NSConfig")

class getdnsmxrec:
    def __init__(self):
        self._domain = None
        self._type = None
        return
getdnsmxrec.typecode = Struct(pname=("urn:NSConfig","getdnsmxrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsmxrec, encoded="urn:NSConfig")

class getdnsmxrecResponse:
    def __init__(self):
        self._return = None
        return
getdnsmxrecResponse.typecode = Struct(pname=("urn:NSConfig","getdnsmxrecResponse"), ofwhat=[ns0.getdnsmxrecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsmxrecResponse, encoded="urn:NSConfig")

class adddnsnsrec:
    def __init__(self):
        self._domain = None
        self._nameserver = None
        self._ttl = None
        return
adddnsnsrec.typecode = Struct(pname=("urn:NSConfig","adddnsnsrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nameserver", aname="_nameserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsnsrec, encoded="urn:NSConfig")

class adddnsnsrecResponse:
    def __init__(self):
        self._return = None
        return
adddnsnsrecResponse.typecode = Struct(pname=("urn:NSConfig","adddnsnsrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsnsrecResponse, encoded="urn:NSConfig")

class rmdnsnsrec:
    def __init__(self):
        self._domain = None
        self._nameserver = None
        return
rmdnsnsrec.typecode = Struct(pname=("urn:NSConfig","rmdnsnsrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nameserver", aname="_nameserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsnsrec, encoded="urn:NSConfig")

class rmdnsnsrecResponse:
    def __init__(self):
        self._return = None
        return
rmdnsnsrecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsnsrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsnsrecResponse, encoded="urn:NSConfig")

class getdnsnsrec:
    def __init__(self):
        self._domain = None
        self._type = None
        return
getdnsnsrec.typecode = Struct(pname=("urn:NSConfig","getdnsnsrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsnsrec, encoded="urn:NSConfig")

class getdnsnsrecResponse:
    def __init__(self):
        self._return = None
        return
getdnsnsrecResponse.typecode = Struct(pname=("urn:NSConfig","getdnsnsrecResponse"), ofwhat=[ns0.getdnsnsrecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsnsrecResponse, encoded="urn:NSConfig")

class adddnsptrrec:
    def __init__(self):
        self._reversedomain = None
        self._domain = None
        self._ttl = None
        return
adddnsptrrec.typecode = Struct(pname=("urn:NSConfig","adddnsptrrec"), ofwhat=[ZSI.TC.String(pname="reversedomain", aname="_reversedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsptrrec, encoded="urn:NSConfig")

class adddnsptrrecResponse:
    def __init__(self):
        self._return = None
        return
adddnsptrrecResponse.typecode = Struct(pname=("urn:NSConfig","adddnsptrrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsptrrecResponse, encoded="urn:NSConfig")

class rmdnsptrrec:
    def __init__(self):
        self._reversedomain = None
        self._domain = None
        return
rmdnsptrrec.typecode = Struct(pname=("urn:NSConfig","rmdnsptrrec"), ofwhat=[ZSI.TC.String(pname="reversedomain", aname="_reversedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsptrrec, encoded="urn:NSConfig")

class rmdnsptrrecResponse:
    def __init__(self):
        self._return = None
        return
rmdnsptrrecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsptrrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsptrrecResponse, encoded="urn:NSConfig")

class getdnsptrrec:
    def __init__(self):
        self._reversedomain = None
        self._type = None
        return
getdnsptrrec.typecode = Struct(pname=("urn:NSConfig","getdnsptrrec"), ofwhat=[ZSI.TC.String(pname="reversedomain", aname="_reversedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsptrrec, encoded="urn:NSConfig")

class getdnsptrrecResponse:
    def __init__(self):
        self._return = None
        return
getdnsptrrecResponse.typecode = Struct(pname=("urn:NSConfig","getdnsptrrecResponse"), ofwhat=[ns0.getdnsptrrecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsptrrecResponse, encoded="urn:NSConfig")

class adddnssrvrec:
    def __init__(self):
        self._domain = None
        self._target = None
        self._priority = None
        self._weight = None
        self._port = None
        return
adddnssrvrec.typecode = Struct(pname=("urn:NSConfig","adddnssrvrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssrvrec, encoded="urn:NSConfig")

class adddnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
adddnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","adddnssrvrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssrvrecResponse, encoded="urn:NSConfig")

class rmdnssrvrec:
    def __init__(self):
        self._domain = None
        self._target = None
        return
rmdnssrvrec.typecode = Struct(pname=("urn:NSConfig","rmdnssrvrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssrvrec, encoded="urn:NSConfig")

class rmdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
rmdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnssrvrecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssrvrecResponse, encoded="urn:NSConfig")

class setdnssrvrec_priority:
    def __init__(self):
        self._domain = None
        self._target = None
        self._priority = None
        return
setdnssrvrec_priority.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_priority"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrec_priority, encoded="urn:NSConfig")

class setdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
setdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_priorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrecResponse, encoded="urn:NSConfig")

class setdnssrvrec_weight:
    def __init__(self):
        self._domain = None
        self._target = None
        self._weight = None
        return
setdnssrvrec_weight.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_weight"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrec_weight, encoded="urn:NSConfig")

class setdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
setdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrecResponse, encoded="urn:NSConfig")

class setdnssrvrec_port:
    def __init__(self):
        self._domain = None
        self._target = None
        self._port = None
        return
setdnssrvrec_port.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_port"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrec_port, encoded="urn:NSConfig")

class setdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
setdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_portResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrecResponse, encoded="urn:NSConfig")

class setdnssrvrec_ttl:
    def __init__(self):
        self._domain = None
        self._target = None
        self._ttl = None
        return
setdnssrvrec_ttl.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrec_ttl, encoded="urn:NSConfig")

class setdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
setdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssrvrec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssrvrecResponse, encoded="urn:NSConfig")

class unsetdnssrvrec_ttl:
    def __init__(self):
        self._domain = None
        self._target = None
        return
unsetdnssrvrec_ttl.typecode = Struct(pname=("urn:NSConfig","unsetdnssrvrec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssrvrec_ttl, encoded="urn:NSConfig")

class unsetdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssrvrec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssrvrecResponse, encoded="urn:NSConfig")

class getdnssrvrec:
    def __init__(self):
        self._domain = None
        self._target = None
        self._type = None
        return
getdnssrvrec.typecode = Struct(pname=("urn:NSConfig","getdnssrvrec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssrvrec, encoded="urn:NSConfig")

class getdnssrvrecResponse:
    def __init__(self):
        self._return = None
        return
getdnssrvrecResponse.typecode = Struct(pname=("urn:NSConfig","getdnssrvrecResponse"), ofwhat=[ns0.getdnssrvrecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssrvrecResponse, encoded="urn:NSConfig")

class setdnsparameter_retries:
    def __init__(self):
        self._retries = None
        return
setdnsparameter_retries.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_retries"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="retries", aname="_retries", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_retries, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_retriesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class setdnsparameter_minttl:
    def __init__(self):
        self._minttl = None
        return
setdnsparameter_minttl.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_minttl"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="minttl", aname="_minttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_minttl, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_minttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class setdnsparameter_maxttl:
    def __init__(self):
        self._maxttl = None
        return
setdnsparameter_maxttl.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_maxttl"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxttl", aname="_maxttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_maxttl, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_maxttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class setdnsparameter_cacherecords:
    def __init__(self):
        self._cacherecords = None
        return
setdnsparameter_cacherecords.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_cacherecords"), ofwhat=[ns0.yesnoEnum_Def(pname="cacherecords", aname="_cacherecords", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_cacherecords, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_cacherecordsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class setdnsparameter_namelookuppriority:
    def __init__(self):
        self._namelookuppriority = None
        return
setdnsparameter_namelookuppriority.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_namelookuppriority"), ofwhat=[ns0.namelookuppriorityEnum_Def(pname="namelookuppriority", aname="_namelookuppriority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_namelookuppriority, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_namelookuppriorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class setdnsparameter_recursion:
    def __init__(self):
        self._recursion = None
        return
setdnsparameter_recursion.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_recursion"), ofwhat=[ns0.enabledisabledEnum_Def(pname="recursion", aname="_recursion", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameter_recursion, encoded="urn:NSConfig")

class setdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
setdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","setdnsparameter_recursionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_retries:
    def __init__(self):
        return
unsetdnsparameter_retries.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_retries"), ofwhat=[], pyclass=unsetdnsparameter_retries, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_retriesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_minttl:
    def __init__(self):
        return
unsetdnsparameter_minttl.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_minttl"), ofwhat=[], pyclass=unsetdnsparameter_minttl, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_minttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_maxttl:
    def __init__(self):
        return
unsetdnsparameter_maxttl.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_maxttl"), ofwhat=[], pyclass=unsetdnsparameter_maxttl, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_maxttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_cacherecords:
    def __init__(self):
        return
unsetdnsparameter_cacherecords.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_cacherecords"), ofwhat=[], pyclass=unsetdnsparameter_cacherecords, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_cacherecordsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_namelookuppriority:
    def __init__(self):
        return
unsetdnsparameter_namelookuppriority.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_namelookuppriority"), ofwhat=[], pyclass=unsetdnsparameter_namelookuppriority, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_namelookuppriorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class unsetdnsparameter_recursion:
    def __init__(self):
        return
unsetdnsparameter_recursion.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_recursion"), ofwhat=[], pyclass=unsetdnsparameter_recursion, encoded="urn:NSConfig")

class unsetdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnsparameter_recursionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnsparameterResponse, encoded="urn:NSConfig")

class getdnsparameter:
    def __init__(self):
        return
getdnsparameter.typecode = Struct(pname=("urn:NSConfig","getdnsparameter"), ofwhat=[], pyclass=getdnsparameter, encoded="urn:NSConfig")

class getdnsparameterResponse:
    def __init__(self):
        self._return = None
        return
getdnsparameterResponse.typecode = Struct(pname=("urn:NSConfig","getdnsparameterResponse"), ofwhat=[ns0.getdnsparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsparameterResponse, encoded="urn:NSConfig")

class adddnssoarec:
    def __init__(self):
        self._domain = None
        self._originserver = None
        self._contact = None
        self._serial = None
        self._refresh = None
        self._retry = None
        self._expire = None
        self._minimum = None
        self._ttl = None
        return
adddnssoarec.typecode = Struct(pname=("urn:NSConfig","adddnssoarec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="originserver", aname="_originserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="contact", aname="_contact", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serial", aname="_serial", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="refresh", aname="_refresh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="retry", aname="_retry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="expire", aname="_expire", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="minimum", aname="_minimum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssoarec, encoded="urn:NSConfig")

class adddnssoarecResponse:
    def __init__(self):
        self._return = None
        return
adddnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","adddnssoarecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssoarecResponse, encoded="urn:NSConfig")

class rmdnssoarec:
    def __init__(self):
        self._domain = None
        return
rmdnssoarec.typecode = Struct(pname=("urn:NSConfig","rmdnssoarec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssoarec, encoded="urn:NSConfig")

class rmdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
rmdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","rmdnssoarecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_originserver:
    def __init__(self):
        self._domain = None
        self._originserver = None
        return
setdnssoarec_originserver.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_originserver"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="originserver", aname="_originserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_originserver, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_originserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_contact:
    def __init__(self):
        self._domain = None
        self._contact = None
        return
setdnssoarec_contact.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_contact"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="contact", aname="_contact", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_contact, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_contactResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_serial:
    def __init__(self):
        self._domain = None
        self._serial = None
        return
setdnssoarec_serial.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_serial"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="serial", aname="_serial", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_serial, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_serialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_refresh:
    def __init__(self):
        self._domain = None
        self._refresh = None
        return
setdnssoarec_refresh.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_refresh"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="refresh", aname="_refresh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_refresh, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_refreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_retry:
    def __init__(self):
        self._domain = None
        self._retry = None
        return
setdnssoarec_retry.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_retry"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="retry", aname="_retry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_retry, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_retryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_expire:
    def __init__(self):
        self._domain = None
        self._expire = None
        return
setdnssoarec_expire.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_expire"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="expire", aname="_expire", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_expire, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_expireResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_minimum:
    def __init__(self):
        self._domain = None
        self._minimum = None
        return
setdnssoarec_minimum.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_minimum"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="minimum", aname="_minimum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_minimum, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_minimumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class setdnssoarec_ttl:
    def __init__(self):
        self._domain = None
        self._ttl = None
        return
setdnssoarec_ttl.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarec_ttl, encoded="urn:NSConfig")

class setdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
setdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","setdnssoarec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_serial:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_serial.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_serial"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_serial, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_serialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_refresh:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_refresh.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_refresh"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_refresh, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_refreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_retry:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_retry.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_retry"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_retry, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_retryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_expire:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_expire.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_expire"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_expire, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_expireResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_minimum:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_minimum.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_minimum"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_minimum, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_minimumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class unsetdnssoarec_ttl:
    def __init__(self):
        self._domain = None
        return
unsetdnssoarec_ttl.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_ttl"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarec_ttl, encoded="urn:NSConfig")

class unsetdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
unsetdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","unsetdnssoarec_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdnssoarecResponse, encoded="urn:NSConfig")

class getdnssoarec:
    def __init__(self):
        self._domain = None
        self._type = None
        return
getdnssoarec.typecode = Struct(pname=("urn:NSConfig","getdnssoarec"), ofwhat=[ZSI.TC.String(pname="domain", aname="_domain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssoarec, encoded="urn:NSConfig")

class getdnssoarecResponse:
    def __init__(self):
        self._return = None
        return
getdnssoarecResponse.typecode = Struct(pname=("urn:NSConfig","getdnssoarecResponse"), ofwhat=[ns0.getdnssoarecResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssoarecResponse, encoded="urn:NSConfig")

class adddnssuffix:
    def __init__(self):
        self._dnssuffix = None
        return
adddnssuffix.typecode = Struct(pname=("urn:NSConfig","adddnssuffix"), ofwhat=[ZSI.TC.String(pname="dnssuffix", aname="_dnssuffix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssuffix, encoded="urn:NSConfig")

class adddnssuffixResponse:
    def __init__(self):
        self._return = None
        return
adddnssuffixResponse.typecode = Struct(pname=("urn:NSConfig","adddnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnssuffixResponse, encoded="urn:NSConfig")

class rmdnssuffix:
    def __init__(self):
        self._dnssuffix = None
        return
rmdnssuffix.typecode = Struct(pname=("urn:NSConfig","rmdnssuffix"), ofwhat=[ZSI.TC.String(pname="dnssuffix", aname="_dnssuffix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssuffix, encoded="urn:NSConfig")

class rmdnssuffixResponse:
    def __init__(self):
        self._return = None
        return
rmdnssuffixResponse.typecode = Struct(pname=("urn:NSConfig","rmdnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnssuffixResponse, encoded="urn:NSConfig")

class getdnssuffix:
    def __init__(self):
        self._dnssuffix = None
        return
getdnssuffix.typecode = Struct(pname=("urn:NSConfig","getdnssuffix"), ofwhat=[ZSI.TC.String(pname="dnssuffix", aname="_dnssuffix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssuffix, encoded="urn:NSConfig")

class getdnssuffixResponse:
    def __init__(self):
        self._return = None
        return
getdnssuffixResponse.typecode = Struct(pname=("urn:NSConfig","getdnssuffixResponse"), ofwhat=[ns0.getdnssuffixResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnssuffixResponse, encoded="urn:NSConfig")

class adddnsnameserver:
    def __init__(self):
        self._ip = None
        self._dnsvservername = None
        return
adddnsnameserver.typecode = Struct(pname=("urn:NSConfig","adddnsnameserver"), ofwhat=[ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsnameserver, encoded="urn:NSConfig")

class adddnsnameserverResponse:
    def __init__(self):
        self._return = None
        return
adddnsnameserverResponse.typecode = Struct(pname=("urn:NSConfig","adddnsnameserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsnameserverResponse, encoded="urn:NSConfig")

class rmdnsnameserver:
    def __init__(self):
        self._ip = None
        self._dnsvservername = None
        return
rmdnsnameserver.typecode = Struct(pname=("urn:NSConfig","rmdnsnameserver"), ofwhat=[ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsnameserver, encoded="urn:NSConfig")

class rmdnsnameserverResponse:
    def __init__(self):
        self._return = None
        return
rmdnsnameserverResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsnameserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsnameserverResponse, encoded="urn:NSConfig")

class enablednsnameserver:
    def __init__(self):
        self._ip = None
        self._dnsvservername = None
        return
enablednsnameserver.typecode = Struct(pname=("urn:NSConfig","enablednsnameserver"), ofwhat=[ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablednsnameserver, encoded="urn:NSConfig")

class enablednsnameserverResponse:
    def __init__(self):
        self._return = None
        return
enablednsnameserverResponse.typecode = Struct(pname=("urn:NSConfig","enablednsnameserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablednsnameserverResponse, encoded="urn:NSConfig")

class disablednsnameserver:
    def __init__(self):
        self._ip = None
        self._dnsvservername = None
        return
disablednsnameserver.typecode = Struct(pname=("urn:NSConfig","disablednsnameserver"), ofwhat=[ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablednsnameserver, encoded="urn:NSConfig")

class disablednsnameserverResponse:
    def __init__(self):
        self._return = None
        return
disablednsnameserverResponse.typecode = Struct(pname=("urn:NSConfig","disablednsnameserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablednsnameserverResponse, encoded="urn:NSConfig")

class getdnsnameserver:
    def __init__(self):
        self._ip = None
        self._dnsvservername = None
        return
getdnsnameserver.typecode = Struct(pname=("urn:NSConfig","getdnsnameserver"), ofwhat=[ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsnameserver, encoded="urn:NSConfig")

class getdnsnameserverResponse:
    def __init__(self):
        self._return = None
        return
getdnsnameserverResponse.typecode = Struct(pname=("urn:NSConfig","getdnsnameserverResponse"), ofwhat=[ns0.getdnsnameserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsnameserverResponse, encoded="urn:NSConfig")

class adddnsview:
    def __init__(self):
        self._viewname = None
        return
adddnsview.typecode = Struct(pname=("urn:NSConfig","adddnsview"), ofwhat=[ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsview, encoded="urn:NSConfig")

class adddnsviewResponse:
    def __init__(self):
        self._return = None
        return
adddnsviewResponse.typecode = Struct(pname=("urn:NSConfig","adddnsviewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnsviewResponse, encoded="urn:NSConfig")

class rmdnsview:
    def __init__(self):
        self._viewname = None
        return
rmdnsview.typecode = Struct(pname=("urn:NSConfig","rmdnsview"), ofwhat=[ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsview, encoded="urn:NSConfig")

class rmdnsviewResponse:
    def __init__(self):
        self._return = None
        return
rmdnsviewResponse.typecode = Struct(pname=("urn:NSConfig","rmdnsviewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnsviewResponse, encoded="urn:NSConfig")

class getdnsview:
    def __init__(self):
        self._viewname = None
        return
getdnsview.typecode = Struct(pname=("urn:NSConfig","getdnsview"), ofwhat=[ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsview, encoded="urn:NSConfig")

class getdnsviewResponse:
    def __init__(self):
        self._return = None
        return
getdnsviewResponse.typecode = Struct(pname=("urn:NSConfig","getdnsviewResponse"), ofwhat=[ns0.getdnsviewResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsviewResponse, encoded="urn:NSConfig")

class adddnspolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._viewname = None
        return
adddnspolicy.typecode = Struct(pname=("urn:NSConfig","adddnspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnspolicy, encoded="urn:NSConfig")

class adddnspolicyResponse:
    def __init__(self):
        self._return = None
        return
adddnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","adddnspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddnspolicyResponse, encoded="urn:NSConfig")

class rmdnspolicy:
    def __init__(self):
        self._name = None
        return
rmdnspolicy.typecode = Struct(pname=("urn:NSConfig","rmdnspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnspolicy, encoded="urn:NSConfig")

class rmdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
rmdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmdnspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdnspolicyResponse, encoded="urn:NSConfig")

class setdnspolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setdnspolicy_rule.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicy_rule, encoded="urn:NSConfig")

class setdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
setdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicyResponse, encoded="urn:NSConfig")

class setdnspolicy_viewname:
    def __init__(self):
        self._name = None
        self._viewname = None
        return
setdnspolicy_viewname.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_viewname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicy_viewname, encoded="urn:NSConfig")

class setdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
setdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_viewnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicyResponse, encoded="urn:NSConfig")

class setdnspolicy_preferredlocation:
    def __init__(self):
        self._name = None
        self._preferredlocation = None
        return
setdnspolicy_preferredlocation.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_preferredlocation"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicy_preferredlocation, encoded="urn:NSConfig")

class setdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
setdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_preferredlocationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicyResponse, encoded="urn:NSConfig")

class setdnspolicy_drop:
    def __init__(self):
        self._name = None
        self._drop = None
        return
setdnspolicy_drop.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_drop"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="drop", aname="_drop", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicy_drop, encoded="urn:NSConfig")

class setdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
setdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdnspolicy_dropResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdnspolicyResponse, encoded="urn:NSConfig")

class getdnspolicy:
    def __init__(self):
        self._name = None
        return
getdnspolicy.typecode = Struct(pname=("urn:NSConfig","getdnspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnspolicy, encoded="urn:NSConfig")

class getdnspolicyResponse:
    def __init__(self):
        self._return = None
        return
getdnspolicyResponse.typecode = Struct(pname=("urn:NSConfig","getdnspolicyResponse"), ofwhat=[ns0.getdnspolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnspolicyResponse, encoded="urn:NSConfig")

class binddnsglobal_policyname:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        return
binddnsglobal_policyname.typecode = Struct(pname=("urn:NSConfig","binddnsglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=binddnsglobal_policyname, encoded="urn:NSConfig")

class binddnsglobalResponse:
    def __init__(self):
        self._return = None
        return
binddnsglobalResponse.typecode = Struct(pname=("urn:NSConfig","binddnsglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=binddnsglobalResponse, encoded="urn:NSConfig")

class unbinddnsglobal_policyname:
    def __init__(self):
        self._policyname = None
        return
unbinddnsglobal_policyname.typecode = Struct(pname=("urn:NSConfig","unbinddnsglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbinddnsglobal_policyname, encoded="urn:NSConfig")

class unbinddnsglobalResponse:
    def __init__(self):
        self._return = None
        return
unbinddnsglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbinddnsglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbinddnsglobalResponse, encoded="urn:NSConfig")

class getdnsglobal:
    def __init__(self):
        return
getdnsglobal.typecode = Struct(pname=("urn:NSConfig","getdnsglobal"), ofwhat=[], pyclass=getdnsglobal, encoded="urn:NSConfig")

class getdnsglobalResponse:
    def __init__(self):
        self._return = None
        return
getdnsglobalResponse.typecode = Struct(pname=("urn:NSConfig","getdnsglobalResponse"), ofwhat=[ns0.getdnsglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdnsglobalResponse, encoded="urn:NSConfig")

class adddospolicy:
    def __init__(self):
        self._name = None
        self._qdepth = None
        return
adddospolicy.typecode = Struct(pname=("urn:NSConfig","adddospolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddospolicy, encoded="urn:NSConfig")

class adddospolicyResponse:
    def __init__(self):
        self._return = None
        return
adddospolicyResponse.typecode = Struct(pname=("urn:NSConfig","adddospolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=adddospolicyResponse, encoded="urn:NSConfig")

class rmdospolicy:
    def __init__(self):
        self._name = None
        return
rmdospolicy.typecode = Struct(pname=("urn:NSConfig","rmdospolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdospolicy, encoded="urn:NSConfig")

class rmdospolicyResponse:
    def __init__(self):
        self._return = None
        return
rmdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmdospolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmdospolicyResponse, encoded="urn:NSConfig")

class setdospolicy_qdepth:
    def __init__(self):
        self._name = None
        self._qdepth = None
        return
setdospolicy_qdepth.typecode = Struct(pname=("urn:NSConfig","setdospolicy_qdepth"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdospolicy_qdepth, encoded="urn:NSConfig")

class setdospolicyResponse:
    def __init__(self):
        self._return = None
        return
setdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdospolicy_qdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdospolicyResponse, encoded="urn:NSConfig")

class setdospolicy_cltdetectrate:
    def __init__(self):
        self._name = None
        self._cltdetectrate = None
        return
setdospolicy_cltdetectrate.typecode = Struct(pname=("urn:NSConfig","setdospolicy_cltdetectrate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cltdetectrate", aname="_cltdetectrate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdospolicy_cltdetectrate, encoded="urn:NSConfig")

class setdospolicyResponse:
    def __init__(self):
        self._return = None
        return
setdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","setdospolicy_cltdetectrateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setdospolicyResponse, encoded="urn:NSConfig")

class unsetdospolicy_qdepth:
    def __init__(self):
        self._name = None
        return
unsetdospolicy_qdepth.typecode = Struct(pname=("urn:NSConfig","unsetdospolicy_qdepth"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdospolicy_qdepth, encoded="urn:NSConfig")

class unsetdospolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetdospolicy_qdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdospolicyResponse, encoded="urn:NSConfig")

class unsetdospolicy_cltdetectrate:
    def __init__(self):
        self._name = None
        return
unsetdospolicy_cltdetectrate.typecode = Struct(pname=("urn:NSConfig","unsetdospolicy_cltdetectrate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdospolicy_cltdetectrate, encoded="urn:NSConfig")

class unsetdospolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetdospolicy_cltdetectrateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetdospolicyResponse, encoded="urn:NSConfig")

class getdospolicy:
    def __init__(self):
        self._name = None
        return
getdospolicy.typecode = Struct(pname=("urn:NSConfig","getdospolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdospolicy, encoded="urn:NSConfig")

class getdospolicyResponse:
    def __init__(self):
        self._return = None
        return
getdospolicyResponse.typecode = Struct(pname=("urn:NSConfig","getdospolicyResponse"), ofwhat=[ns0.getdospolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getdospolicyResponse, encoded="urn:NSConfig")

class setfilterprebodyinjection_prebody:
    def __init__(self):
        self._prebody = None
        return
setfilterprebodyinjection_prebody.typecode = Struct(pname=("urn:NSConfig","setfilterprebodyinjection_prebody"), ofwhat=[ZSI.TC.String(pname="prebody", aname="_prebody", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterprebodyinjection_prebody, encoded="urn:NSConfig")

class setfilterprebodyinjectionResponse:
    def __init__(self):
        self._return = None
        return
setfilterprebodyinjectionResponse.typecode = Struct(pname=("urn:NSConfig","setfilterprebodyinjection_prebodyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterprebodyinjectionResponse, encoded="urn:NSConfig")

class getfilterprebodyinjection:
    def __init__(self):
        return
getfilterprebodyinjection.typecode = Struct(pname=("urn:NSConfig","getfilterprebodyinjection"), ofwhat=[], pyclass=getfilterprebodyinjection, encoded="urn:NSConfig")

class getfilterprebodyinjectionResponse:
    def __init__(self):
        self._return = None
        return
getfilterprebodyinjectionResponse.typecode = Struct(pname=("urn:NSConfig","getfilterprebodyinjectionResponse"), ofwhat=[ns0.getfilterprebodyinjectionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilterprebodyinjectionResponse, encoded="urn:NSConfig")

class setfilterpostbodyinjection_postbody:
    def __init__(self):
        self._postbody = None
        return
setfilterpostbodyinjection_postbody.typecode = Struct(pname=("urn:NSConfig","setfilterpostbodyinjection_postbody"), ofwhat=[ZSI.TC.String(pname="postbody", aname="_postbody", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpostbodyinjection_postbody, encoded="urn:NSConfig")

class setfilterpostbodyinjectionResponse:
    def __init__(self):
        self._return = None
        return
setfilterpostbodyinjectionResponse.typecode = Struct(pname=("urn:NSConfig","setfilterpostbodyinjection_postbodyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpostbodyinjectionResponse, encoded="urn:NSConfig")

class getfilterpostbodyinjection:
    def __init__(self):
        return
getfilterpostbodyinjection.typecode = Struct(pname=("urn:NSConfig","getfilterpostbodyinjection"), ofwhat=[], pyclass=getfilterpostbodyinjection, encoded="urn:NSConfig")

class getfilterpostbodyinjectionResponse:
    def __init__(self):
        self._return = None
        return
getfilterpostbodyinjectionResponse.typecode = Struct(pname=("urn:NSConfig","getfilterpostbodyinjectionResponse"), ofwhat=[ns0.getfilterpostbodyinjectionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilterpostbodyinjectionResponse, encoded="urn:NSConfig")

class addfilteraction:
    def __init__(self):
        self._name = None
        self._qual = None
        self._servicename = None
        self._value = None
        self._respcode = None
        self._page = None
        return
addfilteraction.typecode = Struct(pname=("urn:NSConfig","addfilteraction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actionfilqualifierEnum_Def(pname="qual", aname="_qual", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="value", aname="_value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="respcode", aname="_respcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="page", aname="_page", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfilteraction, encoded="urn:NSConfig")

class addfilteractionResponse:
    def __init__(self):
        self._return = None
        return
addfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","addfilteractionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfilteractionResponse, encoded="urn:NSConfig")

class rmfilteraction:
    def __init__(self):
        self._name = None
        return
rmfilteraction.typecode = Struct(pname=("urn:NSConfig","rmfilteraction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfilteraction, encoded="urn:NSConfig")

class rmfilteractionResponse:
    def __init__(self):
        self._return = None
        return
rmfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","rmfilteractionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfilteractionResponse, encoded="urn:NSConfig")

class setfilteraction_servicename:
    def __init__(self):
        self._name = None
        self._servicename = None
        return
setfilteraction_servicename.typecode = Struct(pname=("urn:NSConfig","setfilteraction_servicename"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteraction_servicename, encoded="urn:NSConfig")

class setfilteractionResponse:
    def __init__(self):
        self._return = None
        return
setfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","setfilteraction_servicenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteractionResponse, encoded="urn:NSConfig")

class setfilteraction_value:
    def __init__(self):
        self._name = None
        self._value = None
        return
setfilteraction_value.typecode = Struct(pname=("urn:NSConfig","setfilteraction_value"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="value", aname="_value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteraction_value, encoded="urn:NSConfig")

class setfilteractionResponse:
    def __init__(self):
        self._return = None
        return
setfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","setfilteraction_valueResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteractionResponse, encoded="urn:NSConfig")

class setfilteraction_respcode:
    def __init__(self):
        self._name = None
        self._respcode = None
        return
setfilteraction_respcode.typecode = Struct(pname=("urn:NSConfig","setfilteraction_respcode"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="respcode", aname="_respcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteraction_respcode, encoded="urn:NSConfig")

class setfilteractionResponse:
    def __init__(self):
        self._return = None
        return
setfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","setfilteraction_respcodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteractionResponse, encoded="urn:NSConfig")

class setfilteraction_page:
    def __init__(self):
        self._name = None
        self._page = None
        return
setfilteraction_page.typecode = Struct(pname=("urn:NSConfig","setfilteraction_page"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="page", aname="_page", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteraction_page, encoded="urn:NSConfig")

class setfilteractionResponse:
    def __init__(self):
        self._return = None
        return
setfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","setfilteraction_pageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilteractionResponse, encoded="urn:NSConfig")

class unsetfilteraction_page:
    def __init__(self):
        self._name = None
        return
unsetfilteraction_page.typecode = Struct(pname=("urn:NSConfig","unsetfilteraction_page"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilteraction_page, encoded="urn:NSConfig")

class unsetfilteractionResponse:
    def __init__(self):
        self._return = None
        return
unsetfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","unsetfilteraction_pageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilteractionResponse, encoded="urn:NSConfig")

class getfilteraction:
    def __init__(self):
        self._name = None
        return
getfilteraction.typecode = Struct(pname=("urn:NSConfig","getfilteraction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilteraction, encoded="urn:NSConfig")

class getfilteractionResponse:
    def __init__(self):
        self._return = None
        return
getfilteractionResponse.typecode = Struct(pname=("urn:NSConfig","getfilteractionResponse"), ofwhat=[ns0.getfilteractionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilteractionResponse, encoded="urn:NSConfig")

class addfilterpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        self._resaction = None
        return
addfilterpolicy.typecode = Struct(pname=("urn:NSConfig","addfilterpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resaction", aname="_resaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfilterpolicy, encoded="urn:NSConfig")

class addfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
addfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addfilterpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfilterpolicyResponse, encoded="urn:NSConfig")

class rmfilterpolicy:
    def __init__(self):
        self._name = None
        return
rmfilterpolicy.typecode = Struct(pname=("urn:NSConfig","rmfilterpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfilterpolicy, encoded="urn:NSConfig")

class rmfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmfilterpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfilterpolicyResponse, encoded="urn:NSConfig")

class setfilterpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setfilterpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicy_rule, encoded="urn:NSConfig")

class setfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
setfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicyResponse, encoded="urn:NSConfig")

class setfilterpolicy_reqaction:
    def __init__(self):
        self._name = None
        self._reqaction = None
        return
setfilterpolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicy_reqaction, encoded="urn:NSConfig")

class setfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
setfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicyResponse, encoded="urn:NSConfig")

class setfilterpolicy_resaction:
    def __init__(self):
        self._name = None
        self._resaction = None
        return
setfilterpolicy_resaction.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_resaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="resaction", aname="_resaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicy_resaction, encoded="urn:NSConfig")

class setfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
setfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setfilterpolicy_resactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setfilterpolicyResponse, encoded="urn:NSConfig")

class unsetfilterpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetfilterpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicy_rule, encoded="urn:NSConfig")

class unsetfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicyResponse, encoded="urn:NSConfig")

class unsetfilterpolicy_reqaction:
    def __init__(self):
        self._name = None
        return
unsetfilterpolicy_reqaction.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_reqaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicy_reqaction, encoded="urn:NSConfig")

class unsetfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_reqactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicyResponse, encoded="urn:NSConfig")

class unsetfilterpolicy_resaction:
    def __init__(self):
        self._name = None
        return
unsetfilterpolicy_resaction.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_resaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicy_resaction, encoded="urn:NSConfig")

class unsetfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetfilterpolicy_resactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetfilterpolicyResponse, encoded="urn:NSConfig")

class getfilterpolicy:
    def __init__(self):
        self._name = None
        return
getfilterpolicy.typecode = Struct(pname=("urn:NSConfig","getfilterpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilterpolicy, encoded="urn:NSConfig")

class getfilterpolicyResponse:
    def __init__(self):
        self._return = None
        return
getfilterpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getfilterpolicyResponse"), ofwhat=[ns0.getfilterpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilterpolicyResponse, encoded="urn:NSConfig")

class bindfilterglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._state = None
        return
bindfilterglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindfilterglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindfilterglobal_policy, encoded="urn:NSConfig")

class bindfilterglobalResponse:
    def __init__(self):
        self._return = None
        return
bindfilterglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindfilterglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindfilterglobalResponse, encoded="urn:NSConfig")

class unbindfilterglobal_policy:
    def __init__(self):
        self._policyname = None
        return
unbindfilterglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindfilterglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindfilterglobal_policy, encoded="urn:NSConfig")

class unbindfilterglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindfilterglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindfilterglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindfilterglobalResponse, encoded="urn:NSConfig")

class getfilterglobal:
    def __init__(self):
        return
getfilterglobal.typecode = Struct(pname=("urn:NSConfig","getfilterglobal"), ofwhat=[], pyclass=getfilterglobal, encoded="urn:NSConfig")

class getfilterglobalResponse:
    def __init__(self):
        self._return = None
        return
getfilterglobalResponse.typecode = Struct(pname=("urn:NSConfig","getfilterglobalResponse"), ofwhat=[ns0.getfilterglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfilterglobalResponse, encoded="urn:NSConfig")

class addgslbsite:
    def __init__(self):
        self._sitename = None
        self._sitetype = None
        self._siteipaddress = None
        self._publicip = None
        self._nwmetricexchange = None
        self._sessionexchange = None
        return
addgslbsite.typecode = Struct(pname=("urn:NSConfig","addgslbsite"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslbviptypeEnum_Def(pname="sitetype", aname="_sitetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="siteipaddress", aname="_siteipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="publicip", aname="_publicip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="nwmetricexchange", aname="_nwmetricexchange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessionexchange", aname="_sessionexchange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbsite, encoded="urn:NSConfig")

class addgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
addgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","addgslbsiteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbsiteResponse, encoded="urn:NSConfig")

class rmgslbsite:
    def __init__(self):
        self._sitename = None
        return
rmgslbsite.typecode = Struct(pname=("urn:NSConfig","rmgslbsite"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbsite, encoded="urn:NSConfig")

class rmgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
rmgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbsiteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbsiteResponse, encoded="urn:NSConfig")

class setgslbsite_metricexchange:
    def __init__(self):
        self._sitename = None
        self._metricexchange = None
        return
setgslbsite_metricexchange.typecode = Struct(pname=("urn:NSConfig","setgslbsite_metricexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="metricexchange", aname="_metricexchange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsite_metricexchange, encoded="urn:NSConfig")

class setgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
setgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","setgslbsite_metricexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsiteResponse, encoded="urn:NSConfig")

class setgslbsite_nwmetricexchange:
    def __init__(self):
        self._sitename = None
        self._nwmetricexchange = None
        return
setgslbsite_nwmetricexchange.typecode = Struct(pname=("urn:NSConfig","setgslbsite_nwmetricexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="nwmetricexchange", aname="_nwmetricexchange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsite_nwmetricexchange, encoded="urn:NSConfig")

class setgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
setgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","setgslbsite_nwmetricexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsiteResponse, encoded="urn:NSConfig")

class setgslbsite_sessionexchange:
    def __init__(self):
        self._sitename = None
        self._sessionexchange = None
        return
setgslbsite_sessionexchange.typecode = Struct(pname=("urn:NSConfig","setgslbsite_sessionexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessionexchange", aname="_sessionexchange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsite_sessionexchange, encoded="urn:NSConfig")

class setgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
setgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","setgslbsite_sessionexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsiteResponse, encoded="urn:NSConfig")

class setgslbsite_triggermonitor:
    def __init__(self):
        self._sitename = None
        self._triggermonitor = None
        return
setgslbsite_triggermonitor.typecode = Struct(pname=("urn:NSConfig","setgslbsite_triggermonitor"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.triggermonitorEnum_Def(pname="triggermonitor", aname="_triggermonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsite_triggermonitor, encoded="urn:NSConfig")

class setgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
setgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","setgslbsite_triggermonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbsiteResponse, encoded="urn:NSConfig")

class unsetgslbsite_metricexchange:
    def __init__(self):
        self._sitename = None
        return
unsetgslbsite_metricexchange.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_metricexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsite_metricexchange, encoded="urn:NSConfig")

class unsetgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_metricexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsiteResponse, encoded="urn:NSConfig")

class unsetgslbsite_nwmetricexchange:
    def __init__(self):
        self._sitename = None
        return
unsetgslbsite_nwmetricexchange.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_nwmetricexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsite_nwmetricexchange, encoded="urn:NSConfig")

class unsetgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_nwmetricexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsiteResponse, encoded="urn:NSConfig")

class unsetgslbsite_sessionexchange:
    def __init__(self):
        self._sitename = None
        return
unsetgslbsite_sessionexchange.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_sessionexchange"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsite_sessionexchange, encoded="urn:NSConfig")

class unsetgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_sessionexchangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsiteResponse, encoded="urn:NSConfig")

class unsetgslbsite_triggermonitor:
    def __init__(self):
        self._sitename = None
        return
unsetgslbsite_triggermonitor.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_triggermonitor"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsite_triggermonitor, encoded="urn:NSConfig")

class unsetgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbsite_triggermonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbsiteResponse, encoded="urn:NSConfig")

class getgslbsite:
    def __init__(self):
        self._sitename = None
        return
getgslbsite.typecode = Struct(pname=("urn:NSConfig","getgslbsite"), ofwhat=[ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbsite, encoded="urn:NSConfig")

class getgslbsiteResponse:
    def __init__(self):
        self._return = None
        return
getgslbsiteResponse.typecode = Struct(pname=("urn:NSConfig","getgslbsiteResponse"), ofwhat=[ns0.getgslbsiteResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbsiteResponse, encoded="urn:NSConfig")

class addgslbservice:
    def __init__(self):
        self._servicename = None
        self._ip = None
        self._servername = None
        self._servicetype = None
        self._port = None
        self._sitename = None
        self._state = None
        return
addgslbservice.typecode = Struct(pname=("urn:NSConfig","addgslbservice"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ip", aname="_ip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servername", aname="_servername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslbvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sitename", aname="_sitename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbservice, encoded="urn:NSConfig")

class addgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
addgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","addgslbserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbserviceResponse, encoded="urn:NSConfig")

class rmgslbservice:
    def __init__(self):
        self._servicename = None
        return
rmgslbservice.typecode = Struct(pname=("urn:NSConfig","rmgslbservice"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbservice, encoded="urn:NSConfig")

class rmgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
rmgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbserviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_ipaddress:
    def __init__(self):
        self._servicename = None
        self._ipaddress = None
        return
setgslbservice_ipaddress.typecode = Struct(pname=("urn:NSConfig","setgslbservice_ipaddress"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_ipaddress, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_publicip:
    def __init__(self):
        self._servicename = None
        self._publicip = None
        return
setgslbservice_publicip.typecode = Struct(pname=("urn:NSConfig","setgslbservice_publicip"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="publicip", aname="_publicip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_publicip, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_publicipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_publicport:
    def __init__(self):
        self._servicename = None
        self._publicport = None
        return
setgslbservice_publicport.typecode = Struct(pname=("urn:NSConfig","setgslbservice_publicport"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="publicport", aname="_publicport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_publicport, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_publicportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_cip:
    def __init__(self):
        self._servicename = None
        self._cip = None
        self._cipheader = None
        return
setgslbservice_cip.typecode = Struct(pname=("urn:NSConfig","setgslbservice_cip"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="cip", aname="_cip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipheader", aname="_cipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_cip, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_sitepersistence:
    def __init__(self):
        self._servicename = None
        self._sitepersistence = None
        return
setgslbservice_sitepersistence.typecode = Struct(pname=("urn:NSConfig","setgslbservice_sitepersistence"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.httpsitepersistenceEnum_Def(pname="sitepersistence", aname="_sitepersistence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_sitepersistence, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_sitepersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_siteprefix:
    def __init__(self):
        self._servicename = None
        self._siteprefix = None
        return
setgslbservice_siteprefix.typecode = Struct(pname=("urn:NSConfig","setgslbservice_siteprefix"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="siteprefix", aname="_siteprefix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_siteprefix, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_siteprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_maxclient:
    def __init__(self):
        self._servicename = None
        self._maxclient = None
        return
setgslbservice_maxclient.typecode = Struct(pname=("urn:NSConfig","setgslbservice_maxclient"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_maxclient, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_maxbandwidth:
    def __init__(self):
        self._servicename = None
        self._maxbandwidth = None
        return
setgslbservice_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","setgslbservice_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_maxbandwidth, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_downstateflush:
    def __init__(self):
        self._servicename = None
        self._downstateflush = None
        return
setgslbservice_downstateflush.typecode = Struct(pname=("urn:NSConfig","setgslbservice_downstateflush"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_downstateflush, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_view:
    def __init__(self):
        self._servicename = None
        self._viewname = None
        self._viewip = None
        return
setgslbservice_view.typecode = Struct(pname=("urn:NSConfig","setgslbservice_view"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewip", aname="_viewip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_view, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_viewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_monthreshold:
    def __init__(self):
        self._servicename = None
        self._monthreshold = None
        return
setgslbservice_monthreshold.typecode = Struct(pname=("urn:NSConfig","setgslbservice_monthreshold"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_monthreshold, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class setgslbservice_weight:
    def __init__(self):
        self._servicename = None
        self._weight = None
        self._monitorname = None
        return
setgslbservice_weight.typecode = Struct(pname=("urn:NSConfig","setgslbservice_weight"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbservice_weight, encoded="urn:NSConfig")

class setgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
setgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","setgslbservice_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_publicip:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_publicip.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_publicip"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_publicip, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_publicipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_publicport:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_publicport.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_publicport"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_publicport, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_publicportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_cip:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_cip.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_cip"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_cip, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_cipheader:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_cipheader.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_cipheader"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_cipheader, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_cipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_sitepersistence:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_sitepersistence.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_sitepersistence"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_sitepersistence, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_sitepersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_siteprefix:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_siteprefix.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_siteprefix"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_siteprefix, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_siteprefixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_maxclient:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_maxclient.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_maxclient"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_maxclient, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_maxclientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_maxbandwidth:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_maxbandwidth.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_maxbandwidth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_maxbandwidth, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_maxbandwidthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_downstateflush:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_downstateflush"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_downstateflush, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_viewip:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_viewip.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_viewip"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_viewip, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_viewipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_monthreshold:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_monthreshold.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_monthreshold"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_monthreshold, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_monthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class unsetgslbservice_monitorname:
    def __init__(self):
        self._servicename = None
        return
unsetgslbservice_monitorname.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_monitorname"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbservice_monitorname, encoded="urn:NSConfig")

class unsetgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbservice_monitornameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbserviceResponse, encoded="urn:NSConfig")

class bindgslbservice_view:
    def __init__(self):
        self._servicename = None
        self._viewname = None
        self._viewip = None
        return
bindgslbservice_view.typecode = Struct(pname=("urn:NSConfig","bindgslbservice_view"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewip", aname="_viewip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbservice_view, encoded="urn:NSConfig")

class bindgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
bindgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","bindgslbservice_viewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbserviceResponse, encoded="urn:NSConfig")

class unbindgslbservice_view:
    def __init__(self):
        self._servicename = None
        self._viewname = None
        return
unbindgslbservice_view.typecode = Struct(pname=("urn:NSConfig","unbindgslbservice_view"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="viewname", aname="_viewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbservice_view, encoded="urn:NSConfig")

class unbindgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
unbindgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","unbindgslbservice_viewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbserviceResponse, encoded="urn:NSConfig")

class getgslbservice:
    def __init__(self):
        self._servicename = None
        return
getgslbservice.typecode = Struct(pname=("urn:NSConfig","getgslbservice"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbservice, encoded="urn:NSConfig")

class getgslbserviceResponse:
    def __init__(self):
        self._return = None
        return
getgslbserviceResponse.typecode = Struct(pname=("urn:NSConfig","getgslbserviceResponse"), ofwhat=[ns0.getgslbserviceResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbserviceResponse, encoded="urn:NSConfig")

class addgslbvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._state = None
        return
addgslbvserver.typecode = Struct(pname=("urn:NSConfig","addgslbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslbvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbvserver, encoded="urn:NSConfig")

class addgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
addgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","addgslbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbvserverResponse, encoded="urn:NSConfig")

class rmgslbvserver:
    def __init__(self):
        self._name = None
        return
rmgslbvserver.typecode = Struct(pname=("urn:NSConfig","rmgslbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbvserver, encoded="urn:NSConfig")

class rmgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
rmgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_backupvserver:
    def __init__(self):
        self._name = None
        self._backupvserver = None
        return
setgslbvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_backupvserver, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_backupsessiontimeout:
    def __init__(self):
        self._name = None
        self._backupsessiontimeout = None
        return
setgslbvserver_backupsessiontimeout.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_backupsessiontimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="backupsessiontimeout", aname="_backupsessiontimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_backupsessiontimeout, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_backupsessiontimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_lbmethod:
    def __init__(self):
        self._name = None
        self._lbmethod = None
        self._backuplbmethod = None
        return
setgslbvserver_lbmethod.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_lbmethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslblbmethodEnum_Def(pname="lbmethod", aname="_lbmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslblbmethodEnum_Def(pname="backuplbmethod", aname="_backuplbmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_lbmethod, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_lbmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_netmask:
    def __init__(self):
        self._name = None
        self._netmask = None
        return
setgslbvserver_netmask.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_netmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_netmask, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_tolerance:
    def __init__(self):
        self._name = None
        self._tolerance = None
        return
setgslbvserver_tolerance.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_tolerance"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="tolerance", aname="_tolerance", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_tolerance, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_toleranceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_persistencetype:
    def __init__(self):
        self._name = None
        self._persistencetype = None
        return
setgslbvserver_persistencetype.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslbpersistenceEnum_Def(pname="persistencetype", aname="_persistencetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_persistencetype, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_persistenceid:
    def __init__(self):
        self._name = None
        self._persistenceid = None
        return
setgslbvserver_persistenceid.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistenceid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="persistenceid", aname="_persistenceid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_persistenceid, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistenceidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_persistmask:
    def __init__(self):
        self._name = None
        self._persistmask = None
        return
setgslbvserver_persistmask.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="persistmask", aname="_persistmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_persistmask, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_timeout:
    def __init__(self):
        self._name = None
        self._timeout = None
        return
setgslbvserver_timeout.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_timeout, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_edr:
    def __init__(self):
        self._name = None
        self._edr = None
        return
setgslbvserver_edr.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_edr"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="edr", aname="_edr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_edr, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_edrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_mir:
    def __init__(self):
        self._name = None
        self._mir = None
        return
setgslbvserver_mir.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_mir"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="mir", aname="_mir", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_mir, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_mirResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_disableprimaryondown:
    def __init__(self):
        self._name = None
        self._disableprimaryondown = None
        return
setgslbvserver_disableprimaryondown.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_disableprimaryondown"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="disableprimaryondown", aname="_disableprimaryondown", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_disableprimaryondown, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_disableprimaryondownResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_dynamicweight:
    def __init__(self):
        self._name = None
        self._dynamicweight = None
        return
setgslbvserver_dynamicweight.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_dynamicweight"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.dynamic_wt_optionsEnum_Def(pname="dynamicweight", aname="_dynamicweight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_dynamicweight, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_dynamicweightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_considereffectivestate:
    def __init__(self):
        self._name = None
        self._considereffectivestate = None
        return
setgslbvserver_considereffectivestate.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_considereffectivestate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.gslbvipconsiderstatsEnum_Def(pname="considereffectivestate", aname="_considereffectivestate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_considereffectivestate, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_considereffectivestateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_service:
    def __init__(self):
        self._name = None
        self._servicename = None
        self._weight = None
        return
setgslbvserver_service.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_service"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_service, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class setgslbvserver_domainname:
    def __init__(self):
        self._name = None
        self._domainname = None
        self._ttl = None
        self._backupip = None
        self._cookiedomain = None
        self._cookietimeout = None
        self._sitedomainttl = None
        return
setgslbvserver_domainname.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domainname", aname="_domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupip", aname="_backupip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cookietimeout", aname="_cookietimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sitedomainttl", aname="_sitedomainttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserver_domainname, encoded="urn:NSConfig")

class setgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
setgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setgslbvserver_domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_backupvserver:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_backupvserver, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_backupsessiontimeout:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_backupsessiontimeout.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupsessiontimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_backupsessiontimeout, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupsessiontimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_lbmethod:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_lbmethod.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_lbmethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_lbmethod, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_lbmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_backuplbmethod:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_backuplbmethod.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backuplbmethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_backuplbmethod, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backuplbmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_netmask:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_netmask.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_netmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_netmask, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_tolerance:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_tolerance.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_tolerance"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_tolerance, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_toleranceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_persistencetype:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_persistencetype.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_persistencetype, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_persistenceid:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_persistenceid.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistenceid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_persistenceid, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistenceidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_persistmask:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_persistmask.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_persistmask, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_timeout:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_timeout.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_timeout, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_edr:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_edr.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_edr"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_edr, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_edrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_mir:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_mir.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_mir"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_mir, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_mirResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_disableprimaryondown:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_disableprimaryondown.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_disableprimaryondown"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_disableprimaryondown, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_disableprimaryondownResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_dynamicweight:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_dynamicweight.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_dynamicweight"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_dynamicweight, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_dynamicweightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_considereffectivestate:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_considereffectivestate.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_considereffectivestate"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_considereffectivestate, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_considereffectivestateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_servicename:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_servicename.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_servicename"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_servicename, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_servicenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_weight:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_weight.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_weight"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_weight, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_domainname:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_domainname.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_domainname, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_ttl:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_ttl.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_ttl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_ttl, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_ttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_backupip:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_backupip.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_backupip, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_backupipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_cookiedomain:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_cookiedomain.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_cookiedomain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_cookiedomain, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_cookiedomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_cookietimeout:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_cookietimeout.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_cookietimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_cookietimeout, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_cookietimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class unsetgslbvserver_sitedomainttl:
    def __init__(self):
        self._name = None
        return
unsetgslbvserver_sitedomainttl.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_sitedomainttl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserver_sitedomainttl, encoded="urn:NSConfig")

class unsetgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbvserver_sitedomainttlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbvserverResponse, encoded="urn:NSConfig")

class bindgslbvserver_service:
    def __init__(self):
        self._name = None
        self._servicename = None
        self._weight = None
        return
bindgslbvserver_service.typecode = Struct(pname=("urn:NSConfig","bindgslbvserver_service"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbvserver_service, encoded="urn:NSConfig")

class bindgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
bindgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindgslbvserver_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbvserverResponse, encoded="urn:NSConfig")

class bindgslbvserver_domainname:
    def __init__(self):
        self._name = None
        self._domainname = None
        self._ttl = None
        self._backupip = None
        self._cookiedomain = None
        self._cookietimeout = None
        self._sitedomainttl = None
        return
bindgslbvserver_domainname.typecode = Struct(pname=("urn:NSConfig","bindgslbvserver_domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domainname", aname="_domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupip", aname="_backupip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cookietimeout", aname="_cookietimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sitedomainttl", aname="_sitedomainttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbvserver_domainname, encoded="urn:NSConfig")

class bindgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
bindgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindgslbvserver_domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindgslbvserverResponse, encoded="urn:NSConfig")

class unbindgslbvserver_service:
    def __init__(self):
        self._name = None
        self._servicename = None
        return
unbindgslbvserver_service.typecode = Struct(pname=("urn:NSConfig","unbindgslbvserver_service"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbvserver_service, encoded="urn:NSConfig")

class unbindgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindgslbvserver_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbvserverResponse, encoded="urn:NSConfig")

class unbindgslbvserver_domainname:
    def __init__(self):
        self._name = None
        self._domainname = None
        self._backupip = None
        self._cookiedomain = None
        return
unbindgslbvserver_domainname.typecode = Struct(pname=("urn:NSConfig","unbindgslbvserver_domainname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="domainname", aname="_domainname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="backupip", aname="_backupip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="cookiedomain", aname="_cookiedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbvserver_domainname, encoded="urn:NSConfig")

class unbindgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindgslbvserver_domainnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindgslbvserverResponse, encoded="urn:NSConfig")

class enablegslbvserver:
    def __init__(self):
        self._name = None
        return
enablegslbvserver.typecode = Struct(pname=("urn:NSConfig","enablegslbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablegslbvserver, encoded="urn:NSConfig")

class enablegslbvserverResponse:
    def __init__(self):
        self._return = None
        return
enablegslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","enablegslbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablegslbvserverResponse, encoded="urn:NSConfig")

class disablegslbvserver:
    def __init__(self):
        self._name = None
        return
disablegslbvserver.typecode = Struct(pname=("urn:NSConfig","disablegslbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablegslbvserver, encoded="urn:NSConfig")

class disablegslbvserverResponse:
    def __init__(self):
        self._return = None
        return
disablegslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","disablegslbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablegslbvserverResponse, encoded="urn:NSConfig")

class getgslbvserver:
    def __init__(self):
        self._name = None
        return
getgslbvserver.typecode = Struct(pname=("urn:NSConfig","getgslbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbvserver, encoded="urn:NSConfig")

class getgslbvserverResponse:
    def __init__(self):
        self._return = None
        return
getgslbvserverResponse.typecode = Struct(pname=("urn:NSConfig","getgslbvserverResponse"), ofwhat=[ns0.getgslbvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbvserverResponse, encoded="urn:NSConfig")

class setgslbparameter_ldnsentrytimeout:
    def __init__(self):
        self._ldnsentrytimeout = None
        return
setgslbparameter_ldnsentrytimeout.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_ldnsentrytimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="ldnsentrytimeout", aname="_ldnsentrytimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameter_ldnsentrytimeout, encoded="urn:NSConfig")

class setgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
setgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_ldnsentrytimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameterResponse, encoded="urn:NSConfig")

class setgslbparameter_rtttolerance:
    def __init__(self):
        self._rtttolerance = None
        return
setgslbparameter_rtttolerance.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_rtttolerance"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="rtttolerance", aname="_rtttolerance", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameter_rtttolerance, encoded="urn:NSConfig")

class setgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
setgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_rtttoleranceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameterResponse, encoded="urn:NSConfig")

class setgslbparameter_ldnsmask:
    def __init__(self):
        self._ldnsmask = None
        return
setgslbparameter_ldnsmask.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_ldnsmask"), ofwhat=[ZSI.TC.String(pname="ldnsmask", aname="_ldnsmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameter_ldnsmask, encoded="urn:NSConfig")

class setgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
setgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","setgslbparameter_ldnsmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbparameterResponse, encoded="urn:NSConfig")

class unsetgslbparameter_ldnsentrytimeout:
    def __init__(self):
        return
unsetgslbparameter_ldnsentrytimeout.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_ldnsentrytimeout"), ofwhat=[], pyclass=unsetgslbparameter_ldnsentrytimeout, encoded="urn:NSConfig")

class unsetgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_ldnsentrytimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbparameterResponse, encoded="urn:NSConfig")

class unsetgslbparameter_rtttolerance:
    def __init__(self):
        return
unsetgslbparameter_rtttolerance.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_rtttolerance"), ofwhat=[], pyclass=unsetgslbparameter_rtttolerance, encoded="urn:NSConfig")

class unsetgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_rtttoleranceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbparameterResponse, encoded="urn:NSConfig")

class unsetgslbparameter_ldnsmask:
    def __init__(self):
        return
unsetgslbparameter_ldnsmask.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_ldnsmask"), ofwhat=[], pyclass=unsetgslbparameter_ldnsmask, encoded="urn:NSConfig")

class unsetgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetgslbparameter_ldnsmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetgslbparameterResponse, encoded="urn:NSConfig")

class getgslbparameter:
    def __init__(self):
        return
getgslbparameter.typecode = Struct(pname=("urn:NSConfig","getgslbparameter"), ofwhat=[], pyclass=getgslbparameter, encoded="urn:NSConfig")

class getgslbparameterResponse:
    def __init__(self):
        self._return = None
        return
getgslbparameterResponse.typecode = Struct(pname=("urn:NSConfig","getgslbparameterResponse"), ofwhat=[ns0.getgslbparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbparameterResponse, encoded="urn:NSConfig")

class addgslbpolicy:
    def __init__(self):
        self._name = None
        self._reqrule = None
        self._actioN = None
        return
addgslbpolicy.typecode = Struct(pname=("urn:NSConfig","addgslbpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqrule", aname="_reqrule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbpolicy, encoded="urn:NSConfig")

class addgslbpolicyResponse:
    def __init__(self):
        self._return = None
        return
addgslbpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addgslbpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbpolicyResponse, encoded="urn:NSConfig")

class rmgslbpolicy:
    def __init__(self):
        self._name = None
        return
rmgslbpolicy.typecode = Struct(pname=("urn:NSConfig","rmgslbpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbpolicy, encoded="urn:NSConfig")

class rmgslbpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmgslbpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbpolicyResponse, encoded="urn:NSConfig")

class setgslbpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setgslbpolicy_action.typecode = Struct(pname=("urn:NSConfig","setgslbpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbpolicy_action, encoded="urn:NSConfig")

class setgslbpolicyResponse:
    def __init__(self):
        self._return = None
        return
setgslbpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setgslbpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbpolicyResponse, encoded="urn:NSConfig")

class getgslbpolicy:
    def __init__(self):
        self._name = None
        return
getgslbpolicy.typecode = Struct(pname=("urn:NSConfig","getgslbpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbpolicy, encoded="urn:NSConfig")

class getgslbpolicyResponse:
    def __init__(self):
        self._return = None
        return
getgslbpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getgslbpolicyResponse"), ofwhat=[ns0.getgslbpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbpolicyResponse, encoded="urn:NSConfig")

class addgslbaction:
    def __init__(self):
        self._name = None
        self._preferredlocation = None
        return
addgslbaction.typecode = Struct(pname=("urn:NSConfig","addgslbaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbaction, encoded="urn:NSConfig")

class addgslbactionResponse:
    def __init__(self):
        self._return = None
        return
addgslbactionResponse.typecode = Struct(pname=("urn:NSConfig","addgslbactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addgslbactionResponse, encoded="urn:NSConfig")

class rmgslbaction:
    def __init__(self):
        self._name = None
        return
rmgslbaction.typecode = Struct(pname=("urn:NSConfig","rmgslbaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbaction, encoded="urn:NSConfig")

class rmgslbactionResponse:
    def __init__(self):
        self._return = None
        return
rmgslbactionResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbactionResponse, encoded="urn:NSConfig")

class setgslbaction_preferredlocation:
    def __init__(self):
        self._name = None
        self._preferredlocation = None
        return
setgslbaction_preferredlocation.typecode = Struct(pname=("urn:NSConfig","setgslbaction_preferredlocation"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbaction_preferredlocation, encoded="urn:NSConfig")

class setgslbactionResponse:
    def __init__(self):
        self._return = None
        return
setgslbactionResponse.typecode = Struct(pname=("urn:NSConfig","setgslbaction_preferredlocationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setgslbactionResponse, encoded="urn:NSConfig")

class getgslbaction:
    def __init__(self):
        self._name = None
        return
getgslbaction.typecode = Struct(pname=("urn:NSConfig","getgslbaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbaction, encoded="urn:NSConfig")

class getgslbactionResponse:
    def __init__(self):
        self._return = None
        return
getgslbactionResponse.typecode = Struct(pname=("urn:NSConfig","getgslbactionResponse"), ofwhat=[ns0.getgslbactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbactionResponse, encoded="urn:NSConfig")

class getgslbldnsentries:
    def __init__(self):
        return
getgslbldnsentries.typecode = Struct(pname=("urn:NSConfig","getgslbldnsentries"), ofwhat=[], pyclass=getgslbldnsentries, encoded="urn:NSConfig")

class getgslbldnsentriesResponse:
    def __init__(self):
        self._return = None
        return
getgslbldnsentriesResponse.typecode = Struct(pname=("urn:NSConfig","getgslbldnsentriesResponse"), ofwhat=[ns0.getgslbldnsentriesResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getgslbldnsentriesResponse, encoded="urn:NSConfig")

class rmgslbldnsentry:
    def __init__(self):
        self._ipaddress = None
        return
rmgslbldnsentry.typecode = Struct(pname=("urn:NSConfig","rmgslbldnsentry"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbldnsentry, encoded="urn:NSConfig")

class rmgslbldnsentryResponse:
    def __init__(self):
        self._return = None
        return
rmgslbldnsentryResponse.typecode = Struct(pname=("urn:NSConfig","rmgslbldnsentryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmgslbldnsentryResponse, encoded="urn:NSConfig")

class forcehafailover:
    def __init__(self):
        return
forcehafailover.typecode = Struct(pname=("urn:NSConfig","forcehafailover"), ofwhat=[], pyclass=forcehafailover, encoded="urn:NSConfig")

class forcehafailoverResponse:
    def __init__(self):
        self._return = None
        return
forcehafailoverResponse.typecode = Struct(pname=("urn:NSConfig","forcehafailoverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=forcehafailoverResponse, encoded="urn:NSConfig")

class forcehasync:
    def __init__(self):
        return
forcehasync.typecode = Struct(pname=("urn:NSConfig","forcehasync"), ofwhat=[], pyclass=forcehasync, encoded="urn:NSConfig")

class forcehasyncResponse:
    def __init__(self):
        self._return = None
        return
forcehasyncResponse.typecode = Struct(pname=("urn:NSConfig","forcehasyncResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=forcehasyncResponse, encoded="urn:NSConfig")

class synchafiles:
    def __init__(self):
        self._mode = None
        return
synchafiles.typecode = Struct(pname=("urn:NSConfig","synchafiles"), ofwhat=[ns0.syncmodeEnum_Def(pname="mode", aname="_mode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=synchafiles, encoded="urn:NSConfig")

class synchafilesResponse:
    def __init__(self):
        self._return = None
        return
synchafilesResponse.typecode = Struct(pname=("urn:NSConfig","synchafilesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=synchafilesResponse, encoded="urn:NSConfig")

class addhanode:
    def __init__(self):
        self._id = None
        self._ipaddress = None
        self._inc = None
        return
addhanode.typecode = Struct(pname=("urn:NSConfig","addhanode"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="inc", aname="_inc", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addhanode, encoded="urn:NSConfig")

class addhanodeResponse:
    def __init__(self):
        self._return = None
        return
addhanodeResponse.typecode = Struct(pname=("urn:NSConfig","addhanodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addhanodeResponse, encoded="urn:NSConfig")

class rmhanode:
    def __init__(self):
        self._id = None
        return
rmhanode.typecode = Struct(pname=("urn:NSConfig","rmhanode"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmhanode, encoded="urn:NSConfig")

class rmhanodeResponse:
    def __init__(self):
        self._return = None
        return
rmhanodeResponse.typecode = Struct(pname=("urn:NSConfig","rmhanodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmhanodeResponse, encoded="urn:NSConfig")

class sethanode_hastatus:
    def __init__(self):
        self._id = None
        self._hastatus = None
        return
sethanode_hastatus.typecode = Struct(pname=("urn:NSConfig","sethanode_hastatus"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.hastatusEnum_Def(pname="hastatus", aname="_hastatus", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanode_hastatus, encoded="urn:NSConfig")

class sethanodeResponse:
    def __init__(self):
        self._return = None
        return
sethanodeResponse.typecode = Struct(pname=("urn:NSConfig","sethanode_hastatusResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanodeResponse, encoded="urn:NSConfig")

class sethanode_hasync:
    def __init__(self):
        self._id = None
        self._hasync = None
        return
sethanode_hasync.typecode = Struct(pname=("urn:NSConfig","sethanode_hasync"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="hasync", aname="_hasync", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanode_hasync, encoded="urn:NSConfig")

class sethanodeResponse:
    def __init__(self):
        self._return = None
        return
sethanodeResponse.typecode = Struct(pname=("urn:NSConfig","sethanode_hasyncResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanodeResponse, encoded="urn:NSConfig")

class sethanode_haprop:
    def __init__(self):
        self._id = None
        self._haprop = None
        return
sethanode_haprop.typecode = Struct(pname=("urn:NSConfig","sethanode_haprop"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="haprop", aname="_haprop", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanode_haprop, encoded="urn:NSConfig")

class sethanodeResponse:
    def __init__(self):
        self._return = None
        return
sethanodeResponse.typecode = Struct(pname=("urn:NSConfig","sethanode_hapropResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanodeResponse, encoded="urn:NSConfig")

class sethanode_hellointerval:
    def __init__(self):
        self._id = None
        self._hellointerval = None
        return
sethanode_hellointerval.typecode = Struct(pname=("urn:NSConfig","sethanode_hellointerval"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="hellointerval", aname="_hellointerval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanode_hellointerval, encoded="urn:NSConfig")

class sethanodeResponse:
    def __init__(self):
        self._return = None
        return
sethanodeResponse.typecode = Struct(pname=("urn:NSConfig","sethanode_hellointervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanodeResponse, encoded="urn:NSConfig")

class sethanode_deadinterval:
    def __init__(self):
        self._id = None
        self._deadinterval = None
        return
sethanode_deadinterval.typecode = Struct(pname=("urn:NSConfig","sethanode_deadinterval"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="deadinterval", aname="_deadinterval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanode_deadinterval, encoded="urn:NSConfig")

class sethanodeResponse:
    def __init__(self):
        self._return = None
        return
sethanodeResponse.typecode = Struct(pname=("urn:NSConfig","sethanode_deadintervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sethanodeResponse, encoded="urn:NSConfig")

class unsethanode_hastatus:
    def __init__(self):
        self._id = None
        return
unsethanode_hastatus.typecode = Struct(pname=("urn:NSConfig","unsethanode_hastatus"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanode_hastatus, encoded="urn:NSConfig")

class unsethanodeResponse:
    def __init__(self):
        self._return = None
        return
unsethanodeResponse.typecode = Struct(pname=("urn:NSConfig","unsethanode_hastatusResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanodeResponse, encoded="urn:NSConfig")

class unsethanode_hasync:
    def __init__(self):
        self._id = None
        return
unsethanode_hasync.typecode = Struct(pname=("urn:NSConfig","unsethanode_hasync"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanode_hasync, encoded="urn:NSConfig")

class unsethanodeResponse:
    def __init__(self):
        self._return = None
        return
unsethanodeResponse.typecode = Struct(pname=("urn:NSConfig","unsethanode_hasyncResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanodeResponse, encoded="urn:NSConfig")

class unsethanode_haprop:
    def __init__(self):
        self._id = None
        return
unsethanode_haprop.typecode = Struct(pname=("urn:NSConfig","unsethanode_haprop"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanode_haprop, encoded="urn:NSConfig")

class unsethanodeResponse:
    def __init__(self):
        self._return = None
        return
unsethanodeResponse.typecode = Struct(pname=("urn:NSConfig","unsethanode_hapropResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanodeResponse, encoded="urn:NSConfig")

class unsethanode_hellointerval:
    def __init__(self):
        self._id = None
        return
unsethanode_hellointerval.typecode = Struct(pname=("urn:NSConfig","unsethanode_hellointerval"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanode_hellointerval, encoded="urn:NSConfig")

class unsethanodeResponse:
    def __init__(self):
        self._return = None
        return
unsethanodeResponse.typecode = Struct(pname=("urn:NSConfig","unsethanode_hellointervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanodeResponse, encoded="urn:NSConfig")

class unsethanode_deadinterval:
    def __init__(self):
        self._id = None
        return
unsethanode_deadinterval.typecode = Struct(pname=("urn:NSConfig","unsethanode_deadinterval"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanode_deadinterval, encoded="urn:NSConfig")

class unsethanodeResponse:
    def __init__(self):
        self._return = None
        return
unsethanodeResponse.typecode = Struct(pname=("urn:NSConfig","unsethanode_deadintervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsethanodeResponse, encoded="urn:NSConfig")

class bindhanode_routemonitor:
    def __init__(self):
        self._id = None
        self._routemonitor = None
        self._netmask = None
        return
bindhanode_routemonitor.typecode = Struct(pname=("urn:NSConfig","bindhanode_routemonitor"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="routemonitor", aname="_routemonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindhanode_routemonitor, encoded="urn:NSConfig")

class bindhanodeResponse:
    def __init__(self):
        self._return = None
        return
bindhanodeResponse.typecode = Struct(pname=("urn:NSConfig","bindhanode_routemonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindhanodeResponse, encoded="urn:NSConfig")

class unbindhanode_routemonitor:
    def __init__(self):
        self._id = None
        self._routemonitor = None
        self._netmask = None
        return
unbindhanode_routemonitor.typecode = Struct(pname=("urn:NSConfig","unbindhanode_routemonitor"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="routemonitor", aname="_routemonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindhanode_routemonitor, encoded="urn:NSConfig")

class unbindhanodeResponse:
    def __init__(self):
        self._return = None
        return
unbindhanodeResponse.typecode = Struct(pname=("urn:NSConfig","unbindhanode_routemonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindhanodeResponse, encoded="urn:NSConfig")

class gethanode:
    def __init__(self):
        self._id = None
        return
gethanode.typecode = Struct(pname=("urn:NSConfig","gethanode"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gethanode, encoded="urn:NSConfig")

class gethanodeResponse:
    def __init__(self):
        self._return = None
        return
gethanodeResponse.typecode = Struct(pname=("urn:NSConfig","gethanodeResponse"), ofwhat=[ns0.gethanodeResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gethanodeResponse, encoded="urn:NSConfig")

class getlbmonbindings:
    def __init__(self):
        self._monitorname = None
        return
getlbmonbindings.typecode = Struct(pname=("urn:NSConfig","getlbmonbindings"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmonbindings, encoded="urn:NSConfig")

class getlbmonbindingsResponse:
    def __init__(self):
        self._return = None
        return
getlbmonbindingsResponse.typecode = Struct(pname=("urn:NSConfig","getlbmonbindingsResponse"), ofwhat=[ns0.getlbmonbindingsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmonbindingsResponse, encoded="urn:NSConfig")

class rmlbmonitor:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._respcode = None
        return
rmlbmonitor.typecode = Struct(pname=("urn:NSConfig","rmlbmonitor"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="respcode", aname="_respcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbmonitor, encoded="urn:NSConfig")

class rmlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
rmlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","rmlbmonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbmonitorResponse, encoded="urn:NSConfig")

class enablelbmonitor:
    def __init__(self):
        self._servicename = None
        self._servicegroupname = None
        self._monitorname = None
        return
enablelbmonitor.typecode = Struct(pname=("urn:NSConfig","enablelbmonitor"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablelbmonitor, encoded="urn:NSConfig")

class enablelbmonitorResponse:
    def __init__(self):
        self._return = None
        return
enablelbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","enablelbmonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablelbmonitorResponse, encoded="urn:NSConfig")

class disablelbmonitor:
    def __init__(self):
        self._servicename = None
        self._servicegroupname = None
        self._monitorname = None
        return
disablelbmonitor.typecode = Struct(pname=("urn:NSConfig","disablelbmonitor"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablelbmonitor, encoded="urn:NSConfig")

class disablelbmonitorResponse:
    def __init__(self):
        self._return = None
        return
disablelbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","disablelbmonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablelbmonitorResponse, encoded="urn:NSConfig")

class setlbgroup_persistencetype:
    def __init__(self):
        self._name = None
        self._persistencetype = None
        return
setlbgroup_persistencetype.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.grppersisttypeEnum_Def(pname="persistencetype", aname="_persistencetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_persistencetype, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class setlbgroup_persistencebackup:
    def __init__(self):
        self._name = None
        self._persistencebackup = None
        return
setlbgroup_persistencebackup.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistencebackup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.grpbkppersisttypeEnum_Def(pname="persistencebackup", aname="_persistencebackup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_persistencebackup, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistencebackupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class setlbgroup_backuppersistencetimeout:
    def __init__(self):
        self._name = None
        self._backuppersistencetimeout = None
        return
setlbgroup_backuppersistencetimeout.typecode = Struct(pname=("urn:NSConfig","setlbgroup_backuppersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="backuppersistencetimeout", aname="_backuppersistencetimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_backuppersistencetimeout, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_backuppersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class setlbgroup_persistmask:
    def __init__(self):
        self._name = None
        self._persistmask = None
        return
setlbgroup_persistmask.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="persistmask", aname="_persistmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_persistmask, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class setlbgroup_cookiedomain:
    def __init__(self):
        self._name = None
        self._cookiedomain = None
        return
setlbgroup_cookiedomain.typecode = Struct(pname=("urn:NSConfig","setlbgroup_cookiedomain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_cookiedomain, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_cookiedomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class setlbgroup_timeout:
    def __init__(self):
        self._name = None
        self._timeout = None
        return
setlbgroup_timeout.typecode = Struct(pname=("urn:NSConfig","setlbgroup_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroup_timeout, encoded="urn:NSConfig")

class setlbgroupResponse:
    def __init__(self):
        self._return = None
        return
setlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","setlbgroup_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_persistencetype:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_persistencetype.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_persistencetype, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_persistencebackup:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_persistencebackup.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistencebackup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_persistencebackup, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistencebackupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_backuppersistencetimeout:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_backuppersistencetimeout.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_backuppersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_backuppersistencetimeout, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_backuppersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_persistmask:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_persistmask.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_persistmask, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_cookiedomain:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_cookiedomain.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_cookiedomain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_cookiedomain, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_cookiedomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class unsetlbgroup_timeout:
    def __init__(self):
        self._name = None
        return
unsetlbgroup_timeout.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroup_timeout, encoded="urn:NSConfig")

class unsetlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unsetlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbgroup_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbgroupResponse, encoded="urn:NSConfig")

class bindlbgroup_vserver:
    def __init__(self):
        self._name = None
        self._vservername = None
        return
bindlbgroup_vserver.typecode = Struct(pname=("urn:NSConfig","bindlbgroup_vserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbgroup_vserver, encoded="urn:NSConfig")

class bindlbgroupResponse:
    def __init__(self):
        self._return = None
        return
bindlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","bindlbgroup_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbgroupResponse, encoded="urn:NSConfig")

class unbindlbgroup_vserver:
    def __init__(self):
        self._name = None
        self._vservername = None
        return
unbindlbgroup_vserver.typecode = Struct(pname=("urn:NSConfig","unbindlbgroup_vserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbgroup_vserver, encoded="urn:NSConfig")

class unbindlbgroupResponse:
    def __init__(self):
        self._return = None
        return
unbindlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbgroup_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbgroupResponse, encoded="urn:NSConfig")

class getlbgroup:
    def __init__(self):
        self._name = None
        return
getlbgroup.typecode = Struct(pname=("urn:NSConfig","getlbgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbgroup, encoded="urn:NSConfig")

class getlbgroupResponse:
    def __init__(self):
        self._return = None
        return
getlbgroupResponse.typecode = Struct(pname=("urn:NSConfig","getlbgroupResponse"), ofwhat=[ns0.getlbgroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbgroupResponse, encoded="urn:NSConfig")

class addlbmonitor:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._sipuri = None
        self._scriptname = None
        self._username = None
        self._password = None
        self._radkey = None
        return
addlbmonitor.typecode = Struct(pname=("urn:NSConfig","addlbmonitor"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sipuri", aname="_sipuri", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="scriptname", aname="_scriptname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbmonitor, encoded="urn:NSConfig")

class addlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
addlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","addlbmonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_action:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._actioN = None
        return
setlbmonitor_action.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_action"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monactionEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_action, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_respcode:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._respcode = None
        return
setlbmonitor_respcode.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_respcode"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="respcode", aname="_respcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_respcode, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_respcodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_httprequest:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._httprequest = None
        return
setlbmonitor_httprequest.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_httprequest"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="httprequest", aname="_httprequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_httprequest, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_httprequestResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_customheaders:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._customheaders = None
        return
setlbmonitor_customheaders.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_customheaders"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="customheaders", aname="_customheaders", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_customheaders, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_customheadersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_maxforwards:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._maxforwards = None
        return
setlbmonitor_maxforwards.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_maxforwards"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="maxforwards", aname="_maxforwards", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_maxforwards, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_maxforwardsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_sipmethod:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._sipmethod = None
        self._sipreguri = None
        return
setlbmonitor_sipmethod.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sipmethod"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.sipmethodEnum_Def(pname="sipmethod", aname="_sipmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sipreguri", aname="_sipreguri", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_sipmethod, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sipmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_sipuri:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._sipuri = None
        return
setlbmonitor_sipuri.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sipuri"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sipuri", aname="_sipuri", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_sipuri, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sipuriResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_send:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._send = None
        return
setlbmonitor_send.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_send"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="send", aname="_send", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_send, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sendResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_recv:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._recv = None
        return
setlbmonitor_recv.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_recv"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="recv", aname="_recv", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_recv, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_recvResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_query:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._query = None
        return
setlbmonitor_query.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_query"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="query", aname="_query", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_query, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_queryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_querytype:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._querytype = None
        return
setlbmonitor_querytype.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_querytype"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.dnsqueryEnum_Def(pname="querytype", aname="_querytype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_querytype, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_querytypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_username:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._username = None
        return
setlbmonitor_username.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_username"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_username, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_usernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_password:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._password = None
        return
setlbmonitor_password.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_password"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_password, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_radkey:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._radkey = None
        return
setlbmonitor_radkey.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radkey"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radkey", aname="_radkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_radkey, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_radnasid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._radnasid = None
        return
setlbmonitor_radnasid.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radnasid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radnasid", aname="_radnasid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_radnasid, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_radnasip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._radnasip = None
        return
setlbmonitor_radnasip.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radnasip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="radnasip", aname="_radnasip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_radnasip, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_lrtm:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._lrtM = None
        return
setlbmonitor_lrtm.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_lrtm"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="lrtM", aname="_lrtM", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_lrtm, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_lrtmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_deviation:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._deviation = None
        self._units = None
        return
setlbmonitor_deviation.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_deviation"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="deviation", aname="_deviation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.timeunitsEnum_Def(pname="units", aname="_units", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_deviation, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_deviationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_scriptname:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._scriptname = None
        return
setlbmonitor_scriptname.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_scriptname"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="scriptname", aname="_scriptname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_scriptname, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_scriptnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_scriptargs:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._scriptargs = None
        return
setlbmonitor_scriptargs.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_scriptargs"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="scriptargs", aname="_scriptargs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_scriptargs, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_scriptargsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_dispatcherip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._dispatcherip = None
        return
setlbmonitor_dispatcherip.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_dispatcherip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dispatcherip", aname="_dispatcherip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_dispatcherip, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_dispatcheripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_dispatcherport:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._dispatcherport = None
        return
setlbmonitor_dispatcherport.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_dispatcherport"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="dispatcherport", aname="_dispatcherport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_dispatcherport, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_dispatcherportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_interval:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._interval = None
        self._units2 = None
        return
setlbmonitor_interval.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_interval"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="interval", aname="_interval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.timeunitsEnum_Def(pname="units2", aname="_units2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_interval, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_intervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_resptimeout:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._resptimeout = None
        self._units3 = None
        return
setlbmonitor_resptimeout.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_resptimeout"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="resptimeout", aname="_resptimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.timeunitsEnum_Def(pname="units3", aname="_units3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_resptimeout, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_resptimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_resptimeoutthresh:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._resptimeoutthresh = None
        return
setlbmonitor_resptimeoutthresh.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_resptimeoutthresh"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="resptimeoutthresh", aname="_resptimeoutthresh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_resptimeoutthresh, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_resptimeoutthreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_retries:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._retries = None
        return
setlbmonitor_retries.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_retries"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="retries", aname="_retries", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_retries, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_retriesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_downtime:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._downtime = None
        self._units4 = None
        return
setlbmonitor_downtime.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_downtime"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="downtime", aname="_downtime", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.timeunitsEnum_Def(pname="units4", aname="_units4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_downtime, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_downtimeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_destip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._destip = None
        return
setlbmonitor_destip.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_destip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destip", aname="_destip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_destip, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_destipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_destport:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._destport = None
        return
setlbmonitor_destport.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_destport"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_destport, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_state:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._state = None
        return
setlbmonitor_state.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_state"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_state, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_reverse:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._reverse = None
        return
setlbmonitor_reverse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_reverse"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="reverse", aname="_reverse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_reverse, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_reverseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_transparent:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._transparent = None
        return
setlbmonitor_transparent.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_transparent"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="transparent", aname="_transparent", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_transparent, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_transparentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_iptunnel:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._iptunnel = None
        return
setlbmonitor_iptunnel.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_iptunnel"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="iptunnel", aname="_iptunnel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_iptunnel, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_iptunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_tos:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._tos = None
        return
setlbmonitor_tos.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_tos"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="tos", aname="_tos", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_tos, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_tosResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_tosid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._tosid = None
        return
setlbmonitor_tosid.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_tosid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="tosid", aname="_tosid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_tosid, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_tosidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_secure:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._secure = None
        return
setlbmonitor_secure.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_secure"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="secure", aname="_secure", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_secure, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_secureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_ipaddress:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._ipaddress = None
        return
setlbmonitor_ipaddress.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_ipaddress"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_ipaddress, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_group:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._group = None
        return
setlbmonitor_group.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_group"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="group", aname="_group", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_group, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_groupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_filename:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._filename = None
        return
setlbmonitor_filename.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_filename"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="filename", aname="_filename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_filename, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_filenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_basedn:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._basedn = None
        return
setlbmonitor_basedn.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_basedn"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="basedn", aname="_basedn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_basedn, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_basednResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_binddn:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._binddn = None
        return
setlbmonitor_binddn.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_binddn"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="binddn", aname="_binddn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_binddn, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_binddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_filter:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._filter = None
        return
setlbmonitor_filter.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_filter"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="filter", aname="_filter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_filter, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_filterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_attribute:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._attribute = None
        return
setlbmonitor_attribute.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_attribute"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="attribute", aname="_attribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_attribute, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_attributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_database:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._database = None
        return
setlbmonitor_database.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_database"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="database", aname="_database", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_database, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_databaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_sqlquery:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._sqlquery = None
        return
setlbmonitor_sqlquery.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sqlquery"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sqlquery", aname="_sqlquery", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_sqlquery, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sqlqueryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_snmpoid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._snmpoid = None
        return
setlbmonitor_snmpoid.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpoid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="snmpoid", aname="_snmpoid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_snmpoid, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpoidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_snmpcommunity:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._snmpcommunity = None
        return
setlbmonitor_snmpcommunity.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpcommunity"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="snmpcommunity", aname="_snmpcommunity", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_snmpcommunity, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpcommunityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_snmpthreshold:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._snmpthreshold = None
        return
setlbmonitor_snmpthreshold.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpthreshold"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="snmpthreshold", aname="_snmpthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_snmpthreshold, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_snmpversion:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._snmpversion = None
        return
setlbmonitor_snmpversion.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpversion"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.agentversionEnum_Def(pname="snmpversion", aname="_snmpversion", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_snmpversion, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_snmpversionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_metrictable:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._metrictable = None
        return
setlbmonitor_metrictable.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_metrictable"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_metrictable, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_metrictableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_metric:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._metric = None
        self._metricthreshold = None
        self._metricweight = None
        return
setlbmonitor_metric.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_metric"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedLong(pname="metricthreshold", aname="_metricthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="metricweight", aname="_metricweight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_metric, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_application:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._application = None
        return
setlbmonitor_application.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_application"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="application", aname="_application", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_application, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_applicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class setlbmonitor_sitepath:
    def __init__(self):
        self._monitorname = None
        self._type = None
        self._sitepath = None
        return
setlbmonitor_sitepath.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sitepath"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sitepath", aname="_sitepath", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitor_sitepath, encoded="urn:NSConfig")

class setlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
setlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","setlbmonitor_sitepathResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_ipaddress:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_ipaddress.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_ipaddress"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_ipaddress, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_action:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_action.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_action"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_action, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_respcode:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_respcode.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_respcode"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_respcode, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_respcodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_httprequest:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_httprequest.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_httprequest"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_httprequest, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_httprequestResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_customheaders:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_customheaders.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_customheaders"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_customheaders, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_customheadersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_maxforwards:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_maxforwards.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_maxforwards"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_maxforwards, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_maxforwardsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_sipmethod:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_sipmethod.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipmethod"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_sipmethod, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_sipreguri:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_sipreguri.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipreguri"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_sipreguri, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipreguriResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_sipuri:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_sipuri.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipuri"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_sipuri, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sipuriResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_send:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_send.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_send"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_send, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sendResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_recv:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_recv.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_recv"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_recv, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_recvResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_query:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_query.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_query"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_query, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_queryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_querytype:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_querytype.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_querytype"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_querytype, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_querytypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_username:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_username.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_username"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_username, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_usernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_password:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_password.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_password"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_password, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_radkey:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_radkey.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radkey"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_radkey, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_radnasid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_radnasid.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radnasid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_radnasid, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radnasidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_radnasip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_radnasip.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radnasip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_radnasip, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_radnasipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_lrtm:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_lrtm.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_lrtm"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_lrtm, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_lrtmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_deviation:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_deviation.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_deviation"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_deviation, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_deviationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_scriptname:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_scriptname.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_scriptname"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_scriptname, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_scriptnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_scriptargs:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_scriptargs.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_scriptargs"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_scriptargs, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_scriptargsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_dispatcherip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_dispatcherip.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_dispatcherip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_dispatcherip, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_dispatcheripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_dispatcherport:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_dispatcherport.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_dispatcherport"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_dispatcherport, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_dispatcherportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_interval:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_interval.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_interval"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_interval, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_intervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_resptimeout:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_resptimeout.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_resptimeout"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_resptimeout, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_resptimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_resptimeoutthresh:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_resptimeoutthresh.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_resptimeoutthresh"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_resptimeoutthresh, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_resptimeoutthreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_retries:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_retries.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_retries"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_retries, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_retriesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_downtime:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_downtime.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_downtime"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_downtime, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_downtimeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_destip:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_destip.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_destip"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_destip, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_destipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_destport:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_destport.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_destport"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_destport, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_state:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_state.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_state"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_state, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_reverse:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_reverse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_reverse"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_reverse, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_reverseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_transparent:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_transparent.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_transparent"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_transparent, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_transparentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_iptunnel:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_iptunnel.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_iptunnel"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_iptunnel, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_iptunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_tos:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_tos.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_tos"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_tos, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_tosResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_tosid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_tosid.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_tosid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_tosid, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_tosidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_secure:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_secure.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_secure"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_secure, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_secureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_group:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_group.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_group"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_group, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_groupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_filename:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_filename.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_filename"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_filename, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_filenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_basedn:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_basedn.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_basedn"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_basedn, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_basednResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_binddn:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_binddn.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_binddn"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_binddn, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_binddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_filter:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_filter.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_filter"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_filter, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_filterResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_attribute:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_attribute.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_attribute"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_attribute, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_attributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_database:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_database.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_database"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_database, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_databaseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_sqlquery:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_sqlquery.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sqlquery"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_sqlquery, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_sqlqueryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_snmpoid:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_snmpoid.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpoid"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_snmpoid, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpoidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_snmpcommunity:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_snmpcommunity.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpcommunity"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_snmpcommunity, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpcommunityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_snmpthreshold:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_snmpthreshold.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpthreshold"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_snmpthreshold, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_snmpversion:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_snmpversion.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpversion"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_snmpversion, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_snmpversionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class unsetlbmonitor_metrictable:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
unsetlbmonitor_metrictable.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_metrictable"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.monitortypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitor_metrictable, encoded="urn:NSConfig")

class unsetlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unsetlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbmonitor_metrictableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbmonitorResponse, encoded="urn:NSConfig")

class bindlbmonitor_service:
    def __init__(self):
        self._monitorname = None
        self._servicename = None
        self._state = None
        self._weight = None
        return
bindlbmonitor_service.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_service"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitor_service, encoded="urn:NSConfig")

class bindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
bindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitorResponse, encoded="urn:NSConfig")

class bindlbmonitor_servicegroup:
    def __init__(self):
        self._monitorname = None
        self._servicegroupname = None
        self._state2 = None
        self._weight2 = None
        return
bindlbmonitor_servicegroup.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_servicegroup"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state2", aname="_state2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight2", aname="_weight2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitor_servicegroup, encoded="urn:NSConfig")

class bindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
bindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitorResponse, encoded="urn:NSConfig")

class bindlbmonitor_metric:
    def __init__(self):
        self._monitorname = None
        self._metric = None
        self._metricthreshold = None
        self._metricweight = None
        return
bindlbmonitor_metric.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_metric"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedLong(pname="metricthreshold", aname="_metricthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="metricweight", aname="_metricweight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitor_metric, encoded="urn:NSConfig")

class bindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
bindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","bindlbmonitor_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmonitorResponse, encoded="urn:NSConfig")

class unbindlbmonitor_service:
    def __init__(self):
        self._monitorname = None
        self._servicename = None
        return
unbindlbmonitor_service.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_service"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitor_service, encoded="urn:NSConfig")

class unbindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unbindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitorResponse, encoded="urn:NSConfig")

class unbindlbmonitor_servicegroup:
    def __init__(self):
        self._monitorname = None
        self._servicegroupname = None
        return
unbindlbmonitor_servicegroup.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_servicegroup"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitor_servicegroup, encoded="urn:NSConfig")

class unbindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unbindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitorResponse, encoded="urn:NSConfig")

class unbindlbmonitor_metric:
    def __init__(self):
        self._monitorname = None
        self._metric = None
        return
unbindlbmonitor_metric.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_metric"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitor_metric, encoded="urn:NSConfig")

class unbindlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
unbindlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbmonitor_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmonitorResponse, encoded="urn:NSConfig")

class getlbmonitor:
    def __init__(self):
        self._monitorname = None
        self._type = None
        return
getlbmonitor.typecode = Struct(pname=("urn:NSConfig","getlbmonitor"), ofwhat=[ZSI.TC.String(pname="monitorname", aname="_monitorname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmonitor, encoded="urn:NSConfig")

class getlbmonitorResponse:
    def __init__(self):
        self._return = None
        return
getlbmonitorResponse.typecode = Struct(pname=("urn:NSConfig","getlbmonitorResponse"), ofwhat=[ns0.getlbmonitorResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmonitorResponse, encoded="urn:NSConfig")

class addlbroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gatewayname = None
        return
addlbroute.typecode = Struct(pname=("urn:NSConfig","addlbroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gatewayname", aname="_gatewayname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbroute, encoded="urn:NSConfig")

class addlbrouteResponse:
    def __init__(self):
        self._return = None
        return
addlbrouteResponse.typecode = Struct(pname=("urn:NSConfig","addlbrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbrouteResponse, encoded="urn:NSConfig")

class rmlbroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        return
rmlbroute.typecode = Struct(pname=("urn:NSConfig","rmlbroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbroute, encoded="urn:NSConfig")

class rmlbrouteResponse:
    def __init__(self):
        self._return = None
        return
rmlbrouteResponse.typecode = Struct(pname=("urn:NSConfig","rmlbrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbrouteResponse, encoded="urn:NSConfig")

class getlbroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        return
getlbroute.typecode = Struct(pname=("urn:NSConfig","getlbroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbroute, encoded="urn:NSConfig")

class getlbrouteResponse:
    def __init__(self):
        self._return = None
        return
getlbrouteResponse.typecode = Struct(pname=("urn:NSConfig","getlbrouteResponse"), ofwhat=[ns0.getlbrouteResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbrouteResponse, encoded="urn:NSConfig")

class addlbvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._port = None
        self._range = None
        self._state = None
        self._vipheader = None
        return
addlbvserver.typecode = Struct(pname=("urn:NSConfig","addlbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vipheader", aname="_vipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbvserver, encoded="urn:NSConfig")

class addlbvserverResponse:
    def __init__(self):
        self._return = None
        return
addlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","addlbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbvserverResponse, encoded="urn:NSConfig")

class rmlbvserver:
    def __init__(self):
        self._name = None
        return
rmlbvserver.typecode = Struct(pname=("urn:NSConfig","rmlbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbvserver, encoded="urn:NSConfig")

class rmlbvserverResponse:
    def __init__(self):
        self._return = None
        return
rmlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmlbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setlbvserver_ipaddress.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_ipaddress, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_ippattern:
    def __init__(self):
        self._name = None
        self._ippattern = None
        return
setlbvserver_ippattern.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ippattern"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ippattern", aname="_ippattern", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_ippattern, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ippatternResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_ipmask:
    def __init__(self):
        self._name = None
        self._ipmask = None
        return
setlbvserver_ipmask.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ipmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipmask", aname="_ipmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_ipmask, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ipmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_weight:
    def __init__(self):
        self._name = None
        self._weight = None
        self._servicename = None
        return
setlbvserver_weight.typecode = Struct(pname=("urn:NSConfig","setlbvserver_weight"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_weight, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_persistencetype:
    def __init__(self):
        self._name = None
        self._persistencetype = None
        return
setlbvserver_persistencetype.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lbpersisttypeEnum_Def(pname="persistencetype", aname="_persistencetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_persistencetype, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_timeout:
    def __init__(self):
        self._name = None
        self._timeout = None
        return
setlbvserver_timeout.typecode = Struct(pname=("urn:NSConfig","setlbvserver_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_timeout, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_persistencebackup:
    def __init__(self):
        self._name = None
        self._persistencebackup = None
        return
setlbvserver_persistencebackup.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistencebackup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.bkplbpersisttypeEnum_Def(pname="persistencebackup", aname="_persistencebackup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_persistencebackup, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistencebackupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_backuppersistencetimeout:
    def __init__(self):
        self._name = None
        self._backuppersistencetimeout = None
        return
setlbvserver_backuppersistencetimeout.typecode = Struct(pname=("urn:NSConfig","setlbvserver_backuppersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="backuppersistencetimeout", aname="_backuppersistencetimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_backuppersistencetimeout, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_backuppersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_lbmethod:
    def __init__(self):
        self._name = None
        self._lbmethod = None
        self._hashlength = None
        self._netmask = None
        return
setlbvserver_lbmethod.typecode = Struct(pname=("urn:NSConfig","setlbvserver_lbmethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lbmethodEnum_Def(pname="lbmethod", aname="_lbmethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="hashlength", aname="_hashlength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_lbmethod, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_lbmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setlbvserver_rule.typecode = Struct(pname=("urn:NSConfig","setlbvserver_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_rule, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_persistmask:
    def __init__(self):
        self._name = None
        self._persistmask = None
        return
setlbvserver_persistmask.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="persistmask", aname="_persistmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_persistmask, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_pq:
    def __init__(self):
        self._name = None
        self._pq = None
        return
setlbvserver_pq.typecode = Struct(pname=("urn:NSConfig","setlbvserver_pq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="pq", aname="_pq", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_pq, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_pqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_sc:
    def __init__(self):
        self._name = None
        self._sc = None
        return
setlbvserver_sc.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sc"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="sc", aname="_sc", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_sc, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_m:
    def __init__(self):
        self._name = None
        self._m = None
        return
setlbvserver_m.typecode = Struct(pname=("urn:NSConfig","setlbvserver_m"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.redirmodeEnum_Def(pname="m", aname="_m", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_m, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_mResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_tosid:
    def __init__(self):
        self._name = None
        self._tosid = None
        return
setlbvserver_tosid.typecode = Struct(pname=("urn:NSConfig","setlbvserver_tosid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="tosid", aname="_tosid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_tosid, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_tosidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_datalength:
    def __init__(self):
        self._name = None
        self._datalength = None
        return
setlbvserver_datalength.typecode = Struct(pname=("urn:NSConfig","setlbvserver_datalength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="datalength", aname="_datalength", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_datalength, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_datalengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_dataoffset:
    def __init__(self):
        self._name = None
        self._dataoffset = None
        return
setlbvserver_dataoffset.typecode = Struct(pname=("urn:NSConfig","setlbvserver_dataoffset"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="dataoffset", aname="_dataoffset", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_dataoffset, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_dataoffsetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_sessionless:
    def __init__(self):
        self._name = None
        self._sessionless = None
        return
setlbvserver_sessionless.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sessionless"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessionless", aname="_sessionless", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_sessionless, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sessionlessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_connfailover:
    def __init__(self):
        self._name = None
        self._connfailover = None
        return
setlbvserver_connfailover.typecode = Struct(pname=("urn:NSConfig","setlbvserver_connfailover"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.connfailEnum_Def(pname="connfailover", aname="_connfailover", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_connfailover, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_connfailoverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_backupvserver:
    def __init__(self):
        self._name = None
        self._backupvserver = None
        return
setlbvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","setlbvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_backupvserver, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_redirecturl:
    def __init__(self):
        self._name = None
        self._redirecturl = None
        return
setlbvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","setlbvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_redirecturl, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_cacheable:
    def __init__(self):
        self._name = None
        self._cacheable = None
        return
setlbvserver_cacheable.typecode = Struct(pname=("urn:NSConfig","setlbvserver_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="cacheable", aname="_cacheable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_cacheable, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_clttimeout:
    def __init__(self):
        self._name = None
        self._clttimeout = None
        return
setlbvserver_clttimeout.typecode = Struct(pname=("urn:NSConfig","setlbvserver_clttimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_clttimeout, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_clttimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_somethod:
    def __init__(self):
        self._name = None
        self._somethod = None
        return
setlbvserver_somethod.typecode = Struct(pname=("urn:NSConfig","setlbvserver_somethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.spillovermethodsEnum_Def(pname="somethod", aname="_somethod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_somethod, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_somethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_sopersistence:
    def __init__(self):
        self._name = None
        self._sopersistence = None
        return
setlbvserver_sopersistence.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sopersistence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sopersistence", aname="_sopersistence", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_sopersistence, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sopersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_sopersistencetimeout:
    def __init__(self):
        self._name = None
        self._sopersistencetimeout = None
        return
setlbvserver_sopersistencetimeout.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sopersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_sopersistencetimeout, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sopersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_sothreshold:
    def __init__(self):
        self._name = None
        self._sothreshold = None
        return
setlbvserver_sothreshold.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sothreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_sothreshold, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_sothresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_redirectportrewrite:
    def __init__(self):
        self._name = None
        self._redirectportrewrite = None
        return
setlbvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","setlbvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="redirectportrewrite", aname="_redirectportrewrite", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_redirectportrewrite, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_downstateflush:
    def __init__(self):
        self._name = None
        self._downstateflush = None
        return
setlbvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","setlbvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_downstateflush, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class setlbvserver_insertvserveripport:
    def __init__(self):
        self._name = None
        self._insertvserveripport = None
        self._vipheader = None
        return
setlbvserver_insertvserveripport.typecode = Struct(pname=("urn:NSConfig","setlbvserver_insertvserveripport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vipinsertEnum_Def(pname="insertvserveripport", aname="_insertvserveripport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vipheader", aname="_vipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserver_insertvserveripport, encoded="urn:NSConfig")

class setlbvserverResponse:
    def __init__(self):
        self._return = None
        return
setlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","setlbvserver_insertvserveripportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_backupvserver:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_backupvserver.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_backupvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_backupvserver, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_backupvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_redirecturl:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_redirecturl.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirecturl"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_redirecturl, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirecturlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_servicename:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_servicename.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_servicename"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_servicename, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_servicenameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_persistencetype:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_persistencetype.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistencetype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_persistencetype, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistencetypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_timeout:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_timeout.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_timeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_timeout, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_timeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_persistencebackup:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_persistencebackup.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistencebackup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_persistencebackup, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistencebackupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_backuppersistencetimeout:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_backuppersistencetimeout.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_backuppersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_backuppersistencetimeout, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_backuppersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_lbmethod:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_lbmethod.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_lbmethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_lbmethod, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_lbmethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_hashlength:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_hashlength.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_hashlength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_hashlength, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_hashlengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_netmask:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_netmask.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_netmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_netmask, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_rule:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_rule.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_rule, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_persistmask:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_persistmask.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistmask"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_persistmask, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_persistmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_pq:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_pq.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_pq"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_pq, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_pqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_sc:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_sc.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sc"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_sc, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_scResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_m:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_m.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_m"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_m, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_mResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_tosid:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_tosid.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_tosid"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_tosid, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_tosidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_datalength:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_datalength.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_datalength"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_datalength, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_datalengthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_dataoffset:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_dataoffset.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_dataoffset"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_dataoffset, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_dataoffsetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_sessionless:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_sessionless.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sessionless"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_sessionless, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sessionlessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_connfailover:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_connfailover.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_connfailover"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_connfailover, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_connfailoverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_redirecturl2:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_redirecturl2.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirecturl2"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_redirecturl2, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirecturl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_cacheable:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_cacheable.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_cacheable"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_cacheable, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_cacheableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_somethod:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_somethod.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_somethod"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_somethod, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_somethodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_sopersistence:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_sopersistence.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sopersistence"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_sopersistence, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sopersistenceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_sopersistencetimeout:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_sopersistencetimeout.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sopersistencetimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_sopersistencetimeout, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sopersistencetimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_sothreshold:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_sothreshold.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sothreshold"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_sothreshold, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_sothresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_redirectportrewrite:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_redirectportrewrite, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_downstateflush:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_downstateflush, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_insertvserveripport:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_insertvserveripport.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_insertvserveripport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_insertvserveripport, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_insertvserveripportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class unsetlbvserver_vipheader:
    def __init__(self):
        self._name = None
        return
unsetlbvserver_vipheader.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_vipheader"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserver_vipheader, encoded="urn:NSConfig")

class unsetlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbvserver_vipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbvserverResponse, encoded="urn:NSConfig")

class bindlbvserver_service:
    def __init__(self):
        self._name = None
        self._servicename = None
        self._weight = None
        return
bindlbvserver_service.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_service"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserver_service, encoded="urn:NSConfig")

class bindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
bindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserverResponse, encoded="urn:NSConfig")

class bindlbvserver_servicegroup:
    def __init__(self):
        self._name = None
        self._servicegroupname = None
        return
bindlbvserver_servicegroup.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_servicegroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserver_servicegroup, encoded="urn:NSConfig")

class bindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
bindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserverResponse, encoded="urn:NSConfig")

class bindlbvserver_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._type = None
        self._invoke = None
        self._labeltype = None
        self._labelname = None
        return
bindlbvserver_policy.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vserverbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserver_policy, encoded="urn:NSConfig")

class bindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
bindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindlbvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbvserverResponse, encoded="urn:NSConfig")

class unbindlbvserver_service:
    def __init__(self):
        self._name = None
        self._servicename = None
        return
unbindlbvserver_service.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_service"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserver_service, encoded="urn:NSConfig")

class unbindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserverResponse, encoded="urn:NSConfig")

class unbindlbvserver_servicegroup:
    def __init__(self):
        self._name = None
        self._servicegroupname = None
        return
unbindlbvserver_servicegroup.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_servicegroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserver_servicegroup, encoded="urn:NSConfig")

class unbindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserverResponse, encoded="urn:NSConfig")

class unbindlbvserver_policy:
    def __init__(self):
        self._name = None
        self._policyname = None
        self._type = None
        return
unbindlbvserver_policy.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vserverbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserver_policy, encoded="urn:NSConfig")

class unbindlbvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbvserverResponse, encoded="urn:NSConfig")

class enablelbvserver:
    def __init__(self):
        self._name = None
        return
enablelbvserver.typecode = Struct(pname=("urn:NSConfig","enablelbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablelbvserver, encoded="urn:NSConfig")

class enablelbvserverResponse:
    def __init__(self):
        self._return = None
        return
enablelbvserverResponse.typecode = Struct(pname=("urn:NSConfig","enablelbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablelbvserverResponse, encoded="urn:NSConfig")

class disablelbvserver:
    def __init__(self):
        self._name = None
        return
disablelbvserver.typecode = Struct(pname=("urn:NSConfig","disablelbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablelbvserver, encoded="urn:NSConfig")

class disablelbvserverResponse:
    def __init__(self):
        self._return = None
        return
disablelbvserverResponse.typecode = Struct(pname=("urn:NSConfig","disablelbvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablelbvserverResponse, encoded="urn:NSConfig")

class getlbvserver:
    def __init__(self):
        self._name = None
        return
getlbvserver.typecode = Struct(pname=("urn:NSConfig","getlbvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbvserver, encoded="urn:NSConfig")

class getlbvserverResponse:
    def __init__(self):
        self._return = None
        return
getlbvserverResponse.typecode = Struct(pname=("urn:NSConfig","getlbvserverResponse"), ofwhat=[ns0.getlbvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbvserverResponse, encoded="urn:NSConfig")

class setlbsipparameters_rnatsrcport:
    def __init__(self):
        self._rnatsrcport = None
        return
setlbsipparameters_rnatsrcport.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_rnatsrcport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="rnatsrcport", aname="_rnatsrcport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparameters_rnatsrcport, encoded="urn:NSConfig")

class setlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
setlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_rnatsrcportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparametersResponse, encoded="urn:NSConfig")

class setlbsipparameters_rnatdstport:
    def __init__(self):
        self._rnatdstport = None
        return
setlbsipparameters_rnatdstport.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_rnatdstport"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="rnatdstport", aname="_rnatdstport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparameters_rnatdstport, encoded="urn:NSConfig")

class setlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
setlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_rnatdstportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparametersResponse, encoded="urn:NSConfig")

class setlbsipparameters_retrydur:
    def __init__(self):
        self._retrydur = None
        return
setlbsipparameters_retrydur.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_retrydur"), ofwhat=[ZSI.TCnumbers.Iint(pname="retrydur", aname="_retrydur", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparameters_retrydur, encoded="urn:NSConfig")

class setlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
setlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_retrydurResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparametersResponse, encoded="urn:NSConfig")

class setlbsipparameters_addrportvip:
    def __init__(self):
        self._addrportvip = None
        return
setlbsipparameters_addrportvip.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_addrportvip"), ofwhat=[ns0.enabledisabledEnum_Def(pname="addrportvip", aname="_addrportvip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparameters_addrportvip, encoded="urn:NSConfig")

class setlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
setlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","setlbsipparameters_addrportvipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbsipparametersResponse, encoded="urn:NSConfig")

class unsetlbsipparameters_rnatsrcport:
    def __init__(self):
        return
unsetlbsipparameters_rnatsrcport.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_rnatsrcport"), ofwhat=[], pyclass=unsetlbsipparameters_rnatsrcport, encoded="urn:NSConfig")

class unsetlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
unsetlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_rnatsrcportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbsipparametersResponse, encoded="urn:NSConfig")

class unsetlbsipparameters_rnatdstport:
    def __init__(self):
        return
unsetlbsipparameters_rnatdstport.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_rnatdstport"), ofwhat=[], pyclass=unsetlbsipparameters_rnatdstport, encoded="urn:NSConfig")

class unsetlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
unsetlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_rnatdstportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbsipparametersResponse, encoded="urn:NSConfig")

class unsetlbsipparameters_retrydur:
    def __init__(self):
        return
unsetlbsipparameters_retrydur.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_retrydur"), ofwhat=[], pyclass=unsetlbsipparameters_retrydur, encoded="urn:NSConfig")

class unsetlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
unsetlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_retrydurResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbsipparametersResponse, encoded="urn:NSConfig")

class unsetlbsipparameters_addrportvip:
    def __init__(self):
        return
unsetlbsipparameters_addrportvip.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_addrportvip"), ofwhat=[], pyclass=unsetlbsipparameters_addrportvip, encoded="urn:NSConfig")

class unsetlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
unsetlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbsipparameters_addrportvipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbsipparametersResponse, encoded="urn:NSConfig")

class getlbsipparameters:
    def __init__(self):
        return
getlbsipparameters.typecode = Struct(pname=("urn:NSConfig","getlbsipparameters"), ofwhat=[], pyclass=getlbsipparameters, encoded="urn:NSConfig")

class getlbsipparametersResponse:
    def __init__(self):
        self._return = None
        return
getlbsipparametersResponse.typecode = Struct(pname=("urn:NSConfig","getlbsipparametersResponse"), ofwhat=[ns0.getlbsipparametersResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbsipparametersResponse, encoded="urn:NSConfig")

class addlbmetrictable:
    def __init__(self):
        self._metrictable = None
        return
addlbmetrictable.typecode = Struct(pname=("urn:NSConfig","addlbmetrictable"), ofwhat=[ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbmetrictable, encoded="urn:NSConfig")

class addlbmetrictableResponse:
    def __init__(self):
        self._return = None
        return
addlbmetrictableResponse.typecode = Struct(pname=("urn:NSConfig","addlbmetrictableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbmetrictableResponse, encoded="urn:NSConfig")

class rmlbmetrictable:
    def __init__(self):
        self._metrictable = None
        return
rmlbmetrictable.typecode = Struct(pname=("urn:NSConfig","rmlbmetrictable"), ofwhat=[ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbmetrictable, encoded="urn:NSConfig")

class rmlbmetrictableResponse:
    def __init__(self):
        self._return = None
        return
rmlbmetrictableResponse.typecode = Struct(pname=("urn:NSConfig","rmlbmetrictableResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbmetrictableResponse, encoded="urn:NSConfig")

class bindlbmetrictable_metric:
    def __init__(self):
        self._metrictable = None
        self._metric = None
        self._snmpoid = None
        return
bindlbmetrictable_metric.typecode = Struct(pname=("urn:NSConfig","bindlbmetrictable_metric"), ofwhat=[ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="snmpoid", aname="_snmpoid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmetrictable_metric, encoded="urn:NSConfig")

class bindlbmetrictableResponse:
    def __init__(self):
        self._return = None
        return
bindlbmetrictableResponse.typecode = Struct(pname=("urn:NSConfig","bindlbmetrictable_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbmetrictableResponse, encoded="urn:NSConfig")

class unbindlbmetrictable_metric:
    def __init__(self):
        self._metrictable = None
        self._metric = None
        return
unbindlbmetrictable_metric.typecode = Struct(pname=("urn:NSConfig","unbindlbmetrictable_metric"), ofwhat=[ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmetrictable_metric, encoded="urn:NSConfig")

class unbindlbmetrictableResponse:
    def __init__(self):
        self._return = None
        return
unbindlbmetrictableResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbmetrictable_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbmetrictableResponse, encoded="urn:NSConfig")

class getlbmetrictable:
    def __init__(self):
        self._metrictable = None
        return
getlbmetrictable.typecode = Struct(pname=("urn:NSConfig","getlbmetrictable"), ofwhat=[ZSI.TC.String(pname="metrictable", aname="_metrictable", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmetrictable, encoded="urn:NSConfig")

class getlbmetrictableResponse:
    def __init__(self):
        self._return = None
        return
getlbmetrictableResponse.typecode = Struct(pname=("urn:NSConfig","getlbmetrictableResponse"), ofwhat=[ns0.getlbmetrictableResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbmetrictableResponse, encoded="urn:NSConfig")

class addlbwlm:
    def __init__(self):
        self._wlmname = None
        self._ipaddress = None
        self._port = None
        self._lbuid = None
        return
addlbwlm.typecode = Struct(pname=("urn:NSConfig","addlbwlm"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="lbuid", aname="_lbuid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbwlm, encoded="urn:NSConfig")

class addlbwlmResponse:
    def __init__(self):
        self._return = None
        return
addlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","addlbwlmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addlbwlmResponse, encoded="urn:NSConfig")

class rmlbwlm:
    def __init__(self):
        self._wlmname = None
        return
rmlbwlm.typecode = Struct(pname=("urn:NSConfig","rmlbwlm"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbwlm, encoded="urn:NSConfig")

class rmlbwlmResponse:
    def __init__(self):
        self._return = None
        return
rmlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","rmlbwlmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmlbwlmResponse, encoded="urn:NSConfig")

class setlbwlm_katimeout:
    def __init__(self):
        self._wlmname = None
        self._katimeout = None
        return
setlbwlm_katimeout.typecode = Struct(pname=("urn:NSConfig","setlbwlm_katimeout"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="katimeout", aname="_katimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbwlm_katimeout, encoded="urn:NSConfig")

class setlbwlmResponse:
    def __init__(self):
        self._return = None
        return
setlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","setlbwlm_katimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlbwlmResponse, encoded="urn:NSConfig")

class unsetlbwlm_katimeout:
    def __init__(self):
        self._wlmname = None
        return
unsetlbwlm_katimeout.typecode = Struct(pname=("urn:NSConfig","unsetlbwlm_katimeout"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbwlm_katimeout, encoded="urn:NSConfig")

class unsetlbwlmResponse:
    def __init__(self):
        self._return = None
        return
unsetlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","unsetlbwlm_katimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetlbwlmResponse, encoded="urn:NSConfig")

class getlbwlm:
    def __init__(self):
        self._wlmname = None
        return
getlbwlm.typecode = Struct(pname=("urn:NSConfig","getlbwlm"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbwlm, encoded="urn:NSConfig")

class getlbwlmResponse:
    def __init__(self):
        self._return = None
        return
getlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","getlbwlmResponse"), ofwhat=[ns0.getlbwlmResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlbwlmResponse, encoded="urn:NSConfig")

class bindlbwlm_vserver:
    def __init__(self):
        self._wlmname = None
        self._vservername = None
        return
bindlbwlm_vserver.typecode = Struct(pname=("urn:NSConfig","bindlbwlm_vserver"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbwlm_vserver, encoded="urn:NSConfig")

class bindlbwlmResponse:
    def __init__(self):
        self._return = None
        return
bindlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","bindlbwlm_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindlbwlmResponse, encoded="urn:NSConfig")

class unbindlbwlm_vserver:
    def __init__(self):
        self._wlmname = None
        self._vservername = None
        return
unbindlbwlm_vserver.typecode = Struct(pname=("urn:NSConfig","unbindlbwlm_vserver"), ofwhat=[ZSI.TC.String(pname="wlmname", aname="_wlmname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbwlm_vserver, encoded="urn:NSConfig")

class unbindlbwlmResponse:
    def __init__(self):
        self._return = None
        return
unbindlbwlmResponse.typecode = Struct(pname=("urn:NSConfig","unbindlbwlm_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindlbwlmResponse, encoded="urn:NSConfig")

class clearnd6:
    def __init__(self):
        return
clearnd6.typecode = Struct(pname=("urn:NSConfig","clearnd6"), ofwhat=[], pyclass=clearnd6, encoded="urn:NSConfig")

class clearnd6Response:
    def __init__(self):
        self._return = None
        return
clearnd6Response.typecode = Struct(pname=("urn:NSConfig","clearnd6Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearnd6Response, encoded="urn:NSConfig")

class addarp:
    def __init__(self):
        self._ipaddress = None
        self._mac = None
        self._ifnum = None
        return
addarp.typecode = Struct(pname=("urn:NSConfig","addarp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="mac", aname="_mac", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addarp, encoded="urn:NSConfig")

class addarpResponse:
    def __init__(self):
        self._return = None
        return
addarpResponse.typecode = Struct(pname=("urn:NSConfig","addarpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addarpResponse, encoded="urn:NSConfig")

class rmarp:
    def __init__(self):
        self._ipaddress = None
        self._all = None
        return
rmarp.typecode = Struct(pname=("urn:NSConfig","rmarp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmarp, encoded="urn:NSConfig")

class rmarpResponse:
    def __init__(self):
        self._return = None
        return
rmarpResponse.typecode = Struct(pname=("urn:NSConfig","rmarpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmarpResponse, encoded="urn:NSConfig")

class sendarp:
    def __init__(self):
        self._ipaddress = None
        self._all = None
        return
sendarp.typecode = Struct(pname=("urn:NSConfig","sendarp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sendarp, encoded="urn:NSConfig")

class sendarpResponse:
    def __init__(self):
        self._return = None
        return
sendarpResponse.typecode = Struct(pname=("urn:NSConfig","sendarpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=sendarpResponse, encoded="urn:NSConfig")

class getarp:
    def __init__(self):
        self._ipaddress = None
        return
getarp.typecode = Struct(pname=("urn:NSConfig","getarp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getarp, encoded="urn:NSConfig")

class getarpResponse:
    def __init__(self):
        self._return = None
        return
getarpResponse.typecode = Struct(pname=("urn:NSConfig","getarpResponse"), ofwhat=[ns0.getarpResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getarpResponse, encoded="urn:NSConfig")

class getci:
    def __init__(self):
        return
getci.typecode = Struct(pname=("urn:NSConfig","getci"), ofwhat=[], pyclass=getci, encoded="urn:NSConfig")

class getciResponse:
    def __init__(self):
        self._return = None
        return
getciResponse.typecode = Struct(pname=("urn:NSConfig","getciResponse"), ofwhat=[ns0.getciResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getciResponse, encoded="urn:NSConfig")

class clearinterface:
    def __init__(self):
        self._id = None
        return
clearinterface.typecode = Struct(pname=("urn:NSConfig","clearinterface"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearinterface, encoded="urn:NSConfig")

class clearinterfaceResponse:
    def __init__(self):
        self._return = None
        return
clearinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","clearinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearinterfaceResponse, encoded="urn:NSConfig")

class clearroute:
    def __init__(self):
        self._routetype = None
        return
clearroute.typecode = Struct(pname=("urn:NSConfig","clearroute"), ofwhat=[ns0.clearrtoptionsEnum_Def(pname="routetype", aname="_routetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearroute, encoded="urn:NSConfig")

class clearrouteResponse:
    def __init__(self):
        self._return = None
        return
clearrouteResponse.typecode = Struct(pname=("urn:NSConfig","clearrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrouteResponse, encoded="urn:NSConfig")

class clearrnat:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._aclname = None
        self._redirectport = None
        self._natip = None
        return
clearrnat.typecode = Struct(pname=("urn:NSConfig","clearrnat"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="redirectport", aname="_redirectport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="natip", aname="_natip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrnat, encoded="urn:NSConfig")

class clearrnatResponse:
    def __init__(self):
        self._return = None
        return
clearrnatResponse.typecode = Struct(pname=("urn:NSConfig","clearrnatResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrnatResponse, encoded="urn:NSConfig")

class setbridgetable_bridgeage:
    def __init__(self):
        self._bridgeage = None
        return
setbridgetable_bridgeage.typecode = Struct(pname=("urn:NSConfig","setbridgetable_bridgeage"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="bridgeage", aname="_bridgeage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setbridgetable_bridgeage, encoded="urn:NSConfig")

class setbridgetableResponse:
    def __init__(self):
        self._return = None
        return
setbridgetableResponse.typecode = Struct(pname=("urn:NSConfig","setbridgetable_bridgeageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setbridgetableResponse, encoded="urn:NSConfig")

class unsetbridgetable_bridgeage:
    def __init__(self):
        return
unsetbridgetable_bridgeage.typecode = Struct(pname=("urn:NSConfig","unsetbridgetable_bridgeage"), ofwhat=[], pyclass=unsetbridgetable_bridgeage, encoded="urn:NSConfig")

class unsetbridgetableResponse:
    def __init__(self):
        self._return = None
        return
unsetbridgetableResponse.typecode = Struct(pname=("urn:NSConfig","unsetbridgetable_bridgeageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetbridgetableResponse, encoded="urn:NSConfig")

class getbridgetable:
    def __init__(self):
        return
getbridgetable.typecode = Struct(pname=("urn:NSConfig","getbridgetable"), ofwhat=[], pyclass=getbridgetable, encoded="urn:NSConfig")

class getbridgetableResponse:
    def __init__(self):
        self._return = None
        return
getbridgetableResponse.typecode = Struct(pname=("urn:NSConfig","getbridgetableResponse"), ofwhat=[ns0.getbridgetableResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getbridgetableResponse, encoded="urn:NSConfig")

class addchannel:
    def __init__(self):
        self._id = None
        self._ifnum = None
        return
addchannel.typecode = Struct(pname=("urn:NSConfig","addchannel"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addchannel, encoded="urn:NSConfig")

class addchannelResponse:
    def __init__(self):
        self._return = None
        return
addchannelResponse.typecode = Struct(pname=("urn:NSConfig","addchannelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addchannelResponse, encoded="urn:NSConfig")

class rmchannel:
    def __init__(self):
        self._id = None
        return
rmchannel.typecode = Struct(pname=("urn:NSConfig","rmchannel"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmchannel, encoded="urn:NSConfig")

class rmchannelResponse:
    def __init__(self):
        self._return = None
        return
rmchannelResponse.typecode = Struct(pname=("urn:NSConfig","rmchannelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmchannelResponse, encoded="urn:NSConfig")

class setchannel_state:
    def __init__(self):
        self._id = None
        self._state = None
        return
setchannel_state.typecode = Struct(pname=("urn:NSConfig","setchannel_state"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledifEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_state, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_mode:
    def __init__(self):
        self._id = None
        self._mode = None
        return
setchannel_mode.typecode = Struct(pname=("urn:NSConfig","setchannel_mode"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lamodeEnum_Def(pname="mode", aname="_mode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_mode, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_modeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_conndistr:
    def __init__(self):
        self._id = None
        self._conndistr = None
        return
setchannel_conndistr.typecode = Struct(pname=("urn:NSConfig","setchannel_conndistr"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.laconndistrEnum_Def(pname="conndistr", aname="_conndistr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_conndistr, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_conndistrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_macdistr:
    def __init__(self):
        self._id = None
        self._macdistr = None
        return
setchannel_macdistr.typecode = Struct(pname=("urn:NSConfig","setchannel_macdistr"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lamacdistrEnum_Def(pname="macdistr", aname="_macdistr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_macdistr, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_macdistrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_speed:
    def __init__(self):
        self._id = None
        self._speed = None
        return
setchannel_speed.typecode = Struct(pname=("urn:NSConfig","setchannel_speed"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ifspeedEnum_Def(pname="speed", aname="_speed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_speed, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_speedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_flowcontrol:
    def __init__(self):
        self._id = None
        self._flowcontrol = None
        return
setchannel_flowcontrol.typecode = Struct(pname=("urn:NSConfig","setchannel_flowcontrol"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.flowcontrolEnum_Def(pname="flowcontrol", aname="_flowcontrol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_flowcontrol, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_flowcontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_hamonitor:
    def __init__(self):
        self._id = None
        self._hamonitor = None
        return
setchannel_hamonitor.typecode = Struct(pname=("urn:NSConfig","setchannel_hamonitor"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ifmonitortypeEnum_Def(pname="hamonitor", aname="_hamonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_hamonitor, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_hamonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_trunk:
    def __init__(self):
        self._id = None
        self._trunk = None
        return
setchannel_trunk.typecode = Struct(pname=("urn:NSConfig","setchannel_trunk"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.trunktypeEnum_Def(pname="trunk", aname="_trunk", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_trunk, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_trunkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_ifalias:
    def __init__(self):
        self._id = None
        self._ifalias = None
        return
setchannel_ifalias.typecode = Struct(pname=("urn:NSConfig","setchannel_ifalias"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifalias", aname="_ifalias", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_ifalias, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_ifaliasResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class setchannel_throughput:
    def __init__(self):
        self._id = None
        self._throughput = None
        return
setchannel_throughput.typecode = Struct(pname=("urn:NSConfig","setchannel_throughput"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="throughput", aname="_throughput", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannel_throughput, encoded="urn:NSConfig")

class setchannelResponse:
    def __init__(self):
        self._return = None
        return
setchannelResponse.typecode = Struct(pname=("urn:NSConfig","setchannel_throughputResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setchannelResponse, encoded="urn:NSConfig")

class unsetchannel_state:
    def __init__(self):
        self._id = None
        return
unsetchannel_state.typecode = Struct(pname=("urn:NSConfig","unsetchannel_state"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_state, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_mode:
    def __init__(self):
        self._id = None
        return
unsetchannel_mode.typecode = Struct(pname=("urn:NSConfig","unsetchannel_mode"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_mode, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_modeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_conndistr:
    def __init__(self):
        self._id = None
        return
unsetchannel_conndistr.typecode = Struct(pname=("urn:NSConfig","unsetchannel_conndistr"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_conndistr, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_conndistrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_macdistr:
    def __init__(self):
        self._id = None
        return
unsetchannel_macdistr.typecode = Struct(pname=("urn:NSConfig","unsetchannel_macdistr"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_macdistr, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_macdistrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_speed:
    def __init__(self):
        self._id = None
        return
unsetchannel_speed.typecode = Struct(pname=("urn:NSConfig","unsetchannel_speed"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_speed, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_speedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_flowcontrol:
    def __init__(self):
        self._id = None
        return
unsetchannel_flowcontrol.typecode = Struct(pname=("urn:NSConfig","unsetchannel_flowcontrol"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_flowcontrol, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_flowcontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_hamonitor:
    def __init__(self):
        self._id = None
        return
unsetchannel_hamonitor.typecode = Struct(pname=("urn:NSConfig","unsetchannel_hamonitor"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_hamonitor, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_hamonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_trunk:
    def __init__(self):
        self._id = None
        return
unsetchannel_trunk.typecode = Struct(pname=("urn:NSConfig","unsetchannel_trunk"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_trunk, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_trunkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_ifalias:
    def __init__(self):
        self._id = None
        return
unsetchannel_ifalias.typecode = Struct(pname=("urn:NSConfig","unsetchannel_ifalias"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_ifalias, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_ifaliasResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class unsetchannel_throughput:
    def __init__(self):
        self._id = None
        return
unsetchannel_throughput.typecode = Struct(pname=("urn:NSConfig","unsetchannel_throughput"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannel_throughput, encoded="urn:NSConfig")

class unsetchannelResponse:
    def __init__(self):
        self._return = None
        return
unsetchannelResponse.typecode = Struct(pname=("urn:NSConfig","unsetchannel_throughputResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetchannelResponse, encoded="urn:NSConfig")

class bindchannel_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        return
bindchannel_ifnum.typecode = Struct(pname=("urn:NSConfig","bindchannel_ifnum"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindchannel_ifnum, encoded="urn:NSConfig")

class bindchannelResponse:
    def __init__(self):
        self._return = None
        return
bindchannelResponse.typecode = Struct(pname=("urn:NSConfig","bindchannel_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindchannelResponse, encoded="urn:NSConfig")

class unbindchannel_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        return
unbindchannel_ifnum.typecode = Struct(pname=("urn:NSConfig","unbindchannel_ifnum"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindchannel_ifnum, encoded="urn:NSConfig")

class unbindchannelResponse:
    def __init__(self):
        self._return = None
        return
unbindchannelResponse.typecode = Struct(pname=("urn:NSConfig","unbindchannel_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindchannelResponse, encoded="urn:NSConfig")

class getchannel:
    def __init__(self):
        self._id = None
        return
getchannel.typecode = Struct(pname=("urn:NSConfig","getchannel"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getchannel, encoded="urn:NSConfig")

class getchannelResponse:
    def __init__(self):
        self._return = None
        return
getchannelResponse.typecode = Struct(pname=("urn:NSConfig","getchannelResponse"), ofwhat=[ns0.getchannelResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getchannelResponse, encoded="urn:NSConfig")

class addfis:
    def __init__(self):
        self._name = None
        return
addfis.typecode = Struct(pname=("urn:NSConfig","addfis"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfis, encoded="urn:NSConfig")

class addfisResponse:
    def __init__(self):
        self._return = None
        return
addfisResponse.typecode = Struct(pname=("urn:NSConfig","addfisResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addfisResponse, encoded="urn:NSConfig")

class rmfis:
    def __init__(self):
        self._name = None
        return
rmfis.typecode = Struct(pname=("urn:NSConfig","rmfis"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfis, encoded="urn:NSConfig")

class rmfisResponse:
    def __init__(self):
        self._return = None
        return
rmfisResponse.typecode = Struct(pname=("urn:NSConfig","rmfisResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmfisResponse, encoded="urn:NSConfig")

class bindfis_ifnum:
    def __init__(self):
        self._name = None
        self._ifnum = None
        return
bindfis_ifnum.typecode = Struct(pname=("urn:NSConfig","bindfis_ifnum"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindfis_ifnum, encoded="urn:NSConfig")

class bindfisResponse:
    def __init__(self):
        self._return = None
        return
bindfisResponse.typecode = Struct(pname=("urn:NSConfig","bindfis_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindfisResponse, encoded="urn:NSConfig")

class unbindfis_ifnum:
    def __init__(self):
        self._name = None
        self._ifnum = None
        return
unbindfis_ifnum.typecode = Struct(pname=("urn:NSConfig","unbindfis_ifnum"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindfis_ifnum, encoded="urn:NSConfig")

class unbindfisResponse:
    def __init__(self):
        self._return = None
        return
unbindfisResponse.typecode = Struct(pname=("urn:NSConfig","unbindfis_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindfisResponse, encoded="urn:NSConfig")

class getfis:
    def __init__(self):
        self._name = None
        return
getfis.typecode = Struct(pname=("urn:NSConfig","getfis"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfis, encoded="urn:NSConfig")

class getfisResponse:
    def __init__(self):
        self._return = None
        return
getfisResponse.typecode = Struct(pname=("urn:NSConfig","getfisResponse"), ofwhat=[ns0.getfisResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getfisResponse, encoded="urn:NSConfig")

class setinterface_speed:
    def __init__(self):
        self._id = None
        self._speed = None
        return
setinterface_speed.typecode = Struct(pname=("urn:NSConfig","setinterface_speed"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ifspeedEnum_Def(pname="speed", aname="_speed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_speed, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_speedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_duplex:
    def __init__(self):
        self._id = None
        self._duplex = None
        return
setinterface_duplex.typecode = Struct(pname=("urn:NSConfig","setinterface_duplex"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ifduplexEnum_Def(pname="duplex", aname="_duplex", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_duplex, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_duplexResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_flowcontrol:
    def __init__(self):
        self._id = None
        self._flowcontrol = None
        return
setinterface_flowcontrol.typecode = Struct(pname=("urn:NSConfig","setinterface_flowcontrol"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.flowcontrolEnum_Def(pname="flowcontrol", aname="_flowcontrol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_flowcontrol, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_flowcontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_autoneg:
    def __init__(self):
        self._id = None
        self._autoneg = None
        return
setinterface_autoneg.typecode = Struct(pname=("urn:NSConfig","setinterface_autoneg"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.laconndistrEnum_Def(pname="autoneg", aname="_autoneg", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_autoneg, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_autonegResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_hamonitor:
    def __init__(self):
        self._id = None
        self._hamonitor = None
        return
setinterface_hamonitor.typecode = Struct(pname=("urn:NSConfig","setinterface_hamonitor"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ifmonitortypeEnum_Def(pname="hamonitor", aname="_hamonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_hamonitor, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_hamonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_trunk:
    def __init__(self):
        self._id = None
        self._trunk = None
        return
setinterface_trunk.typecode = Struct(pname=("urn:NSConfig","setinterface_trunk"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.trunktypeEnum_Def(pname="trunk", aname="_trunk", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_trunk, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_trunkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_lacpmode:
    def __init__(self):
        self._id = None
        self._lacpmode = None
        return
setinterface_lacpmode.typecode = Struct(pname=("urn:NSConfig","setinterface_lacpmode"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lacpmodeEnum_Def(pname="lacpmode", aname="_lacpmode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_lacpmode, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_lacpmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_lacpkey:
    def __init__(self):
        self._id = None
        self._lacpkey = None
        return
setinterface_lacpkey.typecode = Struct(pname=("urn:NSConfig","setinterface_lacpkey"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="lacpkey", aname="_lacpkey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_lacpkey, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_lacpkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_lacppriority:
    def __init__(self):
        self._id = None
        self._lacppriority = None
        return
setinterface_lacppriority.typecode = Struct(pname=("urn:NSConfig","setinterface_lacppriority"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="lacppriority", aname="_lacppriority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_lacppriority, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_lacppriorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_lacptimeout:
    def __init__(self):
        self._id = None
        self._lacptimeout = None
        return
setinterface_lacptimeout.typecode = Struct(pname=("urn:NSConfig","setinterface_lacptimeout"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.lacptimeoutEnum_Def(pname="lacptimeout", aname="_lacptimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_lacptimeout, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_lacptimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_ifalias:
    def __init__(self):
        self._id = None
        self._ifalias = None
        return
setinterface_ifalias.typecode = Struct(pname=("urn:NSConfig","setinterface_ifalias"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifalias", aname="_ifalias", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_ifalias, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_ifaliasResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class setinterface_throughput:
    def __init__(self):
        self._id = None
        self._throughput = None
        return
setinterface_throughput.typecode = Struct(pname=("urn:NSConfig","setinterface_throughput"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="throughput", aname="_throughput", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterface_throughput, encoded="urn:NSConfig")

class setinterfaceResponse:
    def __init__(self):
        self._return = None
        return
setinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","setinterface_throughputResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_speed:
    def __init__(self):
        self._id = None
        return
unsetinterface_speed.typecode = Struct(pname=("urn:NSConfig","unsetinterface_speed"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_speed, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_speedResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_duplex:
    def __init__(self):
        self._id = None
        return
unsetinterface_duplex.typecode = Struct(pname=("urn:NSConfig","unsetinterface_duplex"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_duplex, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_duplexResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_flowcontrol:
    def __init__(self):
        self._id = None
        return
unsetinterface_flowcontrol.typecode = Struct(pname=("urn:NSConfig","unsetinterface_flowcontrol"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_flowcontrol, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_flowcontrolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_autoneg:
    def __init__(self):
        self._id = None
        return
unsetinterface_autoneg.typecode = Struct(pname=("urn:NSConfig","unsetinterface_autoneg"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_autoneg, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_autonegResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_hamonitor:
    def __init__(self):
        self._id = None
        return
unsetinterface_hamonitor.typecode = Struct(pname=("urn:NSConfig","unsetinterface_hamonitor"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_hamonitor, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_hamonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_trunk:
    def __init__(self):
        self._id = None
        return
unsetinterface_trunk.typecode = Struct(pname=("urn:NSConfig","unsetinterface_trunk"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_trunk, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_trunkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_lacpmode:
    def __init__(self):
        self._id = None
        return
unsetinterface_lacpmode.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacpmode"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_lacpmode, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacpmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_lacpkey:
    def __init__(self):
        self._id = None
        return
unsetinterface_lacpkey.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacpkey"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_lacpkey, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacpkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_lacppriority:
    def __init__(self):
        self._id = None
        return
unsetinterface_lacppriority.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacppriority"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_lacppriority, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacppriorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_lacptimeout:
    def __init__(self):
        self._id = None
        return
unsetinterface_lacptimeout.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacptimeout"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_lacptimeout, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_lacptimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_ifalias:
    def __init__(self):
        self._id = None
        return
unsetinterface_ifalias.typecode = Struct(pname=("urn:NSConfig","unsetinterface_ifalias"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_ifalias, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_ifaliasResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class unsetinterface_throughput:
    def __init__(self):
        self._id = None
        return
unsetinterface_throughput.typecode = Struct(pname=("urn:NSConfig","unsetinterface_throughput"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterface_throughput, encoded="urn:NSConfig")

class unsetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
unsetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","unsetinterface_throughputResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetinterfaceResponse, encoded="urn:NSConfig")

class enableinterface:
    def __init__(self):
        self._id = None
        return
enableinterface.typecode = Struct(pname=("urn:NSConfig","enableinterface"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableinterface, encoded="urn:NSConfig")

class enableinterfaceResponse:
    def __init__(self):
        self._return = None
        return
enableinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","enableinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enableinterfaceResponse, encoded="urn:NSConfig")

class disableinterface:
    def __init__(self):
        self._id = None
        return
disableinterface.typecode = Struct(pname=("urn:NSConfig","disableinterface"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableinterface, encoded="urn:NSConfig")

class disableinterfaceResponse:
    def __init__(self):
        self._return = None
        return
disableinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","disableinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disableinterfaceResponse, encoded="urn:NSConfig")

class resetinterface:
    def __init__(self):
        self._id = None
        return
resetinterface.typecode = Struct(pname=("urn:NSConfig","resetinterface"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resetinterface, encoded="urn:NSConfig")

class resetinterfaceResponse:
    def __init__(self):
        self._return = None
        return
resetinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","resetinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resetinterfaceResponse, encoded="urn:NSConfig")

class getinterface:
    def __init__(self):
        self._id = None
        return
getinterface.typecode = Struct(pname=("urn:NSConfig","getinterface"), ofwhat=[ZSI.TC.String(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getinterface, encoded="urn:NSConfig")

class getinterfaceResponse:
    def __init__(self):
        self._return = None
        return
getinterfaceResponse.typecode = Struct(pname=("urn:NSConfig","getinterfaceResponse"), ofwhat=[ns0.getinterfaceResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getinterfaceResponse, encoded="urn:NSConfig")

class setlacp_syspriority:
    def __init__(self):
        self._syspriority = None
        return
setlacp_syspriority.typecode = Struct(pname=("urn:NSConfig","setlacp_syspriority"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="syspriority", aname="_syspriority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlacp_syspriority, encoded="urn:NSConfig")

class setlacpResponse:
    def __init__(self):
        self._return = None
        return
setlacpResponse.typecode = Struct(pname=("urn:NSConfig","setlacp_syspriorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setlacpResponse, encoded="urn:NSConfig")

class getlacp:
    def __init__(self):
        return
getlacp.typecode = Struct(pname=("urn:NSConfig","getlacp"), ofwhat=[], pyclass=getlacp, encoded="urn:NSConfig")

class getlacpResponse:
    def __init__(self):
        self._return = None
        return
getlacpResponse.typecode = Struct(pname=("urn:NSConfig","getlacpResponse"), ofwhat=[ns0.getlacpResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getlacpResponse, encoded="urn:NSConfig")

class setrnatparam_tcpproxy:
    def __init__(self):
        self._tcpproxy = None
        return
setrnatparam_tcpproxy.typecode = Struct(pname=("urn:NSConfig","setrnatparam_tcpproxy"), ofwhat=[ns0.enabledisabledEnum_Def(pname="tcpproxy", aname="_tcpproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnatparam_tcpproxy, encoded="urn:NSConfig")

class setrnatparamResponse:
    def __init__(self):
        self._return = None
        return
setrnatparamResponse.typecode = Struct(pname=("urn:NSConfig","setrnatparam_tcpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnatparamResponse, encoded="urn:NSConfig")

class unsetrnatparam_tcpproxy:
    def __init__(self):
        return
unsetrnatparam_tcpproxy.typecode = Struct(pname=("urn:NSConfig","unsetrnatparam_tcpproxy"), ofwhat=[], pyclass=unsetrnatparam_tcpproxy, encoded="urn:NSConfig")

class unsetrnatparamResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnatparam_tcpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatparamResponse, encoded="urn:NSConfig")

class getrnatparam:
    def __init__(self):
        return
getrnatparam.typecode = Struct(pname=("urn:NSConfig","getrnatparam"), ofwhat=[], pyclass=getrnatparam, encoded="urn:NSConfig")

class getrnatparamResponse:
    def __init__(self):
        self._return = None
        return
getrnatparamResponse.typecode = Struct(pname=("urn:NSConfig","getrnatparamResponse"), ofwhat=[ns0.getrnatparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrnatparamResponse, encoded="urn:NSConfig")

class addroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._cost = None
        self._advertise = None
        self._protocol = None
        return
addroute.typecode = Struct(pname=("urn:NSConfig","addroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cost", aname="_cost", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.laconndistrEnum_Def(pname="advertise", aname="_advertise", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.rtprotocoloptionsEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addroute, encoded="urn:NSConfig")

class addrouteResponse:
    def __init__(self):
        self._return = None
        return
addrouteResponse.typecode = Struct(pname=("urn:NSConfig","addrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrouteResponse, encoded="urn:NSConfig")

class rmroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        return
rmroute.typecode = Struct(pname=("urn:NSConfig","rmroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmroute, encoded="urn:NSConfig")

class rmrouteResponse:
    def __init__(self):
        self._return = None
        return
rmrouteResponse.typecode = Struct(pname=("urn:NSConfig","rmrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrouteResponse, encoded="urn:NSConfig")

class setroute_distance:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._distance = None
        return
setroute_distance.typecode = Struct(pname=("urn:NSConfig","setroute_distance"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="distance", aname="_distance", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setroute_distance, encoded="urn:NSConfig")

class setrouteResponse:
    def __init__(self):
        self._return = None
        return
setrouteResponse.typecode = Struct(pname=("urn:NSConfig","setroute_distanceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouteResponse, encoded="urn:NSConfig")

class setroute_cost:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._cost = None
        return
setroute_cost.typecode = Struct(pname=("urn:NSConfig","setroute_cost"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cost", aname="_cost", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setroute_cost, encoded="urn:NSConfig")

class setrouteResponse:
    def __init__(self):
        self._return = None
        return
setrouteResponse.typecode = Struct(pname=("urn:NSConfig","setroute_costResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouteResponse, encoded="urn:NSConfig")

class setroute_advertise:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._advertise = None
        return
setroute_advertise.typecode = Struct(pname=("urn:NSConfig","setroute_advertise"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.laconndistrEnum_Def(pname="advertise", aname="_advertise", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setroute_advertise, encoded="urn:NSConfig")

class setrouteResponse:
    def __init__(self):
        self._return = None
        return
setrouteResponse.typecode = Struct(pname=("urn:NSConfig","setroute_advertiseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouteResponse, encoded="urn:NSConfig")

class setroute_protocol:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._protocol = None
        return
setroute_protocol.typecode = Struct(pname=("urn:NSConfig","setroute_protocol"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.rtprotocoloptionsEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setroute_protocol, encoded="urn:NSConfig")

class setrouteResponse:
    def __init__(self):
        self._return = None
        return
setrouteResponse.typecode = Struct(pname=("urn:NSConfig","setroute_protocolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouteResponse, encoded="urn:NSConfig")

class unsetroute_advertise:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        return
unsetroute_advertise.typecode = Struct(pname=("urn:NSConfig","unsetroute_advertise"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetroute_advertise, encoded="urn:NSConfig")

class unsetrouteResponse:
    def __init__(self):
        self._return = None
        return
unsetrouteResponse.typecode = Struct(pname=("urn:NSConfig","unsetroute_advertiseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouteResponse, encoded="urn:NSConfig")

class unsetroute_protocol:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        return
unsetroute_protocol.typecode = Struct(pname=("urn:NSConfig","unsetroute_protocol"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetroute_protocol, encoded="urn:NSConfig")

class unsetrouteResponse:
    def __init__(self):
        self._return = None
        return
unsetrouteResponse.typecode = Struct(pname=("urn:NSConfig","unsetroute_protocolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouteResponse, encoded="urn:NSConfig")

class unsetroute_distance:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        return
unsetroute_distance.typecode = Struct(pname=("urn:NSConfig","unsetroute_distance"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetroute_distance, encoded="urn:NSConfig")

class unsetrouteResponse:
    def __init__(self):
        self._return = None
        return
unsetrouteResponse.typecode = Struct(pname=("urn:NSConfig","unsetroute_distanceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouteResponse, encoded="urn:NSConfig")

class unsetroute_cost:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        return
unsetroute_cost.typecode = Struct(pname=("urn:NSConfig","unsetroute_cost"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetroute_cost, encoded="urn:NSConfig")

class unsetrouteResponse:
    def __init__(self):
        self._return = None
        return
unsetrouteResponse.typecode = Struct(pname=("urn:NSConfig","unsetroute_costResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouteResponse, encoded="urn:NSConfig")

class getroute:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._gateway = None
        self._routetype = None
        self._detail = None
        return
getroute.typecode = Struct(pname=("urn:NSConfig","getroute"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="routetype", aname="_routetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="detail", aname="_detail", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getroute, encoded="urn:NSConfig")

class getrouteResponse:
    def __init__(self):
        self._return = None
        return
getrouteResponse.typecode = Struct(pname=("urn:NSConfig","getrouteResponse"), ofwhat=[ns0.getrouteResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrouteResponse, encoded="urn:NSConfig")

class setrnat_network:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._natip = None
        return
setrnat_network.typecode = Struct(pname=("urn:NSConfig","setrnat_network"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="natip", aname="_natip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnat_network, encoded="urn:NSConfig")

class setrnatResponse:
    def __init__(self):
        self._return = None
        return
setrnatResponse.typecode = Struct(pname=("urn:NSConfig","setrnat_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnatResponse, encoded="urn:NSConfig")

class setrnat_aclname:
    def __init__(self):
        self._aclname = None
        self._redirectport = None
        self._natip2 = None
        return
setrnat_aclname.typecode = Struct(pname=("urn:NSConfig","setrnat_aclname"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="redirectport", aname="_redirectport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="natip2", aname="_natip2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnat_aclname, encoded="urn:NSConfig")

class setrnatResponse:
    def __init__(self):
        self._return = None
        return
setrnatResponse.typecode = Struct(pname=("urn:NSConfig","setrnat_aclnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrnatResponse, encoded="urn:NSConfig")

class unsetrnat_network:
    def __init__(self):
        return
unsetrnat_network.typecode = Struct(pname=("urn:NSConfig","unsetrnat_network"), ofwhat=[], pyclass=unsetrnat_network, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class unsetrnat_netmask:
    def __init__(self):
        return
unsetrnat_netmask.typecode = Struct(pname=("urn:NSConfig","unsetrnat_netmask"), ofwhat=[], pyclass=unsetrnat_netmask, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class unsetrnat_natip:
    def __init__(self):
        return
unsetrnat_natip.typecode = Struct(pname=("urn:NSConfig","unsetrnat_natip"), ofwhat=[], pyclass=unsetrnat_natip, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_natipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class unsetrnat_aclname:
    def __init__(self):
        return
unsetrnat_aclname.typecode = Struct(pname=("urn:NSConfig","unsetrnat_aclname"), ofwhat=[], pyclass=unsetrnat_aclname, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_aclnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class unsetrnat_redirectport:
    def __init__(self):
        return
unsetrnat_redirectport.typecode = Struct(pname=("urn:NSConfig","unsetrnat_redirectport"), ofwhat=[], pyclass=unsetrnat_redirectport, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_redirectportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class unsetrnat_natip2:
    def __init__(self):
        return
unsetrnat_natip2.typecode = Struct(pname=("urn:NSConfig","unsetrnat_natip2"), ofwhat=[], pyclass=unsetrnat_natip2, encoded="urn:NSConfig")

class unsetrnatResponse:
    def __init__(self):
        self._return = None
        return
unsetrnatResponse.typecode = Struct(pname=("urn:NSConfig","unsetrnat_natip2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrnatResponse, encoded="urn:NSConfig")

class getrnat:
    def __init__(self):
        return
getrnat.typecode = Struct(pname=("urn:NSConfig","getrnat"), ofwhat=[], pyclass=getrnat, encoded="urn:NSConfig")

class getrnatResponse:
    def __init__(self):
        self._return = None
        return
getrnatResponse.typecode = Struct(pname=("urn:NSConfig","getrnatResponse"), ofwhat=[ns0.getrnatResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrnatResponse, encoded="urn:NSConfig")

class addvlan:
    def __init__(self):
        self._id = None
        return
addvlan.typecode = Struct(pname=("urn:NSConfig","addvlan"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvlan, encoded="urn:NSConfig")

class addvlanResponse:
    def __init__(self):
        self._return = None
        return
addvlanResponse.typecode = Struct(pname=("urn:NSConfig","addvlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvlanResponse, encoded="urn:NSConfig")

class rmvlan:
    def __init__(self):
        self._id = None
        return
rmvlan.typecode = Struct(pname=("urn:NSConfig","rmvlan"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvlan, encoded="urn:NSConfig")

class rmvlanResponse:
    def __init__(self):
        self._return = None
        return
rmvlanResponse.typecode = Struct(pname=("urn:NSConfig","rmvlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvlanResponse, encoded="urn:NSConfig")

class bindvlan_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        self._tagged = None
        return
bindvlan_ifnum.typecode = Struct(pname=("urn:NSConfig","bindvlan_ifnum"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="tagged", aname="_tagged", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvlan_ifnum, encoded="urn:NSConfig")

class bindvlanResponse:
    def __init__(self):
        self._return = None
        return
bindvlanResponse.typecode = Struct(pname=("urn:NSConfig","bindvlan_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvlanResponse, encoded="urn:NSConfig")

class bindvlan_ipaddress:
    def __init__(self):
        self._id = None
        self._ipaddress = None
        self._netmask = None
        return
bindvlan_ipaddress.typecode = Struct(pname=("urn:NSConfig","bindvlan_ipaddress"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvlan_ipaddress, encoded="urn:NSConfig")

class bindvlanResponse:
    def __init__(self):
        self._return = None
        return
bindvlanResponse.typecode = Struct(pname=("urn:NSConfig","bindvlan_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvlanResponse, encoded="urn:NSConfig")

class unbindvlan_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        self._tagged = None
        return
unbindvlan_ifnum.typecode = Struct(pname=("urn:NSConfig","unbindvlan_ifnum"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="tagged", aname="_tagged", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvlan_ifnum, encoded="urn:NSConfig")

class unbindvlanResponse:
    def __init__(self):
        self._return = None
        return
unbindvlanResponse.typecode = Struct(pname=("urn:NSConfig","unbindvlan_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvlanResponse, encoded="urn:NSConfig")

class unbindvlan_ipaddress:
    def __init__(self):
        self._id = None
        self._ipaddress = None
        self._netmask = None
        return
unbindvlan_ipaddress.typecode = Struct(pname=("urn:NSConfig","unbindvlan_ipaddress"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvlan_ipaddress, encoded="urn:NSConfig")

class unbindvlanResponse:
    def __init__(self):
        self._return = None
        return
unbindvlanResponse.typecode = Struct(pname=("urn:NSConfig","unbindvlan_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvlanResponse, encoded="urn:NSConfig")

class getvlan:
    def __init__(self):
        self._id = None
        return
getvlan.typecode = Struct(pname=("urn:NSConfig","getvlan"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvlan, encoded="urn:NSConfig")

class getvlanResponse:
    def __init__(self):
        self._return = None
        return
getvlanResponse.typecode = Struct(pname=("urn:NSConfig","getvlanResponse"), ofwhat=[ns0.getvlanResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvlanResponse, encoded="urn:NSConfig")

class addvrid:
    def __init__(self):
        self._id = None
        return
addvrid.typecode = Struct(pname=("urn:NSConfig","addvrid"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvrid, encoded="urn:NSConfig")

class addvridResponse:
    def __init__(self):
        self._return = None
        return
addvridResponse.typecode = Struct(pname=("urn:NSConfig","addvridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvridResponse, encoded="urn:NSConfig")

class rmvrid:
    def __init__(self):
        self._id = None
        self._all = None
        return
rmvrid.typecode = Struct(pname=("urn:NSConfig","rmvrid"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvrid, encoded="urn:NSConfig")

class rmvridResponse:
    def __init__(self):
        self._return = None
        return
rmvridResponse.typecode = Struct(pname=("urn:NSConfig","rmvridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvridResponse, encoded="urn:NSConfig")

class bindvrid_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        return
bindvrid_ifnum.typecode = Struct(pname=("urn:NSConfig","bindvrid_ifnum"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvrid_ifnum, encoded="urn:NSConfig")

class bindvridResponse:
    def __init__(self):
        self._return = None
        return
bindvridResponse.typecode = Struct(pname=("urn:NSConfig","bindvrid_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvridResponse, encoded="urn:NSConfig")

class unbindvrid_ifnum:
    def __init__(self):
        self._id = None
        self._ifnum = None
        return
unbindvrid_ifnum.typecode = Struct(pname=("urn:NSConfig","unbindvrid_ifnum"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvrid_ifnum, encoded="urn:NSConfig")

class unbindvridResponse:
    def __init__(self):
        self._return = None
        return
unbindvridResponse.typecode = Struct(pname=("urn:NSConfig","unbindvrid_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvridResponse, encoded="urn:NSConfig")

class getvrid:
    def __init__(self):
        self._id = None
        return
getvrid.typecode = Struct(pname=("urn:NSConfig","getvrid"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvrid, encoded="urn:NSConfig")

class getvridResponse:
    def __init__(self):
        self._return = None
        return
getvridResponse.typecode = Struct(pname=("urn:NSConfig","getvridResponse"), ofwhat=[ns0.getvridResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvridResponse, encoded="urn:NSConfig")

class addroute6:
    def __init__(self):
        self._network = None
        self._gateway = None
        self._vlan = None
        return
addroute6.typecode = Struct(pname=("urn:NSConfig","addroute6"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addroute6, encoded="urn:NSConfig")

class addroute6Response:
    def __init__(self):
        self._return = None
        return
addroute6Response.typecode = Struct(pname=("urn:NSConfig","addroute6Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addroute6Response, encoded="urn:NSConfig")

class rmroute6:
    def __init__(self):
        self._network = None
        self._gateway = None
        self._vlan = None
        return
rmroute6.typecode = Struct(pname=("urn:NSConfig","rmroute6"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmroute6, encoded="urn:NSConfig")

class rmroute6Response:
    def __init__(self):
        self._return = None
        return
rmroute6Response.typecode = Struct(pname=("urn:NSConfig","rmroute6Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmroute6Response, encoded="urn:NSConfig")

class getroute6:
    def __init__(self):
        self._network = None
        self._gateway = None
        self._vlan = None
        return
getroute6.typecode = Struct(pname=("urn:NSConfig","getroute6"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gateway", aname="_gateway", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getroute6, encoded="urn:NSConfig")

class getroute6Response:
    def __init__(self):
        self._return = None
        return
getroute6Response.typecode = Struct(pname=("urn:NSConfig","getroute6Response"), ofwhat=[ns0.getroute6Result_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getroute6Response, encoded="urn:NSConfig")

class getnd6:
    def __init__(self):
        return
getnd6.typecode = Struct(pname=("urn:NSConfig","getnd6"), ofwhat=[], pyclass=getnd6, encoded="urn:NSConfig")

class getnd6Response:
    def __init__(self):
        self._return = None
        return
getnd6Response.typecode = Struct(pname=("urn:NSConfig","getnd6Response"), ofwhat=[ns0.getnd6Result_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnd6Response, encoded="urn:NSConfig")

class setipv6_ralearning:
    def __init__(self):
        self._ralearning = None
        return
setipv6_ralearning.typecode = Struct(pname=("urn:NSConfig","setipv6_ralearning"), ofwhat=[ns0.enabledisabledEnum_Def(pname="ralearning", aname="_ralearning", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setipv6_ralearning, encoded="urn:NSConfig")

class setipv6Response:
    def __init__(self):
        self._return = None
        return
setipv6Response.typecode = Struct(pname=("urn:NSConfig","setipv6_ralearningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setipv6Response, encoded="urn:NSConfig")

class unsetipv6_ralearning:
    def __init__(self):
        return
unsetipv6_ralearning.typecode = Struct(pname=("urn:NSConfig","unsetipv6_ralearning"), ofwhat=[], pyclass=unsetipv6_ralearning, encoded="urn:NSConfig")

class unsetipv6Response:
    def __init__(self):
        self._return = None
        return
unsetipv6Response.typecode = Struct(pname=("urn:NSConfig","unsetipv6_ralearningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetipv6Response, encoded="urn:NSConfig")

class getipv6:
    def __init__(self):
        return
getipv6.typecode = Struct(pname=("urn:NSConfig","getipv6"), ofwhat=[], pyclass=getipv6, encoded="urn:NSConfig")

class getipv6Response:
    def __init__(self):
        self._return = None
        return
getipv6Response.typecode = Struct(pname=("urn:NSConfig","getipv6Response"), ofwhat=[ns0.getipv6Result_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getipv6Response, encoded="urn:NSConfig")

class setiptunnelparam_srcip:
    def __init__(self):
        self._srcip = None
        return
setiptunnelparam_srcip.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_srcip"), ofwhat=[ZSI.TC.String(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparam_srcip, encoded="urn:NSConfig")

class setiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
setiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparamResponse, encoded="urn:NSConfig")

class setiptunnelparam_dropfrag:
    def __init__(self):
        self._dropfrag = None
        return
setiptunnelparam_dropfrag.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_dropfrag"), ofwhat=[ns0.yesnoEnum_Def(pname="dropfrag", aname="_dropfrag", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparam_dropfrag, encoded="urn:NSConfig")

class setiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
setiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_dropfragResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparamResponse, encoded="urn:NSConfig")

class setiptunnelparam_dropfragcputhreshold:
    def __init__(self):
        self._dropfragcputhreshold = None
        return
setiptunnelparam_dropfragcputhreshold.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_dropfragcputhreshold"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="dropfragcputhreshold", aname="_dropfragcputhreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparam_dropfragcputhreshold, encoded="urn:NSConfig")

class setiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
setiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","setiptunnelparam_dropfragcputhresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setiptunnelparamResponse, encoded="urn:NSConfig")

class unsetiptunnelparam_srcip:
    def __init__(self):
        return
unsetiptunnelparam_srcip.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_srcip"), ofwhat=[], pyclass=unsetiptunnelparam_srcip, encoded="urn:NSConfig")

class unsetiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
unsetiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetiptunnelparamResponse, encoded="urn:NSConfig")

class unsetiptunnelparam_dropfrag:
    def __init__(self):
        return
unsetiptunnelparam_dropfrag.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_dropfrag"), ofwhat=[], pyclass=unsetiptunnelparam_dropfrag, encoded="urn:NSConfig")

class unsetiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
unsetiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_dropfragResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetiptunnelparamResponse, encoded="urn:NSConfig")

class unsetiptunnelparam_dropfragcputhreshold:
    def __init__(self):
        return
unsetiptunnelparam_dropfragcputhreshold.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_dropfragcputhreshold"), ofwhat=[], pyclass=unsetiptunnelparam_dropfragcputhreshold, encoded="urn:NSConfig")

class unsetiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
unsetiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetiptunnelparam_dropfragcputhresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetiptunnelparamResponse, encoded="urn:NSConfig")

class getiptunnelparam:
    def __init__(self):
        return
getiptunnelparam.typecode = Struct(pname=("urn:NSConfig","getiptunnelparam"), ofwhat=[], pyclass=getiptunnelparam, encoded="urn:NSConfig")

class getiptunnelparamResponse:
    def __init__(self):
        self._return = None
        return
getiptunnelparamResponse.typecode = Struct(pname=("urn:NSConfig","getiptunnelparamResponse"), ofwhat=[ns0.getiptunnelparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getiptunnelparamResponse, encoded="urn:NSConfig")

class addiptunnel:
    def __init__(self):
        self._name = None
        self._remote = None
        self._remotesubnetmask = None
        self._local = None
        self._protocol = None
        return
addiptunnel.typecode = Struct(pname=("urn:NSConfig","addiptunnel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="remote", aname="_remote", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="remotesubnetmask", aname="_remotesubnetmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="local", aname="_local", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.iptunnelsEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addiptunnel, encoded="urn:NSConfig")

class addiptunnelResponse:
    def __init__(self):
        self._return = None
        return
addiptunnelResponse.typecode = Struct(pname=("urn:NSConfig","addiptunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addiptunnelResponse, encoded="urn:NSConfig")

class rmiptunnel:
    def __init__(self):
        self._name = None
        return
rmiptunnel.typecode = Struct(pname=("urn:NSConfig","rmiptunnel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmiptunnel, encoded="urn:NSConfig")

class rmiptunnelResponse:
    def __init__(self):
        self._return = None
        return
rmiptunnelResponse.typecode = Struct(pname=("urn:NSConfig","rmiptunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmiptunnelResponse, encoded="urn:NSConfig")

class getiptunnel:
    def __init__(self):
        self._remote = None
        self._remotesubnetmask = None
        self._name = None
        return
getiptunnel.typecode = Struct(pname=("urn:NSConfig","getiptunnel"), ofwhat=[ZSI.TC.String(pname="remote", aname="_remote", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="remotesubnetmask", aname="_remotesubnetmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getiptunnel, encoded="urn:NSConfig")

class getiptunnelResponse:
    def __init__(self):
        self._return = None
        return
getiptunnelResponse.typecode = Struct(pname=("urn:NSConfig","getiptunnelResponse"), ofwhat=[ns0.getiptunnelResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getiptunnelResponse, encoded="urn:NSConfig")

class getnsns:
    def __init__(self):
        return
getnsns.typecode = Struct(pname=("urn:NSConfig","getnsns"), ofwhat=[], pyclass=getnsns, encoded="urn:NSConfig")

class getnsnsResponse:
    def __init__(self):
        self._return = None
        return
getnsnsResponse.typecode = Struct(pname=("urn:NSConfig","getnsnsResponse"), ofwhat=[ns0.getnsnsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsnsResponse, encoded="urn:NSConfig")

class renumbernsacls:
    def __init__(self):
        return
renumbernsacls.typecode = Struct(pname=("urn:NSConfig","renumbernsacls"), ofwhat=[], pyclass=renumbernsacls, encoded="urn:NSConfig")

class renumbernsaclsResponse:
    def __init__(self):
        self._return = None
        return
renumbernsaclsResponse.typecode = Struct(pname=("urn:NSConfig","renumbernsaclsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=renumbernsaclsResponse, encoded="urn:NSConfig")

class clearnsacls:
    def __init__(self):
        return
clearnsacls.typecode = Struct(pname=("urn:NSConfig","clearnsacls"), ofwhat=[], pyclass=clearnsacls, encoded="urn:NSConfig")

class clearnsaclsResponse:
    def __init__(self):
        self._return = None
        return
clearnsaclsResponse.typecode = Struct(pname=("urn:NSConfig","clearnsaclsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearnsaclsResponse, encoded="urn:NSConfig")

class clearnssimpleacl:
    def __init__(self):
        return
clearnssimpleacl.typecode = Struct(pname=("urn:NSConfig","clearnssimpleacl"), ofwhat=[], pyclass=clearnssimpleacl, encoded="urn:NSConfig")

class clearnssimpleaclResponse:
    def __init__(self):
        self._return = None
        return
clearnssimpleaclResponse.typecode = Struct(pname=("urn:NSConfig","clearnssimpleaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearnssimpleaclResponse, encoded="urn:NSConfig")

class applynsacls:
    def __init__(self):
        return
applynsacls.typecode = Struct(pname=("urn:NSConfig","applynsacls"), ofwhat=[], pyclass=applynsacls, encoded="urn:NSConfig")

class applynsaclsResponse:
    def __init__(self):
        self._return = None
        return
applynsaclsResponse.typecode = Struct(pname=("urn:NSConfig","applynsaclsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=applynsaclsResponse, encoded="urn:NSConfig")

class getnslicense:
    def __init__(self):
        return
getnslicense.typecode = Struct(pname=("urn:NSConfig","getnslicense"), ofwhat=[], pyclass=getnslicense, encoded="urn:NSConfig")

class getnslicenseResponse:
    def __init__(self):
        self._return = None
        return
getnslicenseResponse.typecode = Struct(pname=("urn:NSConfig","getnslicenseResponse"), ofwhat=[ns0.getnslicenseResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnslicenseResponse, encoded="urn:NSConfig")

class getnsversion:
    def __init__(self):
        return
getnsversion.typecode = Struct(pname=("urn:NSConfig","getnsversion"), ofwhat=[], pyclass=getnsversion, encoded="urn:NSConfig")

class getnsversionResponse:
    def __init__(self):
        self._return = None
        return
getnsversionResponse.typecode = Struct(pname=("urn:NSConfig","getnsversionResponse"), ofwhat=[ns0.getnsversionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsversionResponse, encoded="urn:NSConfig")

class login:
    def __init__(self):
        self._username = None
        self._password = None
        return
login.typecode = Struct(pname=("urn:NSConfig","login"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=login, encoded="urn:NSConfig")

class loginResponse:
    def __init__(self):
        self._return = None
        return
loginResponse.typecode = Struct(pname=("urn:NSConfig","loginResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=loginResponse, encoded="urn:NSConfig")

class loginchallengeresponse:
    def __init__(self):
        self._response = None
        return
loginchallengeresponse.typecode = Struct(pname=("urn:NSConfig","loginchallengeresponse"), ofwhat=[ZSI.TC.String(pname="response", aname="_response", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=loginchallengeresponse, encoded="urn:NSConfig")

class loginchallengeresponseResponse:
    def __init__(self):
        self._return = None
        return
loginchallengeresponseResponse.typecode = Struct(pname=("urn:NSConfig","loginchallengeresponseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=loginchallengeresponseResponse, encoded="urn:NSConfig")

class logout:
    def __init__(self):
        return
logout.typecode = Struct(pname=("urn:NSConfig","logout"), ofwhat=[], pyclass=logout, encoded="urn:NSConfig")

class logoutResponse:
    def __init__(self):
        self._return = None
        return
logoutResponse.typecode = Struct(pname=("urn:NSConfig","logoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=logoutResponse, encoded="urn:NSConfig")

class reboot:
    def __init__(self):
        self._force = None
        return
reboot.typecode = Struct(pname=("urn:NSConfig","reboot"), ofwhat=[ZSI.TC.Boolean(pname="force", aname="_force", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=reboot, encoded="urn:NSConfig")

class rebootResponse:
    def __init__(self):
        self._return = None
        return
rebootResponse.typecode = Struct(pname=("urn:NSConfig","rebootResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rebootResponse, encoded="urn:NSConfig")

class clearnsconfig:
    def __init__(self):
        self._force = None
        self._level = None
        return
clearnsconfig.typecode = Struct(pname=("urn:NSConfig","clearnsconfig"), ofwhat=[ZSI.TC.Boolean(pname="force", aname="_force", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.clearconfiglevelEnum_Def(pname="level", aname="_level", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearnsconfig, encoded="urn:NSConfig")

class clearnsconfigResponse:
    def __init__(self):
        self._return = None
        return
clearnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","clearnsconfigResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearnsconfigResponse, encoded="urn:NSConfig")

class getnsconnectiontable:
    def __init__(self):
        self._filterexpression = None
        self._link = None
        self._name = None
        return
getnsconnectiontable.typecode = Struct(pname=("urn:NSConfig","getnsconnectiontable"), ofwhat=[ZSI.TC.String(pname="filterexpression", aname="_filterexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="link", aname="_link", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsconnectiontable, encoded="urn:NSConfig")

class getnsconnectiontableResponse:
    def __init__(self):
        self._return = None
        return
getnsconnectiontableResponse.typecode = Struct(pname=("urn:NSConfig","getnsconnectiontableResponse"), ofwhat=[ns0.getnsconnectiontableResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsconnectiontableResponse, encoded="urn:NSConfig")

class getnsconnectiontableEx:
    def __init__(self):
        self._filterexpression = None
        self._link = None
        self._name = None
        self._detail = None
        return
getnsconnectiontableEx.typecode = Struct(pname=("urn:NSConfig","getnsconnectiontableEx"), ofwhat=[ZSI.TC.String(pname="filterexpression", aname="_filterexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="link", aname="_link", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="detail", aname="_detail", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsconnectiontableEx, encoded="urn:NSConfig")

class getnsconnectiontableResponse:
    def __init__(self):
        self._return = None
        return
getnsconnectiontableResponse.typecode = Struct(pname=("urn:NSConfig","getnsconnectiontableExResponse"), ofwhat=[ns0.getnsconnectiontableResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsconnectiontableResponse, encoded="urn:NSConfig")

class getnspersistencesession:
    def __init__(self):
        self._name = None
        return
getnspersistencesession.typecode = Struct(pname=("urn:NSConfig","getnspersistencesession"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnspersistencesession, encoded="urn:NSConfig")

class getnspersistencesessionResponse:
    def __init__(self):
        self._return = None
        return
getnspersistencesessionResponse.typecode = Struct(pname=("urn:NSConfig","getnspersistencesessionResponse"), ofwhat=[ns0.getnspersistencesessionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnspersistencesessionResponse, encoded="urn:NSConfig")

class setnsconfig_ipaddress:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        return
setnsconfig_ipaddress.typecode = Struct(pname=("urn:NSConfig","setnsconfig_ipaddress"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_ipaddress, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_nsvlan:
    def __init__(self):
        self._nsvlan = None
        self._ifnum = None
        return
setnsconfig_nsvlan.typecode = Struct(pname=("urn:NSConfig","setnsconfig_nsvlan"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="nsvlan", aname="_nsvlan", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ifnum", aname="_ifnum", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_nsvlan, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_nsvlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_httpport:
    def __init__(self):
        self._httpport = None
        return
setnsconfig_httpport.typecode = Struct(pname=("urn:NSConfig","setnsconfig_httpport"), ofwhat=[ZSI.TC.String(pname="httpport", aname="_httpport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_httpport, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_maxconn:
    def __init__(self):
        self._maxconn = None
        return
setnsconfig_maxconn.typecode = Struct(pname=("urn:NSConfig","setnsconfig_maxconn"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxconn", aname="_maxconn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_maxconn, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_maxconnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_maxreq:
    def __init__(self):
        self._maxreq = None
        return
setnsconfig_maxreq.typecode = Struct(pname=("urn:NSConfig","setnsconfig_maxreq"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_maxreq, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_cip:
    def __init__(self):
        self._cip = None
        self._cipheader = None
        return
setnsconfig_cip.typecode = Struct(pname=("urn:NSConfig","setnsconfig_cip"), ofwhat=[ns0.enabledisabled2Enum_Def(pname="cip", aname="_cip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipheader", aname="_cipheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_cip, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_cookieversion:
    def __init__(self):
        self._cookieversion = None
        return
setnsconfig_cookieversion.typecode = Struct(pname=("urn:NSConfig","setnsconfig_cookieversion"), ofwhat=[ns0.cookieverEnum_Def(pname="cookieversion", aname="_cookieversion", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_cookieversion, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_cookieversionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_pmtumin:
    def __init__(self):
        self._pmtumin = None
        return
setnsconfig_pmtumin.typecode = Struct(pname=("urn:NSConfig","setnsconfig_pmtumin"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="pmtumin", aname="_pmtumin", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_pmtumin, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_pmtuminResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_pmtutimeout:
    def __init__(self):
        self._pmtutimeout = None
        return
setnsconfig_pmtutimeout.typecode = Struct(pname=("urn:NSConfig","setnsconfig_pmtutimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="pmtutimeout", aname="_pmtutimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_pmtutimeout, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_pmtutimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class setnsconfig_ftpportrange:
    def __init__(self):
        self._ftpportrange = None
        return
setnsconfig_ftpportrange.typecode = Struct(pname=("urn:NSConfig","setnsconfig_ftpportrange"), ofwhat=[ZSI.TC.String(pname="ftpportrange", aname="_ftpportrange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfig_ftpportrange, encoded="urn:NSConfig")

class setnsconfigResponse:
    def __init__(self):
        self._return = None
        return
setnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","setnsconfig_ftpportrangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_nsvlan:
    def __init__(self):
        return
unsetnsconfig_nsvlan.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_nsvlan"), ofwhat=[], pyclass=unsetnsconfig_nsvlan, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_nsvlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_ftpportrange:
    def __init__(self):
        return
unsetnsconfig_ftpportrange.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ftpportrange"), ofwhat=[], pyclass=unsetnsconfig_ftpportrange, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ftpportrangeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_ipaddress:
    def __init__(self):
        return
unsetnsconfig_ipaddress.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ipaddress"), ofwhat=[], pyclass=unsetnsconfig_ipaddress, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_netmask:
    def __init__(self):
        return
unsetnsconfig_netmask.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_netmask"), ofwhat=[], pyclass=unsetnsconfig_netmask, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_ifnum:
    def __init__(self):
        return
unsetnsconfig_ifnum.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ifnum"), ofwhat=[], pyclass=unsetnsconfig_ifnum, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_ifnumResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_httpport:
    def __init__(self):
        return
unsetnsconfig_httpport.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_httpport"), ofwhat=[], pyclass=unsetnsconfig_httpport, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_maxconn:
    def __init__(self):
        return
unsetnsconfig_maxconn.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_maxconn"), ofwhat=[], pyclass=unsetnsconfig_maxconn, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_maxconnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_maxreq:
    def __init__(self):
        return
unsetnsconfig_maxreq.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_maxreq"), ofwhat=[], pyclass=unsetnsconfig_maxreq, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_maxreqResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_cip:
    def __init__(self):
        return
unsetnsconfig_cip.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cip"), ofwhat=[], pyclass=unsetnsconfig_cip, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_cipheader:
    def __init__(self):
        return
unsetnsconfig_cipheader.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cipheader"), ofwhat=[], pyclass=unsetnsconfig_cipheader, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cipheaderResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_cookieversion:
    def __init__(self):
        return
unsetnsconfig_cookieversion.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cookieversion"), ofwhat=[], pyclass=unsetnsconfig_cookieversion, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_cookieversionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_pmtumin:
    def __init__(self):
        return
unsetnsconfig_pmtumin.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_pmtumin"), ofwhat=[], pyclass=unsetnsconfig_pmtumin, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_pmtuminResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class unsetnsconfig_pmtutimeout:
    def __init__(self):
        return
unsetnsconfig_pmtutimeout.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_pmtutimeout"), ofwhat=[], pyclass=unsetnsconfig_pmtutimeout, encoded="urn:NSConfig")

class unsetnsconfigResponse:
    def __init__(self):
        self._return = None
        return
unsetnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsconfig_pmtutimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsconfigResponse, encoded="urn:NSConfig")

class savensconfig:
    def __init__(self):
        return
savensconfig.typecode = Struct(pname=("urn:NSConfig","savensconfig"), ofwhat=[], pyclass=savensconfig, encoded="urn:NSConfig")

class savensconfigResponse:
    def __init__(self):
        self._return = None
        return
savensconfigResponse.typecode = Struct(pname=("urn:NSConfig","savensconfigResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=savensconfigResponse, encoded="urn:NSConfig")

class getnsconfig:
    def __init__(self):
        return
getnsconfig.typecode = Struct(pname=("urn:NSConfig","getnsconfig"), ofwhat=[], pyclass=getnsconfig, encoded="urn:NSConfig")

class getnsconfigResponse:
    def __init__(self):
        self._return = None
        return
getnsconfigResponse.typecode = Struct(pname=("urn:NSConfig","getnsconfigResponse"), ofwhat=[ns0.getnsconfigResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsconfigResponse, encoded="urn:NSConfig")

class setnshostname_hostname:
    def __init__(self):
        self._hostname = None
        return
setnshostname_hostname.typecode = Struct(pname=("urn:NSConfig","setnshostname_hostname"), ofwhat=[ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshostname_hostname, encoded="urn:NSConfig")

class setnshostnameResponse:
    def __init__(self):
        self._return = None
        return
setnshostnameResponse.typecode = Struct(pname=("urn:NSConfig","setnshostname_hostnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshostnameResponse, encoded="urn:NSConfig")

class getnshostname:
    def __init__(self):
        return
getnshostname.typecode = Struct(pname=("urn:NSConfig","getnshostname"), ofwhat=[], pyclass=getnshostname, encoded="urn:NSConfig")

class getnshostnameResponse:
    def __init__(self):
        self._return = None
        return
getnshostnameResponse.typecode = Struct(pname=("urn:NSConfig","getnshostnameResponse"), ofwhat=[ns0.getnshostnameResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnshostnameResponse, encoded="urn:NSConfig")

class addnsacl:
    def __init__(self):
        self._aclname = None
        self._aclaction = None
        self._ttl = None
        self._protocol = None
        self._established = None
        self._icmptype = None
        self._icmpcode = None
        return
addnsacl.typecode = Struct(pname=("urn:NSConfig","addnsacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.extaclactionEnum_Def(pname="aclaction", aname="_aclaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.extaclprotoenumEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="established", aname="_established", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="icmptype", aname="_icmptype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="icmpcode", aname="_icmpcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsacl, encoded="urn:NSConfig")

class addnsaclResponse:
    def __init__(self):
        self._return = None
        return
addnsaclResponse.typecode = Struct(pname=("urn:NSConfig","addnsaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsaclResponse, encoded="urn:NSConfig")

class rmnsacl:
    def __init__(self):
        self._aclname = None
        return
rmnsacl.typecode = Struct(pname=("urn:NSConfig","rmnsacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsacl, encoded="urn:NSConfig")

class rmnsaclResponse:
    def __init__(self):
        self._return = None
        return
rmnsaclResponse.typecode = Struct(pname=("urn:NSConfig","rmnsaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsaclResponse, encoded="urn:NSConfig")

class setnsacl_aclaction:
    def __init__(self):
        self._aclname = None
        self._aclaction = None
        return
setnsacl_aclaction.typecode = Struct(pname=("urn:NSConfig","setnsacl_aclaction"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.extaclactionEnum_Def(pname="aclaction", aname="_aclaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_aclaction, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_aclactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_srcip:
    def __init__(self):
        self._aclname = None
        self._srcip = None
        self._operatoR = None
        self._srcipval = None
        return
setnsacl_srcip.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcip"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.xacloperatorEnum_Def(pname="operatoR", aname="_operatoR", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcipval", aname="_srcipval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_srcip, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_srcport:
    def __init__(self):
        self._aclname = None
        self._srcport = None
        self._operatoR2 = None
        self._srcportval = None
        return
setnsacl_srcport.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcport"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="srcport", aname="_srcport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.xacloperatorEnum_Def(pname="operatoR2", aname="_operatoR2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcportval", aname="_srcportval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_srcport, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_destip:
    def __init__(self):
        self._aclname = None
        self._destip = None
        self._operatoR3 = None
        self._destipval = None
        return
setnsacl_destip.typecode = Struct(pname=("urn:NSConfig","setnsacl_destip"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="destip", aname="_destip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.xacloperatorEnum_Def(pname="operatoR3", aname="_operatoR3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destipval", aname="_destipval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_destip, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_destipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_destport:
    def __init__(self):
        self._aclname = None
        self._destport = None
        self._operatoR4 = None
        self._destportval = None
        return
setnsacl_destport.typecode = Struct(pname=("urn:NSConfig","setnsacl_destport"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="destport", aname="_destport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.xacloperatorEnum_Def(pname="operatoR4", aname="_operatoR4", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destportval", aname="_destportval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_destport, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_srcmac:
    def __init__(self):
        self._aclname = None
        self._srcmac = None
        return
setnsacl_srcmac.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcmac"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcmac", aname="_srcmac", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_srcmac, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_srcmacResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_protocol:
    def __init__(self):
        self._aclname = None
        self._protocol = None
        return
setnsacl_protocol.typecode = Struct(pname=("urn:NSConfig","setnsacl_protocol"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.extaclprotoenumEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_protocol, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_protocolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_protocolnumber:
    def __init__(self):
        self._aclname = None
        self._protocolnumber = None
        return
setnsacl_protocolnumber.typecode = Struct(pname=("urn:NSConfig","setnsacl_protocolnumber"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="protocolnumber", aname="_protocolnumber", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_protocolnumber, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_protocolnumberResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_icmptype:
    def __init__(self):
        self._aclname = None
        self._icmptype = None
        self._icmpcode = None
        return
setnsacl_icmptype.typecode = Struct(pname=("urn:NSConfig","setnsacl_icmptype"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="icmptype", aname="_icmptype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="icmpcode", aname="_icmpcode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_icmptype, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_icmptypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_vlan:
    def __init__(self):
        self._aclname = None
        self._vlan = None
        return
setnsacl_vlan.typecode = Struct(pname=("urn:NSConfig","setnsacl_vlan"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_vlan, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_vlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_interface:
    def __init__(self):
        self._aclname = None
        self._interfacE = None
        return
setnsacl_interface.typecode = Struct(pname=("urn:NSConfig","setnsacl_interface"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="interfacE", aname="_interfacE", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_interface, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_interfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_priority:
    def __init__(self):
        self._aclname = None
        self._priority = None
        return
setnsacl_priority.typecode = Struct(pname=("urn:NSConfig","setnsacl_priority"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_priority, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_priorityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class setnsacl_state:
    def __init__(self):
        self._aclname = None
        self._state = None
        return
setnsacl_state.typecode = Struct(pname=("urn:NSConfig","setnsacl_state"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.xaclenabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsacl_state, encoded="urn:NSConfig")

class setnsaclResponse:
    def __init__(self):
        self._return = None
        return
setnsaclResponse.typecode = Struct(pname=("urn:NSConfig","setnsacl_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_srcip:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_srcip.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcip"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_srcip, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_srcport:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_srcport.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcport"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_srcport, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_destip:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_destip.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_destip"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_destip, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_destipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_destport:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_destport.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_destport"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_destport, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_srcmac:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_srcmac.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcmac"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_srcmac, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_srcmacResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_protocol:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_protocol.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_protocol"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_protocol, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_protocolResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_icmptype:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_icmptype.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_icmptype"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_icmptype, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_icmptypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_icmpcode:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_icmpcode.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_icmpcode"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_icmpcode, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_icmpcodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_vlan:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_vlan.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_vlan"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_vlan, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_vlanResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class unsetnsacl_interface:
    def __init__(self):
        self._aclname = None
        return
unsetnsacl_interface.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_interface"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsacl_interface, encoded="urn:NSConfig")

class unsetnsaclResponse:
    def __init__(self):
        self._return = None
        return
unsetnsaclResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsacl_interfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsaclResponse, encoded="urn:NSConfig")

class enablensacl:
    def __init__(self):
        self._aclname = None
        return
enablensacl.typecode = Struct(pname=("urn:NSConfig","enablensacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensacl, encoded="urn:NSConfig")

class enablensaclResponse:
    def __init__(self):
        self._return = None
        return
enablensaclResponse.typecode = Struct(pname=("urn:NSConfig","enablensaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensaclResponse, encoded="urn:NSConfig")

class disablensacl:
    def __init__(self):
        self._aclname = None
        return
disablensacl.typecode = Struct(pname=("urn:NSConfig","disablensacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensacl, encoded="urn:NSConfig")

class disablensaclResponse:
    def __init__(self):
        self._return = None
        return
disablensaclResponse.typecode = Struct(pname=("urn:NSConfig","disablensaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensaclResponse, encoded="urn:NSConfig")

class getnsacl:
    def __init__(self):
        self._aclname = None
        return
getnsacl.typecode = Struct(pname=("urn:NSConfig","getnsacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsacl, encoded="urn:NSConfig")

class getnsaclResponse:
    def __init__(self):
        self._return = None
        return
getnsaclResponse.typecode = Struct(pname=("urn:NSConfig","getnsaclResponse"), ofwhat=[ns0.getnsaclResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsaclResponse, encoded="urn:NSConfig")

class enablensfeature:
    def __init__(self):
        self._feature = None
        return
enablensfeature.typecode = Struct(pname=("urn:NSConfig","enablensfeature"), ofwhat=[ns0.featureEnum_Def(pname="feature", aname="_feature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensfeature, encoded="urn:NSConfig")

class enablensfeatureResponse:
    def __init__(self):
        self._return = None
        return
enablensfeatureResponse.typecode = Struct(pname=("urn:NSConfig","enablensfeatureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensfeatureResponse, encoded="urn:NSConfig")

class disablensfeature:
    def __init__(self):
        self._feature = None
        return
disablensfeature.typecode = Struct(pname=("urn:NSConfig","disablensfeature"), ofwhat=[ns0.featureEnum_Def(pname="feature", aname="_feature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensfeature, encoded="urn:NSConfig")

class disablensfeatureResponse:
    def __init__(self):
        self._return = None
        return
disablensfeatureResponse.typecode = Struct(pname=("urn:NSConfig","disablensfeatureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensfeatureResponse, encoded="urn:NSConfig")

class getnsfeature:
    def __init__(self):
        return
getnsfeature.typecode = Struct(pname=("urn:NSConfig","getnsfeature"), ofwhat=[], pyclass=getnsfeature, encoded="urn:NSConfig")

class getnsfeatureResponse:
    def __init__(self):
        self._return = None
        return
getnsfeatureResponse.typecode = Struct(pname=("urn:NSConfig","getnsfeatureResponse"), ofwhat=[ns0.getnsfeatureResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsfeatureResponse, encoded="urn:NSConfig")

class addnsip6:
    def __init__(self):
        self._ipv6address = None
        self._scope = None
        self._type = None
        self._map = None
        return
addnsip6.typecode = Struct(pname=("urn:NSConfig","addnsip6"), ofwhat=[ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ipv6scopeEnum_Def(pname="scope", aname="_scope", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ipv6typeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="map", aname="_map", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsip6, encoded="urn:NSConfig")

class addnsip6Response:
    def __init__(self):
        self._return = None
        return
addnsip6Response.typecode = Struct(pname=("urn:NSConfig","addnsip6Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsip6Response, encoded="urn:NSConfig")

class rmnsip6:
    def __init__(self):
        self._ipv6address = None
        return
rmnsip6.typecode = Struct(pname=("urn:NSConfig","rmnsip6"), ofwhat=[ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsip6, encoded="urn:NSConfig")

class rmnsip6Response:
    def __init__(self):
        self._return = None
        return
rmnsip6Response.typecode = Struct(pname=("urn:NSConfig","rmnsip6Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsip6Response, encoded="urn:NSConfig")

class setnsip6_map:
    def __init__(self):
        self._ipv6address = None
        self._map = None
        return
setnsip6_map.typecode = Struct(pname=("urn:NSConfig","setnsip6_map"), ofwhat=[ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="map", aname="_map", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip6_map, encoded="urn:NSConfig")

class setnsip6Response:
    def __init__(self):
        self._return = None
        return
setnsip6Response.typecode = Struct(pname=("urn:NSConfig","setnsip6_mapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip6Response, encoded="urn:NSConfig")

class unsetnsip6_map:
    def __init__(self):
        self._ipv6address = None
        return
unsetnsip6_map.typecode = Struct(pname=("urn:NSConfig","unsetnsip6_map"), ofwhat=[ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip6_map, encoded="urn:NSConfig")

class unsetnsip6Response:
    def __init__(self):
        self._return = None
        return
unsetnsip6Response.typecode = Struct(pname=("urn:NSConfig","unsetnsip6_mapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip6Response, encoded="urn:NSConfig")

class getnsip6:
    def __init__(self):
        self._ipv6address = None
        return
getnsip6.typecode = Struct(pname=("urn:NSConfig","getnsip6"), ofwhat=[ZSI.TC.String(pname="ipv6address", aname="_ipv6address", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsip6, encoded="urn:NSConfig")

class getnsip6Response:
    def __init__(self):
        self._return = None
        return
getnsip6Response.typecode = Struct(pname=("urn:NSConfig","getnsip6Response"), ofwhat=[ns0.getnsip6Result_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsip6Response, encoded="urn:NSConfig")

class addnsip:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        self._type = None
        return
addnsip.typecode = Struct(pname=("urn:NSConfig","addnsip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.iptypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsip, encoded="urn:NSConfig")

class addnsipResponse:
    def __init__(self):
        self._return = None
        return
addnsipResponse.typecode = Struct(pname=("urn:NSConfig","addnsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnsipResponse, encoded="urn:NSConfig")

class rmnsip:
    def __init__(self):
        self._ipaddress = None
        return
rmnsip.typecode = Struct(pname=("urn:NSConfig","rmnsip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsip, encoded="urn:NSConfig")

class rmnsipResponse:
    def __init__(self):
        self._return = None
        return
rmnsipResponse.typecode = Struct(pname=("urn:NSConfig","rmnsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnsipResponse, encoded="urn:NSConfig")

class setnsip_netmask:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        return
setnsip_netmask.typecode = Struct(pname=("urn:NSConfig","setnsip_netmask"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_netmask, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_arp:
    def __init__(self):
        self._ipaddress = None
        self._arp = None
        return
setnsip_arp.typecode = Struct(pname=("urn:NSConfig","setnsip_arp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="arp", aname="_arp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_arp, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_arpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_icmp:
    def __init__(self):
        self._ipaddress = None
        self._icmp = None
        return
setnsip_icmp.typecode = Struct(pname=("urn:NSConfig","setnsip_icmp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="icmp", aname="_icmp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_icmp, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_icmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_vserver:
    def __init__(self):
        self._ipaddress = None
        self._vserver = None
        return
setnsip_vserver.typecode = Struct(pname=("urn:NSConfig","setnsip_vserver"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="vserver", aname="_vserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_vserver, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_telnet:
    def __init__(self):
        self._ipaddress = None
        self._telnet = None
        return
setnsip_telnet.typecode = Struct(pname=("urn:NSConfig","setnsip_telnet"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="telnet", aname="_telnet", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_telnet, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_telnetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_ftp:
    def __init__(self):
        self._ipaddress = None
        self._ftp = None
        return
setnsip_ftp.typecode = Struct(pname=("urn:NSConfig","setnsip_ftp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ftp", aname="_ftp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_ftp, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_ftpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_gui:
    def __init__(self):
        self._ipaddress = None
        self._gui = None
        return
setnsip_gui.typecode = Struct(pname=("urn:NSConfig","setnsip_gui"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.accesscmdEnum_Def(pname="gui", aname="_gui", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_gui, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_guiResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_ssh:
    def __init__(self):
        self._ipaddress = None
        self._ssh = None
        return
setnsip_ssh.typecode = Struct(pname=("urn:NSConfig","setnsip_ssh"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssh", aname="_ssh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_ssh, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_sshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_snmp:
    def __init__(self):
        self._ipaddress = None
        self._snmp = None
        return
setnsip_snmp.typecode = Struct(pname=("urn:NSConfig","setnsip_snmp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="snmp", aname="_snmp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_snmp, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_snmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_mgmtaccess:
    def __init__(self):
        self._ipaddress = None
        self._mgmtaccess = None
        return
setnsip_mgmtaccess.typecode = Struct(pname=("urn:NSConfig","setnsip_mgmtaccess"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="mgmtaccess", aname="_mgmtaccess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_mgmtaccess, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_mgmtaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_ospf:
    def __init__(self):
        self._ipaddress = None
        self._ospf = None
        return
setnsip_ospf.typecode = Struct(pname=("urn:NSConfig","setnsip_ospf"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ospf", aname="_ospf", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_ospf, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_ospfResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_bgp:
    def __init__(self):
        self._ipaddress = None
        self._bgp = None
        return
setnsip_bgp.typecode = Struct(pname=("urn:NSConfig","setnsip_bgp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="bgp", aname="_bgp", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_bgp, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_bgpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_rip:
    def __init__(self):
        self._ipaddress = None
        self._rip = None
        return
setnsip_rip.typecode = Struct(pname=("urn:NSConfig","setnsip_rip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="rip", aname="_rip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_rip, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_ripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class setnsip_hostroute:
    def __init__(self):
        self._ipaddress = None
        self._hostroute = None
        self._hostrtgw = None
        self._metric = None
        self._vserverrhilevel = None
        self._ospflsatype = None
        self._ospfarea = None
        return
setnsip_hostroute.typecode = Struct(pname=("urn:NSConfig","setnsip_hostroute"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="hostroute", aname="_hostroute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hostrtgw", aname="_hostrtgw", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="metric", aname="_metric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vserverrhilevelEnum_Def(pname="vserverrhilevel", aname="_vserverrhilevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ospflsatypeEnum_Def(pname="ospflsatype", aname="_ospflsatype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ospfarea", aname="_ospfarea", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsip_hostroute, encoded="urn:NSConfig")

class setnsipResponse:
    def __init__(self):
        self._return = None
        return
setnsipResponse.typecode = Struct(pname=("urn:NSConfig","setnsip_hostrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsipResponse, encoded="urn:NSConfig")

class unsetnsip_netmask:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_netmask.typecode = Struct(pname=("urn:NSConfig","unsetnsip_netmask"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_netmask, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_netmaskResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_arp:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_arp.typecode = Struct(pname=("urn:NSConfig","unsetnsip_arp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_arp, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_arpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_icmp:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_icmp.typecode = Struct(pname=("urn:NSConfig","unsetnsip_icmp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_icmp, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_icmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_vserver:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_vserver.typecode = Struct(pname=("urn:NSConfig","unsetnsip_vserver"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_vserver, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_telnet:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_telnet.typecode = Struct(pname=("urn:NSConfig","unsetnsip_telnet"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_telnet, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_telnetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_ftp:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_ftp.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ftp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_ftp, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ftpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_gui:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_gui.typecode = Struct(pname=("urn:NSConfig","unsetnsip_gui"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_gui, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_guiResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_ssh:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_ssh.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ssh"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_ssh, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_sshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_snmp:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_snmp.typecode = Struct(pname=("urn:NSConfig","unsetnsip_snmp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_snmp, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_snmpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_mgmtaccess:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_mgmtaccess.typecode = Struct(pname=("urn:NSConfig","unsetnsip_mgmtaccess"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_mgmtaccess, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_mgmtaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_ospf:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_ospf.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospf"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_ospf, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospfResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_bgp:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_bgp.typecode = Struct(pname=("urn:NSConfig","unsetnsip_bgp"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_bgp, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_bgpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_rip:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_rip.typecode = Struct(pname=("urn:NSConfig","unsetnsip_rip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_rip, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ripResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_hostroute:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_hostroute.typecode = Struct(pname=("urn:NSConfig","unsetnsip_hostroute"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_hostroute, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_hostrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_hostrtgw:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_hostrtgw.typecode = Struct(pname=("urn:NSConfig","unsetnsip_hostrtgw"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_hostrtgw, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_hostrtgwResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_metric:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_metric.typecode = Struct(pname=("urn:NSConfig","unsetnsip_metric"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_metric, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_metricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_vserverrhilevel:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_vserverrhilevel.typecode = Struct(pname=("urn:NSConfig","unsetnsip_vserverrhilevel"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_vserverrhilevel, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_vserverrhilevelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_ospflsatype:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_ospflsatype.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospflsatype"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_ospflsatype, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospflsatypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class unsetnsip_ospfarea:
    def __init__(self):
        self._ipaddress = None
        return
unsetnsip_ospfarea.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospfarea"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsip_ospfarea, encoded="urn:NSConfig")

class unsetnsipResponse:
    def __init__(self):
        self._return = None
        return
unsetnsipResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsip_ospfareaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsipResponse, encoded="urn:NSConfig")

class enablensip:
    def __init__(self):
        self._ipaddress = None
        return
enablensip.typecode = Struct(pname=("urn:NSConfig","enablensip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensip, encoded="urn:NSConfig")

class enablensipResponse:
    def __init__(self):
        self._return = None
        return
enablensipResponse.typecode = Struct(pname=("urn:NSConfig","enablensipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensipResponse, encoded="urn:NSConfig")

class disablensip:
    def __init__(self):
        self._ipaddress = None
        return
disablensip.typecode = Struct(pname=("urn:NSConfig","disablensip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensip, encoded="urn:NSConfig")

class disablensipResponse:
    def __init__(self):
        self._return = None
        return
disablensipResponse.typecode = Struct(pname=("urn:NSConfig","disablensipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensipResponse, encoded="urn:NSConfig")

class getnsip:
    def __init__(self):
        self._ipaddress = None
        return
getnsip.typecode = Struct(pname=("urn:NSConfig","getnsip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsip, encoded="urn:NSConfig")

class getnsipResponse:
    def __init__(self):
        self._return = None
        return
getnsipResponse.typecode = Struct(pname=("urn:NSConfig","getnsipResponse"), ofwhat=[ns0.getnsipResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsipResponse, encoded="urn:NSConfig")

class enablensmode:
    def __init__(self):
        self._mode = None
        return
enablensmode.typecode = Struct(pname=("urn:NSConfig","enablensmode"), ofwhat=[ns0.modeEnum_Def(pname="mode", aname="_mode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensmode, encoded="urn:NSConfig")

class enablensmodeResponse:
    def __init__(self):
        self._return = None
        return
enablensmodeResponse.typecode = Struct(pname=("urn:NSConfig","enablensmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablensmodeResponse, encoded="urn:NSConfig")

class disablensmode:
    def __init__(self):
        self._mode = None
        return
disablensmode.typecode = Struct(pname=("urn:NSConfig","disablensmode"), ofwhat=[ns0.modeEnum_Def(pname="mode", aname="_mode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensmode, encoded="urn:NSConfig")

class disablensmodeResponse:
    def __init__(self):
        self._return = None
        return
disablensmodeResponse.typecode = Struct(pname=("urn:NSConfig","disablensmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablensmodeResponse, encoded="urn:NSConfig")

class getnsmode:
    def __init__(self):
        return
getnsmode.typecode = Struct(pname=("urn:NSConfig","getnsmode"), ofwhat=[], pyclass=getnsmode, encoded="urn:NSConfig")

class getnsmodeResponse:
    def __init__(self):
        self._return = None
        return
getnsmodeResponse.typecode = Struct(pname=("urn:NSConfig","getnsmodeResponse"), ofwhat=[ns0.getnsmodeResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsmodeResponse, encoded="urn:NSConfig")

class setnsspparams_basethreshold:
    def __init__(self):
        self._basethreshold = None
        return
setnsspparams_basethreshold.typecode = Struct(pname=("urn:NSConfig","setnsspparams_basethreshold"), ofwhat=[ZSI.TCnumbers.Iint(pname="basethreshold", aname="_basethreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsspparams_basethreshold, encoded="urn:NSConfig")

class setnsspparamsResponse:
    def __init__(self):
        self._return = None
        return
setnsspparamsResponse.typecode = Struct(pname=("urn:NSConfig","setnsspparams_basethresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsspparamsResponse, encoded="urn:NSConfig")

class setnsspparams_throttle:
    def __init__(self):
        self._throttle = None
        return
setnsspparams_throttle.typecode = Struct(pname=("urn:NSConfig","setnsspparams_throttle"), ofwhat=[ns0.spthrottleEnum_Def(pname="throttle", aname="_throttle", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsspparams_throttle, encoded="urn:NSConfig")

class setnsspparamsResponse:
    def __init__(self):
        self._return = None
        return
setnsspparamsResponse.typecode = Struct(pname=("urn:NSConfig","setnsspparams_throttleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsspparamsResponse, encoded="urn:NSConfig")

class unsetnsspparams_basethreshold:
    def __init__(self):
        return
unsetnsspparams_basethreshold.typecode = Struct(pname=("urn:NSConfig","unsetnsspparams_basethreshold"), ofwhat=[], pyclass=unsetnsspparams_basethreshold, encoded="urn:NSConfig")

class unsetnsspparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetnsspparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsspparams_basethresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsspparamsResponse, encoded="urn:NSConfig")

class unsetnsspparams_throttle:
    def __init__(self):
        return
unsetnsspparams_throttle.typecode = Struct(pname=("urn:NSConfig","unsetnsspparams_throttle"), ofwhat=[], pyclass=unsetnsspparams_throttle, encoded="urn:NSConfig")

class unsetnsspparamsResponse:
    def __init__(self):
        self._return = None
        return
unsetnsspparamsResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsspparams_throttleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsspparamsResponse, encoded="urn:NSConfig")

class getnsspparams:
    def __init__(self):
        return
getnsspparams.typecode = Struct(pname=("urn:NSConfig","getnsspparams"), ofwhat=[], pyclass=getnsspparams, encoded="urn:NSConfig")

class getnsspparamsResponse:
    def __init__(self):
        self._return = None
        return
getnsspparamsResponse.typecode = Struct(pname=("urn:NSConfig","getnsspparamsResponse"), ofwhat=[ns0.getnsspparamsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsspparamsResponse, encoded="urn:NSConfig")

class setnstcpbufparam_size:
    def __init__(self):
        self._size = None
        return
setnstcpbufparam_size.typecode = Struct(pname=("urn:NSConfig","setnstcpbufparam_size"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpbufparam_size, encoded="urn:NSConfig")

class setnstcpbufparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpbufparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpbufparam_sizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpbufparamResponse, encoded="urn:NSConfig")

class setnstcpbufparam_memlimit:
    def __init__(self):
        self._memlimit = None
        return
setnstcpbufparam_memlimit.typecode = Struct(pname=("urn:NSConfig","setnstcpbufparam_memlimit"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpbufparam_memlimit, encoded="urn:NSConfig")

class setnstcpbufparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpbufparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpbufparam_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpbufparamResponse, encoded="urn:NSConfig")

class unsetnstcpbufparam_size:
    def __init__(self):
        return
unsetnstcpbufparam_size.typecode = Struct(pname=("urn:NSConfig","unsetnstcpbufparam_size"), ofwhat=[], pyclass=unsetnstcpbufparam_size, encoded="urn:NSConfig")

class unsetnstcpbufparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpbufparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpbufparam_sizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpbufparamResponse, encoded="urn:NSConfig")

class unsetnstcpbufparam_memlimit:
    def __init__(self):
        return
unsetnstcpbufparam_memlimit.typecode = Struct(pname=("urn:NSConfig","unsetnstcpbufparam_memlimit"), ofwhat=[], pyclass=unsetnstcpbufparam_memlimit, encoded="urn:NSConfig")

class unsetnstcpbufparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpbufparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpbufparam_memlimitResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpbufparamResponse, encoded="urn:NSConfig")

class getnstcpbufparam:
    def __init__(self):
        return
getnstcpbufparam.typecode = Struct(pname=("urn:NSConfig","getnstcpbufparam"), ofwhat=[], pyclass=getnstcpbufparam, encoded="urn:NSConfig")

class getnstcpbufparamResponse:
    def __init__(self):
        self._return = None
        return
getnstcpbufparamResponse.typecode = Struct(pname=("urn:NSConfig","getnstcpbufparamResponse"), ofwhat=[ns0.getnstcpbufparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnstcpbufparamResponse, encoded="urn:NSConfig")

class setnstcpparam_ws:
    def __init__(self):
        self._ws = None
        return
setnstcpparam_ws.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_ws"), ofwhat=[ns0.enabledisabledEnum_Def(pname="ws", aname="_ws", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_ws, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_wsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_wsval:
    def __init__(self):
        self._wsval = None
        return
setnstcpparam_wsval.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_wsval"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="wsval", aname="_wsval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_wsval, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_wsvalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_sack:
    def __init__(self):
        self._sack = None
        return
setnstcpparam_sack.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_sack"), ofwhat=[ns0.enabledisabledEnum_Def(pname="sack", aname="_sack", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_sack, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_sackResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_maxburst:
    def __init__(self):
        self._maxburst = None
        return
setnstcpparam_maxburst.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_maxburst"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="maxburst", aname="_maxburst", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_maxburst, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_maxburstResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_initialcwnd:
    def __init__(self):
        self._initialcwnd = None
        return
setnstcpparam_initialcwnd.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_initialcwnd"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="initialcwnd", aname="_initialcwnd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_initialcwnd, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_initialcwndResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_recvbuffsize:
    def __init__(self):
        self._recvbuffsize = None
        return
setnstcpparam_recvbuffsize.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_recvbuffsize"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="recvbuffsize", aname="_recvbuffsize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_recvbuffsize, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_recvbuffsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_delayedack:
    def __init__(self):
        self._delayedack = None
        return
setnstcpparam_delayedack.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_delayedack"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="delayedack", aname="_delayedack", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_delayedack, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_delayedackResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class setnstcpparam_downstaterst:
    def __init__(self):
        self._downstaterst = None
        return
setnstcpparam_downstaterst.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_downstaterst"), ofwhat=[ns0.enabledisabledEnum_Def(pname="downstaterst", aname="_downstaterst", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparam_downstaterst, encoded="urn:NSConfig")

class setnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
setnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnstcpparam_downstaterstResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_ws:
    def __init__(self):
        return
unsetnstcpparam_ws.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_ws"), ofwhat=[], pyclass=unsetnstcpparam_ws, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_wsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_wsval:
    def __init__(self):
        return
unsetnstcpparam_wsval.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_wsval"), ofwhat=[], pyclass=unsetnstcpparam_wsval, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_wsvalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_sack:
    def __init__(self):
        return
unsetnstcpparam_sack.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_sack"), ofwhat=[], pyclass=unsetnstcpparam_sack, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_sackResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_maxburst:
    def __init__(self):
        return
unsetnstcpparam_maxburst.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_maxburst"), ofwhat=[], pyclass=unsetnstcpparam_maxburst, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_maxburstResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_initialcwnd:
    def __init__(self):
        return
unsetnstcpparam_initialcwnd.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_initialcwnd"), ofwhat=[], pyclass=unsetnstcpparam_initialcwnd, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_initialcwndResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_recvbuffsize:
    def __init__(self):
        return
unsetnstcpparam_recvbuffsize.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_recvbuffsize"), ofwhat=[], pyclass=unsetnstcpparam_recvbuffsize, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_recvbuffsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_delayedack:
    def __init__(self):
        return
unsetnstcpparam_delayedack.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_delayedack"), ofwhat=[], pyclass=unsetnstcpparam_delayedack, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_delayedackResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class unsetnstcpparam_downstaterst:
    def __init__(self):
        return
unsetnstcpparam_downstaterst.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_downstaterst"), ofwhat=[], pyclass=unsetnstcpparam_downstaterst, encoded="urn:NSConfig")

class unsetnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstcpparam_downstaterstResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstcpparamResponse, encoded="urn:NSConfig")

class getnstcpparam:
    def __init__(self):
        return
getnstcpparam.typecode = Struct(pname=("urn:NSConfig","getnstcpparam"), ofwhat=[], pyclass=getnstcpparam, encoded="urn:NSConfig")

class getnstcpparamResponse:
    def __init__(self):
        self._return = None
        return
getnstcpparamResponse.typecode = Struct(pname=("urn:NSConfig","getnstcpparamResponse"), ofwhat=[ns0.getnstcpparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnstcpparamResponse, encoded="urn:NSConfig")

class setnshttpparam_dropinvalreqs:
    def __init__(self):
        self._dropinvalreqs = None
        return
setnshttpparam_dropinvalreqs.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_dropinvalreqs"), ofwhat=[ns0.onoffEnum_Def(pname="dropinvalreqs", aname="_dropinvalreqs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparam_dropinvalreqs, encoded="urn:NSConfig")

class setnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
setnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_dropinvalreqsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparamResponse, encoded="urn:NSConfig")

class setnshttpparam_markhttp09inval:
    def __init__(self):
        self._markhttp09inval = None
        return
setnshttpparam_markhttp09inval.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_markhttp09inval"), ofwhat=[ns0.onoffEnum_Def(pname="markhttp09inval", aname="_markhttp09inval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparam_markhttp09inval, encoded="urn:NSConfig")

class setnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
setnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_markhttp09invalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparamResponse, encoded="urn:NSConfig")

class setnshttpparam_markconnreqinval:
    def __init__(self):
        self._markconnreqinval = None
        return
setnshttpparam_markconnreqinval.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_markconnreqinval"), ofwhat=[ns0.onoffEnum_Def(pname="markconnreqinval", aname="_markconnreqinval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparam_markconnreqinval, encoded="urn:NSConfig")

class setnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
setnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","setnshttpparam_markconnreqinvalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnshttpparamResponse, encoded="urn:NSConfig")

class unsetnshttpparam_dropinvalreqs:
    def __init__(self):
        return
unsetnshttpparam_dropinvalreqs.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_dropinvalreqs"), ofwhat=[], pyclass=unsetnshttpparam_dropinvalreqs, encoded="urn:NSConfig")

class unsetnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_dropinvalreqsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnshttpparamResponse, encoded="urn:NSConfig")

class unsetnshttpparam_markhttp09inval:
    def __init__(self):
        return
unsetnshttpparam_markhttp09inval.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_markhttp09inval"), ofwhat=[], pyclass=unsetnshttpparam_markhttp09inval, encoded="urn:NSConfig")

class unsetnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_markhttp09invalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnshttpparamResponse, encoded="urn:NSConfig")

class unsetnshttpparam_markconnreqinval:
    def __init__(self):
        return
unsetnshttpparam_markconnreqinval.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_markconnreqinval"), ofwhat=[], pyclass=unsetnshttpparam_markconnreqinval, encoded="urn:NSConfig")

class unsetnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
unsetnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetnshttpparam_markconnreqinvalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnshttpparamResponse, encoded="urn:NSConfig")

class getnshttpparam:
    def __init__(self):
        return
getnshttpparam.typecode = Struct(pname=("urn:NSConfig","getnshttpparam"), ofwhat=[], pyclass=getnshttpparam, encoded="urn:NSConfig")

class getnshttpparamResponse:
    def __init__(self):
        self._return = None
        return
getnshttpparamResponse.typecode = Struct(pname=("urn:NSConfig","getnshttpparamResponse"), ofwhat=[ns0.getnshttpparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnshttpparamResponse, encoded="urn:NSConfig")

class setnsweblogparam_buffersizemb:
    def __init__(self):
        self._buffersizemb = None
        return
setnsweblogparam_buffersizemb.typecode = Struct(pname=("urn:NSConfig","setnsweblogparam_buffersizemb"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="buffersizemb", aname="_buffersizemb", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsweblogparam_buffersizemb, encoded="urn:NSConfig")

class setnsweblogparamResponse:
    def __init__(self):
        self._return = None
        return
setnsweblogparamResponse.typecode = Struct(pname=("urn:NSConfig","setnsweblogparam_buffersizembResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsweblogparamResponse, encoded="urn:NSConfig")

class getnsweblogparam:
    def __init__(self):
        return
getnsweblogparam.typecode = Struct(pname=("urn:NSConfig","getnsweblogparam"), ofwhat=[], pyclass=getnsweblogparam, encoded="urn:NSConfig")

class getnsweblogparamResponse:
    def __init__(self):
        self._return = None
        return
getnsweblogparamResponse.typecode = Struct(pname=("urn:NSConfig","getnsweblogparamResponse"), ofwhat=[ns0.getnsweblogparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsweblogparamResponse, encoded="urn:NSConfig")

class setnsratecontrol_tcpthreshold:
    def __init__(self):
        self._tcpthreshold = None
        return
setnsratecontrol_tcpthreshold.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_tcpthreshold"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="tcpthreshold", aname="_tcpthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrol_tcpthreshold, encoded="urn:NSConfig")

class setnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
setnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_tcpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrolResponse, encoded="urn:NSConfig")

class setnsratecontrol_udpthreshold:
    def __init__(self):
        self._udpthreshold = None
        return
setnsratecontrol_udpthreshold.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_udpthreshold"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="udpthreshold", aname="_udpthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrol_udpthreshold, encoded="urn:NSConfig")

class setnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
setnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_udpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrolResponse, encoded="urn:NSConfig")

class setnsratecontrol_icmpthreshold:
    def __init__(self):
        self._icmpthreshold = None
        return
setnsratecontrol_icmpthreshold.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_icmpthreshold"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="icmpthreshold", aname="_icmpthreshold", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrol_icmpthreshold, encoded="urn:NSConfig")

class setnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
setnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","setnsratecontrol_icmpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsratecontrolResponse, encoded="urn:NSConfig")

class unsetnsratecontrol_tcpthreshold:
    def __init__(self):
        return
unsetnsratecontrol_tcpthreshold.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_tcpthreshold"), ofwhat=[], pyclass=unsetnsratecontrol_tcpthreshold, encoded="urn:NSConfig")

class unsetnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
unsetnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_tcpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsratecontrolResponse, encoded="urn:NSConfig")

class unsetnsratecontrol_udpthreshold:
    def __init__(self):
        return
unsetnsratecontrol_udpthreshold.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_udpthreshold"), ofwhat=[], pyclass=unsetnsratecontrol_udpthreshold, encoded="urn:NSConfig")

class unsetnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
unsetnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_udpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsratecontrolResponse, encoded="urn:NSConfig")

class unsetnsratecontrol_icmpthreshold:
    def __init__(self):
        return
unsetnsratecontrol_icmpthreshold.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_icmpthreshold"), ofwhat=[], pyclass=unsetnsratecontrol_icmpthreshold, encoded="urn:NSConfig")

class unsetnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
unsetnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsratecontrol_icmpthresholdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsratecontrolResponse, encoded="urn:NSConfig")

class getnsratecontrol:
    def __init__(self):
        return
getnsratecontrol.typecode = Struct(pname=("urn:NSConfig","getnsratecontrol"), ofwhat=[], pyclass=getnsratecontrol, encoded="urn:NSConfig")

class getnsratecontrolResponse:
    def __init__(self):
        self._return = None
        return
getnsratecontrolResponse.typecode = Struct(pname=("urn:NSConfig","getnsratecontrolResponse"), ofwhat=[ns0.getnsratecontrolResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsratecontrolResponse, encoded="urn:NSConfig")

class setnsrpcnode_ipaddress:
    def __init__(self):
        self._ipaddress = None
        return
setnsrpcnode_ipaddress.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_ipaddress"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnode_ipaddress, encoded="urn:NSConfig")

class setnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
setnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnodeResponse, encoded="urn:NSConfig")

class setnsrpcnode_password:
    def __init__(self):
        self._ipaddress = None
        self._password = None
        return
setnsrpcnode_password.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_password"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnode_password, encoded="urn:NSConfig")

class setnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
setnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnodeResponse, encoded="urn:NSConfig")

class setnsrpcnode_srcip:
    def __init__(self):
        self._ipaddress = None
        self._srcip = None
        return
setnsrpcnode_srcip.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_srcip"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnode_srcip, encoded="urn:NSConfig")

class setnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
setnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnodeResponse, encoded="urn:NSConfig")

class setnsrpcnode_secure:
    def __init__(self):
        self._ipaddress = None
        self._secure = None
        return
setnsrpcnode_secure.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_secure"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="secure", aname="_secure", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnode_secure, encoded="urn:NSConfig")

class setnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
setnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","setnsrpcnode_secureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsrpcnodeResponse, encoded="urn:NSConfig")

class unsetnsrpcnode_password:
    def __init__(self):
        return
unsetnsrpcnode_password.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_password"), ofwhat=[], pyclass=unsetnsrpcnode_password, encoded="urn:NSConfig")

class unsetnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
unsetnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsrpcnodeResponse, encoded="urn:NSConfig")

class unsetnsrpcnode_srcip:
    def __init__(self):
        return
unsetnsrpcnode_srcip.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_srcip"), ofwhat=[], pyclass=unsetnsrpcnode_srcip, encoded="urn:NSConfig")

class unsetnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
unsetnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsrpcnodeResponse, encoded="urn:NSConfig")

class unsetnsrpcnode_secure:
    def __init__(self):
        return
unsetnsrpcnode_secure.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_secure"), ofwhat=[], pyclass=unsetnsrpcnode_secure, encoded="urn:NSConfig")

class unsetnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
unsetnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsrpcnode_secureResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsrpcnodeResponse, encoded="urn:NSConfig")

class getnsrpcnode:
    def __init__(self):
        return
getnsrpcnode.typecode = Struct(pname=("urn:NSConfig","getnsrpcnode"), ofwhat=[], pyclass=getnsrpcnode, encoded="urn:NSConfig")

class getnsrpcnodeResponse:
    def __init__(self):
        self._return = None
        return
getnsrpcnodeResponse.typecode = Struct(pname=("urn:NSConfig","getnsrpcnodeResponse"), ofwhat=[ns0.getnsrpcnodeResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsrpcnodeResponse, encoded="urn:NSConfig")

class setnsidletimeout_tcpsvr:
    def __init__(self):
        self._tcpsvr = None
        return
setnsidletimeout_tcpsvr.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_tcpsvr"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="tcpsvr", aname="_tcpsvr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeout_tcpsvr, encoded="urn:NSConfig")

class setnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_tcpsvrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeoutResponse, encoded="urn:NSConfig")

class setnsidletimeout_tcpclt:
    def __init__(self):
        self._tcpclt = None
        return
setnsidletimeout_tcpclt.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_tcpclt"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="tcpclt", aname="_tcpclt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeout_tcpclt, encoded="urn:NSConfig")

class setnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_tcpcltResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeoutResponse, encoded="urn:NSConfig")

class setnsidletimeout_nontcpsvrclt:
    def __init__(self):
        self._nontcpsvrclt = None
        return
setnsidletimeout_nontcpsvrclt.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_nontcpsvrclt"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="nontcpsvrclt", aname="_nontcpsvrclt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeout_nontcpsvrclt, encoded="urn:NSConfig")

class setnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnsidletimeout_nontcpsvrcltResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnsidletimeoutResponse, encoded="urn:NSConfig")

class unsetnsidletimeout_tcpsvr:
    def __init__(self):
        return
unsetnsidletimeout_tcpsvr.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_tcpsvr"), ofwhat=[], pyclass=unsetnsidletimeout_tcpsvr, encoded="urn:NSConfig")

class unsetnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_tcpsvrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsidletimeoutResponse, encoded="urn:NSConfig")

class unsetnsidletimeout_tcpclt:
    def __init__(self):
        return
unsetnsidletimeout_tcpclt.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_tcpclt"), ofwhat=[], pyclass=unsetnsidletimeout_tcpclt, encoded="urn:NSConfig")

class unsetnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_tcpcltResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsidletimeoutResponse, encoded="urn:NSConfig")

class unsetnsidletimeout_nontcpsvrclt:
    def __init__(self):
        return
unsetnsidletimeout_nontcpsvrclt.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_nontcpsvrclt"), ofwhat=[], pyclass=unsetnsidletimeout_nontcpsvrclt, encoded="urn:NSConfig")

class unsetnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnsidletimeout_nontcpsvrcltResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnsidletimeoutResponse, encoded="urn:NSConfig")

class getnsidletimeout:
    def __init__(self):
        return
getnsidletimeout.typecode = Struct(pname=("urn:NSConfig","getnsidletimeout"), ofwhat=[], pyclass=getnsidletimeout, encoded="urn:NSConfig")

class getnsidletimeoutResponse:
    def __init__(self):
        self._return = None
        return
getnsidletimeoutResponse.typecode = Struct(pname=("urn:NSConfig","getnsidletimeoutResponse"), ofwhat=[ns0.getnsidletimeoutResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnsidletimeoutResponse, encoded="urn:NSConfig")

class setnstimeout_zombie:
    def __init__(self):
        self._zombie = None
        return
setnstimeout_zombie.typecode = Struct(pname=("urn:NSConfig","setnstimeout_zombie"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="zombie", aname="_zombie", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeout_zombie, encoded="urn:NSConfig")

class setnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnstimeout_zombieResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeoutResponse, encoded="urn:NSConfig")

class setnstimeout_client:
    def __init__(self):
        self._client = None
        return
setnstimeout_client.typecode = Struct(pname=("urn:NSConfig","setnstimeout_client"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="client", aname="_client", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeout_client, encoded="urn:NSConfig")

class setnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnstimeout_clientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeoutResponse, encoded="urn:NSConfig")

class setnstimeout_server:
    def __init__(self):
        self._server = None
        return
setnstimeout_server.typecode = Struct(pname=("urn:NSConfig","setnstimeout_server"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="server", aname="_server", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeout_server, encoded="urn:NSConfig")

class setnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnstimeout_serverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeoutResponse, encoded="urn:NSConfig")

class setnstimeout_halfclose:
    def __init__(self):
        self._halfclose = None
        return
setnstimeout_halfclose.typecode = Struct(pname=("urn:NSConfig","setnstimeout_halfclose"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="halfclose", aname="_halfclose", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeout_halfclose, encoded="urn:NSConfig")

class setnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnstimeout_halfcloseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeoutResponse, encoded="urn:NSConfig")

class setnstimeout_nontcpzombie:
    def __init__(self):
        self._nontcpzombie = None
        return
setnstimeout_nontcpzombie.typecode = Struct(pname=("urn:NSConfig","setnstimeout_nontcpzombie"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="nontcpzombie", aname="_nontcpzombie", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeout_nontcpzombie, encoded="urn:NSConfig")

class setnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
setnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","setnstimeout_nontcpzombieResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setnstimeoutResponse, encoded="urn:NSConfig")

class unsetnstimeout_zombie:
    def __init__(self):
        return
unsetnstimeout_zombie.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_zombie"), ofwhat=[], pyclass=unsetnstimeout_zombie, encoded="urn:NSConfig")

class unsetnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_zombieResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstimeoutResponse, encoded="urn:NSConfig")

class unsetnstimeout_client:
    def __init__(self):
        return
unsetnstimeout_client.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_client"), ofwhat=[], pyclass=unsetnstimeout_client, encoded="urn:NSConfig")

class unsetnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_clientResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstimeoutResponse, encoded="urn:NSConfig")

class unsetnstimeout_server:
    def __init__(self):
        return
unsetnstimeout_server.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_server"), ofwhat=[], pyclass=unsetnstimeout_server, encoded="urn:NSConfig")

class unsetnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_serverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstimeoutResponse, encoded="urn:NSConfig")

class unsetnstimeout_halfclose:
    def __init__(self):
        return
unsetnstimeout_halfclose.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_halfclose"), ofwhat=[], pyclass=unsetnstimeout_halfclose, encoded="urn:NSConfig")

class unsetnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_halfcloseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstimeoutResponse, encoded="urn:NSConfig")

class unsetnstimeout_nontcpzombie:
    def __init__(self):
        return
unsetnstimeout_nontcpzombie.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_nontcpzombie"), ofwhat=[], pyclass=unsetnstimeout_nontcpzombie, encoded="urn:NSConfig")

class unsetnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
unsetnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","unsetnstimeout_nontcpzombieResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetnstimeoutResponse, encoded="urn:NSConfig")

class getnstimeout:
    def __init__(self):
        return
getnstimeout.typecode = Struct(pname=("urn:NSConfig","getnstimeout"), ofwhat=[], pyclass=getnstimeout, encoded="urn:NSConfig")

class getnstimeoutResponse:
    def __init__(self):
        self._return = None
        return
getnstimeoutResponse.typecode = Struct(pname=("urn:NSConfig","getnstimeoutResponse"), ofwhat=[ns0.getnstimeoutResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnstimeoutResponse, encoded="urn:NSConfig")

class addnssimpleacl:
    def __init__(self):
        self._aclname = None
        self._aclaction = None
        self._srcip = None
        self._destport = None
        self._protocol = None
        self._ttl = None
        return
addnssimpleacl.typecode = Struct(pname=("urn:NSConfig","addnssimpleacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.saclactionEnum_Def(pname="aclaction", aname="_aclaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.saclprotoclEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnssimpleacl, encoded="urn:NSConfig")

class addnssimpleaclResponse:
    def __init__(self):
        self._return = None
        return
addnssimpleaclResponse.typecode = Struct(pname=("urn:NSConfig","addnssimpleaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addnssimpleaclResponse, encoded="urn:NSConfig")

class rmnssimpleacl:
    def __init__(self):
        self._aclname = None
        return
rmnssimpleacl.typecode = Struct(pname=("urn:NSConfig","rmnssimpleacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnssimpleacl, encoded="urn:NSConfig")

class rmnssimpleaclResponse:
    def __init__(self):
        self._return = None
        return
rmnssimpleaclResponse.typecode = Struct(pname=("urn:NSConfig","rmnssimpleaclResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmnssimpleaclResponse, encoded="urn:NSConfig")

class getnssimpleacl:
    def __init__(self):
        self._aclname = None
        return
getnssimpleacl.typecode = Struct(pname=("urn:NSConfig","getnssimpleacl"), ofwhat=[ZSI.TC.String(pname="aclname", aname="_aclname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnssimpleacl, encoded="urn:NSConfig")

class getnssimpleaclResponse:
    def __init__(self):
        self._return = None
        return
getnssimpleaclResponse.typecode = Struct(pname=("urn:NSConfig","getnssimpleaclResponse"), ofwhat=[ns0.getnssimpleaclResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getnssimpleaclResponse, encoded="urn:NSConfig")

class addpolicyexpression:
    def __init__(self):
        self._name = None
        self._value = None
        return
addpolicyexpression.typecode = Struct(pname=("urn:NSConfig","addpolicyexpression"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="value", aname="_value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicyexpression, encoded="urn:NSConfig")

class addpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
addpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","addpolicyexpressionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicyexpressionResponse, encoded="urn:NSConfig")

class rmpolicyexpression:
    def __init__(self):
        self._name = None
        return
rmpolicyexpression.typecode = Struct(pname=("urn:NSConfig","rmpolicyexpression"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicyexpression, encoded="urn:NSConfig")

class rmpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
rmpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","rmpolicyexpressionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicyexpressionResponse, encoded="urn:NSConfig")

class setpolicyexpression_value:
    def __init__(self):
        self._name = None
        self._value = None
        return
setpolicyexpression_value.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_value"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="value", aname="_value", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpression_value, encoded="urn:NSConfig")

class setpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
setpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_valueResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpressionResponse, encoded="urn:NSConfig")

class setpolicyexpression_description:
    def __init__(self):
        self._name = None
        self._description = None
        return
setpolicyexpression_description.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_description"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="description", aname="_description", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpression_description, encoded="urn:NSConfig")

class setpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
setpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_descriptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpressionResponse, encoded="urn:NSConfig")

class setpolicyexpression_clientsecuritymessage:
    def __init__(self):
        self._name = None
        self._clientsecuritymessage = None
        return
setpolicyexpression_clientsecuritymessage.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_clientsecuritymessage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpression_clientsecuritymessage, encoded="urn:NSConfig")

class setpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
setpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","setpolicyexpression_clientsecuritymessageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpolicyexpressionResponse, encoded="urn:NSConfig")

class unsetpolicyexpression_description:
    def __init__(self):
        self._name = None
        return
unsetpolicyexpression_description.typecode = Struct(pname=("urn:NSConfig","unsetpolicyexpression_description"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpolicyexpression_description, encoded="urn:NSConfig")

class unsetpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
unsetpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","unsetpolicyexpression_descriptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpolicyexpressionResponse, encoded="urn:NSConfig")

class unsetpolicyexpression_clientsecuritymessage:
    def __init__(self):
        self._name = None
        return
unsetpolicyexpression_clientsecuritymessage.typecode = Struct(pname=("urn:NSConfig","unsetpolicyexpression_clientsecuritymessage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpolicyexpression_clientsecuritymessage, encoded="urn:NSConfig")

class unsetpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
unsetpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","unsetpolicyexpression_clientsecuritymessageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpolicyexpressionResponse, encoded="urn:NSConfig")

class getpolicyexpression:
    def __init__(self):
        self._name = None
        return
getpolicyexpression.typecode = Struct(pname=("urn:NSConfig","getpolicyexpression"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicyexpression, encoded="urn:NSConfig")

class getpolicyexpressionResponse:
    def __init__(self):
        self._return = None
        return
getpolicyexpressionResponse.typecode = Struct(pname=("urn:NSConfig","getpolicyexpressionResponse"), ofwhat=[ns0.getpolicyexpressionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicyexpressionResponse, encoded="urn:NSConfig")

class addpolicymap:
    def __init__(self):
        self._mappolicyname = None
        self._sd = None
        self._su = None
        self._td = None
        self._tu = None
        return
addpolicymap.typecode = Struct(pname=("urn:NSConfig","addpolicymap"), ofwhat=[ZSI.TC.String(pname="mappolicyname", aname="_mappolicyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sd", aname="_sd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="su", aname="_su", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="td", aname="_td", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="tu", aname="_tu", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicymap, encoded="urn:NSConfig")

class addpolicymapResponse:
    def __init__(self):
        self._return = None
        return
addpolicymapResponse.typecode = Struct(pname=("urn:NSConfig","addpolicymapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicymapResponse, encoded="urn:NSConfig")

class rmpolicymap:
    def __init__(self):
        self._mappolicyname = None
        return
rmpolicymap.typecode = Struct(pname=("urn:NSConfig","rmpolicymap"), ofwhat=[ZSI.TC.String(pname="mappolicyname", aname="_mappolicyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicymap, encoded="urn:NSConfig")

class rmpolicymapResponse:
    def __init__(self):
        self._return = None
        return
rmpolicymapResponse.typecode = Struct(pname=("urn:NSConfig","rmpolicymapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicymapResponse, encoded="urn:NSConfig")

class getpolicymap:
    def __init__(self):
        self._mappolicyname = None
        return
getpolicymap.typecode = Struct(pname=("urn:NSConfig","getpolicymap"), ofwhat=[ZSI.TC.String(pname="mappolicyname", aname="_mappolicyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicymap, encoded="urn:NSConfig")

class getpolicymapResponse:
    def __init__(self):
        self._return = None
        return
getpolicymapResponse.typecode = Struct(pname=("urn:NSConfig","getpolicymapResponse"), ofwhat=[ns0.getpolicymapResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicymapResponse, encoded="urn:NSConfig")

class addpolicypatclass:
    def __init__(self):
        self._name = None
        self._strinG = None
        return
addpolicypatclass.typecode = Struct(pname=("urn:NSConfig","addpolicypatclass"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="strinG", aname="_strinG", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicypatclass, encoded="urn:NSConfig")

class addpolicypatclassResponse:
    def __init__(self):
        self._return = None
        return
addpolicypatclassResponse.typecode = Struct(pname=("urn:NSConfig","addpolicypatclassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpolicypatclassResponse, encoded="urn:NSConfig")

class rmpolicypatclass:
    def __init__(self):
        self._name = None
        return
rmpolicypatclass.typecode = Struct(pname=("urn:NSConfig","rmpolicypatclass"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicypatclass, encoded="urn:NSConfig")

class rmpolicypatclassResponse:
    def __init__(self):
        self._return = None
        return
rmpolicypatclassResponse.typecode = Struct(pname=("urn:NSConfig","rmpolicypatclassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpolicypatclassResponse, encoded="urn:NSConfig")

class bindpolicypatclass_string:
    def __init__(self):
        self._name = None
        self._strinG = None
        return
bindpolicypatclass_string.typecode = Struct(pname=("urn:NSConfig","bindpolicypatclass_string"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="strinG", aname="_strinG", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindpolicypatclass_string, encoded="urn:NSConfig")

class bindpolicypatclassResponse:
    def __init__(self):
        self._return = None
        return
bindpolicypatclassResponse.typecode = Struct(pname=("urn:NSConfig","bindpolicypatclass_stringResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindpolicypatclassResponse, encoded="urn:NSConfig")

class unbindpolicypatclass_string:
    def __init__(self):
        self._name = None
        self._strinG = None
        return
unbindpolicypatclass_string.typecode = Struct(pname=("urn:NSConfig","unbindpolicypatclass_string"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="strinG", aname="_strinG", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindpolicypatclass_string, encoded="urn:NSConfig")

class unbindpolicypatclassResponse:
    def __init__(self):
        self._return = None
        return
unbindpolicypatclassResponse.typecode = Struct(pname=("urn:NSConfig","unbindpolicypatclass_stringResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindpolicypatclassResponse, encoded="urn:NSConfig")

class getpolicypatclass:
    def __init__(self):
        self._name = None
        return
getpolicypatclass.typecode = Struct(pname=("urn:NSConfig","getpolicypatclass"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicypatclass, encoded="urn:NSConfig")

class getpolicypatclassResponse:
    def __init__(self):
        self._return = None
        return
getpolicypatclassResponse.typecode = Struct(pname=("urn:NSConfig","getpolicypatclassResponse"), ofwhat=[ns0.getpolicypatclassResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpolicypatclassResponse, encoded="urn:NSConfig")

class getpqbinding:
    def __init__(self):
        self._vservername = None
        return
getpqbinding.typecode = Struct(pname=("urn:NSConfig","getpqbinding"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpqbinding, encoded="urn:NSConfig")

class getpqbindingResponse:
    def __init__(self):
        self._return = None
        return
getpqbindingResponse.typecode = Struct(pname=("urn:NSConfig","getpqbindingResponse"), ofwhat=[ns0.getpqbindingResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpqbindingResponse, encoded="urn:NSConfig")

class addpqpolicy:
    def __init__(self):
        self._policyname = None
        self._rule = None
        self._priority = None
        return
addpqpolicy.typecode = Struct(pname=("urn:NSConfig","addpqpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpqpolicy, encoded="urn:NSConfig")

class addpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
addpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addpqpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addpqpolicyResponse, encoded="urn:NSConfig")

class rmpqpolicy:
    def __init__(self):
        self._policyname = None
        return
rmpqpolicy.typecode = Struct(pname=("urn:NSConfig","rmpqpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpqpolicy, encoded="urn:NSConfig")

class rmpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmpqpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmpqpolicyResponse, encoded="urn:NSConfig")

class setpqpolicy_weight:
    def __init__(self):
        self._policyname = None
        self._weight = None
        return
setpqpolicy_weight.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_weight"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicy_weight, encoded="urn:NSConfig")

class setpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
setpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicyResponse, encoded="urn:NSConfig")

class setpqpolicy_qdepth:
    def __init__(self):
        self._policyname = None
        self._qdepth = None
        return
setpqpolicy_qdepth.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_qdepth"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicy_qdepth, encoded="urn:NSConfig")

class setpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
setpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_qdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicyResponse, encoded="urn:NSConfig")

class setpqpolicy_polqdepth:
    def __init__(self):
        self._policyname = None
        self._polqdepth = None
        return
setpqpolicy_polqdepth.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_polqdepth"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="polqdepth", aname="_polqdepth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicy_polqdepth, encoded="urn:NSConfig")

class setpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
setpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setpqpolicy_polqdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setpqpolicyResponse, encoded="urn:NSConfig")

class unsetpqpolicy_weight:
    def __init__(self):
        self._policyname = None
        return
unsetpqpolicy_weight.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_weight"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicy_weight, encoded="urn:NSConfig")

class unsetpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_weightResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicyResponse, encoded="urn:NSConfig")

class unsetpqpolicy_qdepth:
    def __init__(self):
        self._policyname = None
        return
unsetpqpolicy_qdepth.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_qdepth"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicy_qdepth, encoded="urn:NSConfig")

class unsetpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_qdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicyResponse, encoded="urn:NSConfig")

class unsetpqpolicy_polqdepth:
    def __init__(self):
        self._policyname = None
        return
unsetpqpolicy_polqdepth.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_polqdepth"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicy_polqdepth, encoded="urn:NSConfig")

class unsetpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetpqpolicy_polqdepthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetpqpolicyResponse, encoded="urn:NSConfig")

class getpqpolicy:
    def __init__(self):
        self._policyname = None
        return
getpqpolicy.typecode = Struct(pname=("urn:NSConfig","getpqpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpqpolicy, encoded="urn:NSConfig")

class getpqpolicyResponse:
    def __init__(self):
        self._return = None
        return
getpqpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getpqpolicyResponse"), ofwhat=[ns0.getpqpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getpqpolicyResponse, encoded="urn:NSConfig")

class addresponderpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addresponderpolicy.typecode = Struct(pname=("urn:NSConfig","addresponderpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderpolicy, encoded="urn:NSConfig")

class addresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
addresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addresponderpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderpolicyResponse, encoded="urn:NSConfig")

class rmresponderpolicy:
    def __init__(self):
        self._name = None
        return
rmresponderpolicy.typecode = Struct(pname=("urn:NSConfig","rmresponderpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderpolicy, encoded="urn:NSConfig")

class rmresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmresponderpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderpolicyResponse, encoded="urn:NSConfig")

class setresponderpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setresponderpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicy_rule, encoded="urn:NSConfig")

class setresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
setresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicyResponse, encoded="urn:NSConfig")

class setresponderpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setresponderpolicy_action.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicy_action, encoded="urn:NSConfig")

class setresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
setresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicyResponse, encoded="urn:NSConfig")

class setresponderpolicy_undefaction:
    def __init__(self):
        self._name = None
        self._undefaction = None
        return
setresponderpolicy_undefaction.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_undefaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="undefaction", aname="_undefaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicy_undefaction, encoded="urn:NSConfig")

class setresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
setresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setresponderpolicy_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderpolicyResponse, encoded="urn:NSConfig")

class unsetresponderpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetresponderpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicy_rule, encoded="urn:NSConfig")

class unsetresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicyResponse, encoded="urn:NSConfig")

class unsetresponderpolicy_action:
    def __init__(self):
        self._name = None
        return
unsetresponderpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicy_action, encoded="urn:NSConfig")

class unsetresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicyResponse, encoded="urn:NSConfig")

class unsetresponderpolicy_undefaction:
    def __init__(self):
        self._name = None
        return
unsetresponderpolicy_undefaction.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_undefaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicy_undefaction, encoded="urn:NSConfig")

class unsetresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetresponderpolicy_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderpolicyResponse, encoded="urn:NSConfig")

class getresponderpolicy:
    def __init__(self):
        self._name = None
        return
getresponderpolicy.typecode = Struct(pname=("urn:NSConfig","getresponderpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderpolicy, encoded="urn:NSConfig")

class getresponderpolicyResponse:
    def __init__(self):
        self._return = None
        return
getresponderpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getresponderpolicyResponse"), ofwhat=[ns0.getresponderpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderpolicyResponse, encoded="urn:NSConfig")

class addresponderaction:
    def __init__(self):
        self._name = None
        self._type = None
        self._target = None
        self._bypasssafetycheck = None
        return
addresponderaction.typecode = Struct(pname=("urn:NSConfig","addresponderaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actionrespondertypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="bypasssafetycheck", aname="_bypasssafetycheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderaction, encoded="urn:NSConfig")

class addresponderactionResponse:
    def __init__(self):
        self._return = None
        return
addresponderactionResponse.typecode = Struct(pname=("urn:NSConfig","addresponderactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderactionResponse, encoded="urn:NSConfig")

class rmresponderaction:
    def __init__(self):
        self._name = None
        return
rmresponderaction.typecode = Struct(pname=("urn:NSConfig","rmresponderaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderaction, encoded="urn:NSConfig")

class rmresponderactionResponse:
    def __init__(self):
        self._return = None
        return
rmresponderactionResponse.typecode = Struct(pname=("urn:NSConfig","rmresponderactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderactionResponse, encoded="urn:NSConfig")

class setresponderaction_target:
    def __init__(self):
        self._name = None
        self._target = None
        self._bypasssafetycheck = None
        return
setresponderaction_target.typecode = Struct(pname=("urn:NSConfig","setresponderaction_target"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="bypasssafetycheck", aname="_bypasssafetycheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderaction_target, encoded="urn:NSConfig")

class setresponderactionResponse:
    def __init__(self):
        self._return = None
        return
setresponderactionResponse.typecode = Struct(pname=("urn:NSConfig","setresponderaction_targetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderactionResponse, encoded="urn:NSConfig")

class getresponderaction:
    def __init__(self):
        self._name = None
        return
getresponderaction.typecode = Struct(pname=("urn:NSConfig","getresponderaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderaction, encoded="urn:NSConfig")

class getresponderactionResponse:
    def __init__(self):
        self._return = None
        return
getresponderactionResponse.typecode = Struct(pname=("urn:NSConfig","getresponderactionResponse"), ofwhat=[ns0.getresponderactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderactionResponse, encoded="urn:NSConfig")

class bindresponderglobal_policyname:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._type = None
        self._invoke = None
        self._labeltype = None
        self._labelname = None
        return
bindresponderglobal_policyname.typecode = Struct(pname=("urn:NSConfig","bindresponderglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.responderglobalbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelresponderinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindresponderglobal_policyname, encoded="urn:NSConfig")

class bindresponderglobalResponse:
    def __init__(self):
        self._return = None
        return
bindresponderglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindresponderglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindresponderglobalResponse, encoded="urn:NSConfig")

class unbindresponderglobal_policyname:
    def __init__(self):
        self._policyname = None
        self._type = None
        return
unbindresponderglobal_policyname.typecode = Struct(pname=("urn:NSConfig","unbindresponderglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.responderglobalbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindresponderglobal_policyname, encoded="urn:NSConfig")

class unbindresponderglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindresponderglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindresponderglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindresponderglobalResponse, encoded="urn:NSConfig")

class getresponderglobal:
    def __init__(self):
        self._type = None
        return
getresponderglobal.typecode = Struct(pname=("urn:NSConfig","getresponderglobal"), ofwhat=[ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderglobal, encoded="urn:NSConfig")

class getresponderglobalResponse:
    def __init__(self):
        self._return = None
        return
getresponderglobalResponse.typecode = Struct(pname=("urn:NSConfig","getresponderglobalResponse"), ofwhat=[ns0.getresponderglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderglobalResponse, encoded="urn:NSConfig")

class setresponderparam_undefaction:
    def __init__(self):
        self._undefaction = None
        return
setresponderparam_undefaction.typecode = Struct(pname=("urn:NSConfig","setresponderparam_undefaction"), ofwhat=[ZSI.TC.String(pname="undefaction", aname="_undefaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderparam_undefaction, encoded="urn:NSConfig")

class setresponderparamResponse:
    def __init__(self):
        self._return = None
        return
setresponderparamResponse.typecode = Struct(pname=("urn:NSConfig","setresponderparam_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setresponderparamResponse, encoded="urn:NSConfig")

class unsetresponderparam_undefaction:
    def __init__(self):
        return
unsetresponderparam_undefaction.typecode = Struct(pname=("urn:NSConfig","unsetresponderparam_undefaction"), ofwhat=[], pyclass=unsetresponderparam_undefaction, encoded="urn:NSConfig")

class unsetresponderparamResponse:
    def __init__(self):
        self._return = None
        return
unsetresponderparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetresponderparam_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetresponderparamResponse, encoded="urn:NSConfig")

class getresponderparam:
    def __init__(self):
        return
getresponderparam.typecode = Struct(pname=("urn:NSConfig","getresponderparam"), ofwhat=[], pyclass=getresponderparam, encoded="urn:NSConfig")

class getresponderparamResponse:
    def __init__(self):
        self._return = None
        return
getresponderparamResponse.typecode = Struct(pname=("urn:NSConfig","getresponderparamResponse"), ofwhat=[ns0.getresponderparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderparamResponse, encoded="urn:NSConfig")

class addresponderpolicylabel:
    def __init__(self):
        self._labelname = None
        return
addresponderpolicylabel.typecode = Struct(pname=("urn:NSConfig","addresponderpolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderpolicylabel, encoded="urn:NSConfig")

class addresponderpolicylabelResponse:
    def __init__(self):
        self._return = None
        return
addresponderpolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","addresponderpolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addresponderpolicylabelResponse, encoded="urn:NSConfig")

class rmresponderpolicylabel:
    def __init__(self):
        self._labelname = None
        return
rmresponderpolicylabel.typecode = Struct(pname=("urn:NSConfig","rmresponderpolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderpolicylabel, encoded="urn:NSConfig")

class rmresponderpolicylabelResponse:
    def __init__(self):
        self._return = None
        return
rmresponderpolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","rmresponderpolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmresponderpolicylabelResponse, encoded="urn:NSConfig")

class bindresponderpolicylabel_policy:
    def __init__(self):
        self._labelname = None
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._invoke = None
        self._labeltype = None
        self._labelname2 = None
        return
bindresponderpolicylabel_policy.typecode = Struct(pname=("urn:NSConfig","bindresponderpolicylabel_policy"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelresponderinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname2", aname="_labelname2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindresponderpolicylabel_policy, encoded="urn:NSConfig")

class bindresponderpolicylabelResponse:
    def __init__(self):
        self._return = None
        return
bindresponderpolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","bindresponderpolicylabel_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindresponderpolicylabelResponse, encoded="urn:NSConfig")

class unbindresponderpolicylabel_policy:
    def __init__(self):
        self._labelname = None
        self._policyname = None
        return
unbindresponderpolicylabel_policy.typecode = Struct(pname=("urn:NSConfig","unbindresponderpolicylabel_policy"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindresponderpolicylabel_policy, encoded="urn:NSConfig")

class unbindresponderpolicylabelResponse:
    def __init__(self):
        self._return = None
        return
unbindresponderpolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","unbindresponderpolicylabel_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindresponderpolicylabelResponse, encoded="urn:NSConfig")

class getresponderpolicylabel:
    def __init__(self):
        self._labelname = None
        return
getresponderpolicylabel.typecode = Struct(pname=("urn:NSConfig","getresponderpolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderpolicylabel, encoded="urn:NSConfig")

class getresponderpolicylabelResponse:
    def __init__(self):
        self._return = None
        return
getresponderpolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","getresponderpolicylabelResponse"), ofwhat=[ns0.getresponderpolicylabelResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getresponderpolicylabelResponse, encoded="urn:NSConfig")

class addrewritepolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        self._undefaction = None
        return
addrewritepolicy.typecode = Struct(pname=("urn:NSConfig","addrewritepolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="undefaction", aname="_undefaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewritepolicy, encoded="urn:NSConfig")

class addrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
addrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","addrewritepolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewritepolicyResponse, encoded="urn:NSConfig")

class rmrewritepolicy:
    def __init__(self):
        self._name = None
        return
rmrewritepolicy.typecode = Struct(pname=("urn:NSConfig","rmrewritepolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewritepolicy, encoded="urn:NSConfig")

class rmrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
rmrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmrewritepolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewritepolicyResponse, encoded="urn:NSConfig")

class setrewritepolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setrewritepolicy_rule.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicy_rule, encoded="urn:NSConfig")

class setrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
setrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicyResponse, encoded="urn:NSConfig")

class setrewritepolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setrewritepolicy_action.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicy_action, encoded="urn:NSConfig")

class setrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
setrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicyResponse, encoded="urn:NSConfig")

class setrewritepolicy_undefaction:
    def __init__(self):
        self._name = None
        self._undefaction = None
        return
setrewritepolicy_undefaction.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_undefaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="undefaction", aname="_undefaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicy_undefaction, encoded="urn:NSConfig")

class setrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
setrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","setrewritepolicy_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewritepolicyResponse, encoded="urn:NSConfig")

class unsetrewritepolicy_undefaction:
    def __init__(self):
        self._name = None
        return
unsetrewritepolicy_undefaction.typecode = Struct(pname=("urn:NSConfig","unsetrewritepolicy_undefaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrewritepolicy_undefaction, encoded="urn:NSConfig")

class unsetrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetrewritepolicy_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrewritepolicyResponse, encoded="urn:NSConfig")

class getrewritepolicy:
    def __init__(self):
        self._name = None
        return
getrewritepolicy.typecode = Struct(pname=("urn:NSConfig","getrewritepolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewritepolicy, encoded="urn:NSConfig")

class getrewritepolicyResponse:
    def __init__(self):
        self._return = None
        return
getrewritepolicyResponse.typecode = Struct(pname=("urn:NSConfig","getrewritepolicyResponse"), ofwhat=[ns0.getrewritepolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewritepolicyResponse, encoded="urn:NSConfig")

class addrewriteaction:
    def __init__(self):
        self._name = None
        self._type = None
        self._target = None
        self._stringbuilderexpr = None
        self._bypasssafetycheck = None
        return
addrewriteaction.typecode = Struct(pname=("urn:NSConfig","addrewriteaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actionrewritetypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="stringbuilderexpr", aname="_stringbuilderexpr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="bypasssafetycheck", aname="_bypasssafetycheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewriteaction, encoded="urn:NSConfig")

class addrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
addrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","addrewriteactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewriteactionResponse, encoded="urn:NSConfig")

class rmrewriteaction:
    def __init__(self):
        self._name = None
        return
rmrewriteaction.typecode = Struct(pname=("urn:NSConfig","rmrewriteaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewriteaction, encoded="urn:NSConfig")

class rmrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
rmrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","rmrewriteactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewriteactionResponse, encoded="urn:NSConfig")

class setrewriteaction_target:
    def __init__(self):
        self._name = None
        self._target = None
        return
setrewriteaction_target.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_target"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="target", aname="_target", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteaction_target, encoded="urn:NSConfig")

class setrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
setrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_targetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteactionResponse, encoded="urn:NSConfig")

class setrewriteaction_stringbuilderexpr:
    def __init__(self):
        self._name = None
        self._stringbuilderexpr = None
        self._bypasssafetycheck = None
        return
setrewriteaction_stringbuilderexpr.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_stringbuilderexpr"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="stringbuilderexpr", aname="_stringbuilderexpr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="bypasssafetycheck", aname="_bypasssafetycheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteaction_stringbuilderexpr, encoded="urn:NSConfig")

class setrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
setrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_stringbuilderexprResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteactionResponse, encoded="urn:NSConfig")

class setrewriteaction_pattern:
    def __init__(self):
        self._name = None
        self._pattern = None
        return
setrewriteaction_pattern.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_pattern"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="pattern", aname="_pattern", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteaction_pattern, encoded="urn:NSConfig")

class setrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
setrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","setrewriteaction_patternResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteactionResponse, encoded="urn:NSConfig")

class getrewriteaction:
    def __init__(self):
        self._name = None
        return
getrewriteaction.typecode = Struct(pname=("urn:NSConfig","getrewriteaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewriteaction, encoded="urn:NSConfig")

class getrewriteactionResponse:
    def __init__(self):
        self._return = None
        return
getrewriteactionResponse.typecode = Struct(pname=("urn:NSConfig","getrewriteactionResponse"), ofwhat=[ns0.getrewriteactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewriteactionResponse, encoded="urn:NSConfig")

class bindrewriteglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._type = None
        self._invoke = None
        self._labeltype = None
        self._labelname = None
        return
bindrewriteglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindrewriteglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.rwglobalbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindrewriteglobal_policy, encoded="urn:NSConfig")

class bindrewriteglobalResponse:
    def __init__(self):
        self._return = None
        return
bindrewriteglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindrewriteglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindrewriteglobalResponse, encoded="urn:NSConfig")

class unbindrewriteglobal_policy:
    def __init__(self):
        self._policyname = None
        self._type = None
        return
unbindrewriteglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindrewriteglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.rwglobalbindpointEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindrewriteglobal_policy, encoded="urn:NSConfig")

class unbindrewriteglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindrewriteglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindrewriteglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindrewriteglobalResponse, encoded="urn:NSConfig")

class getrewriteglobal:
    def __init__(self):
        self._type = None
        return
getrewriteglobal.typecode = Struct(pname=("urn:NSConfig","getrewriteglobal"), ofwhat=[ZSI.TC.String(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewriteglobal, encoded="urn:NSConfig")

class getrewriteglobalResponse:
    def __init__(self):
        self._return = None
        return
getrewriteglobalResponse.typecode = Struct(pname=("urn:NSConfig","getrewriteglobalResponse"), ofwhat=[ns0.getrewriteglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewriteglobalResponse, encoded="urn:NSConfig")

class setrewriteparam_undefaction:
    def __init__(self):
        self._undefaction = None
        return
setrewriteparam_undefaction.typecode = Struct(pname=("urn:NSConfig","setrewriteparam_undefaction"), ofwhat=[ZSI.TC.String(pname="undefaction", aname="_undefaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteparam_undefaction, encoded="urn:NSConfig")

class setrewriteparamResponse:
    def __init__(self):
        self._return = None
        return
setrewriteparamResponse.typecode = Struct(pname=("urn:NSConfig","setrewriteparam_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrewriteparamResponse, encoded="urn:NSConfig")

class unsetrewriteparam_undefaction:
    def __init__(self):
        return
unsetrewriteparam_undefaction.typecode = Struct(pname=("urn:NSConfig","unsetrewriteparam_undefaction"), ofwhat=[], pyclass=unsetrewriteparam_undefaction, encoded="urn:NSConfig")

class unsetrewriteparamResponse:
    def __init__(self):
        self._return = None
        return
unsetrewriteparamResponse.typecode = Struct(pname=("urn:NSConfig","unsetrewriteparam_undefactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrewriteparamResponse, encoded="urn:NSConfig")

class getrewriteparam:
    def __init__(self):
        return
getrewriteparam.typecode = Struct(pname=("urn:NSConfig","getrewriteparam"), ofwhat=[], pyclass=getrewriteparam, encoded="urn:NSConfig")

class getrewriteparamResponse:
    def __init__(self):
        self._return = None
        return
getrewriteparamResponse.typecode = Struct(pname=("urn:NSConfig","getrewriteparamResponse"), ofwhat=[ns0.getrewriteparamResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewriteparamResponse, encoded="urn:NSConfig")

class addrewritepolicylabel:
    def __init__(self):
        self._labelname = None
        self._transform = None
        return
addrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","addrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabeltransformEnum_Def(pname="transform", aname="_transform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewritepolicylabel, encoded="urn:NSConfig")

class addrewritepolicylabelResponse:
    def __init__(self):
        self._return = None
        return
addrewritepolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","addrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrewritepolicylabelResponse, encoded="urn:NSConfig")

class rmrewritepolicylabel:
    def __init__(self):
        self._labelname = None
        return
rmrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","rmrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewritepolicylabel, encoded="urn:NSConfig")

class rmrewritepolicylabelResponse:
    def __init__(self):
        self._return = None
        return
rmrewritepolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","rmrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrewritepolicylabelResponse, encoded="urn:NSConfig")

class bindrewritepolicylabel_policy:
    def __init__(self):
        self._labelname = None
        self._policyname = None
        self._priority = None
        self._gotopriorityexpression = None
        self._invoke = None
        self._labeltype = None
        self._labelname2 = None
        return
bindrewritepolicylabel_policy.typecode = Struct(pname=("urn:NSConfig","bindrewritepolicylabel_policy"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="invoke", aname="_invoke", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.policylabelinvoketypeEnum_Def(pname="labeltype", aname="_labeltype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="labelname2", aname="_labelname2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindrewritepolicylabel_policy, encoded="urn:NSConfig")

class bindrewritepolicylabelResponse:
    def __init__(self):
        self._return = None
        return
bindrewritepolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","bindrewritepolicylabel_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindrewritepolicylabelResponse, encoded="urn:NSConfig")

class unbindrewritepolicylabel_policy:
    def __init__(self):
        self._labelname = None
        self._policyname = None
        return
unbindrewritepolicylabel_policy.typecode = Struct(pname=("urn:NSConfig","unbindrewritepolicylabel_policy"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindrewritepolicylabel_policy, encoded="urn:NSConfig")

class unbindrewritepolicylabelResponse:
    def __init__(self):
        self._return = None
        return
unbindrewritepolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","unbindrewritepolicylabel_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindrewritepolicylabelResponse, encoded="urn:NSConfig")

class getrewritepolicylabel:
    def __init__(self):
        self._labelname = None
        return
getrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","getrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="labelname", aname="_labelname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewritepolicylabel, encoded="urn:NSConfig")

class getrewritepolicylabelResponse:
    def __init__(self):
        self._return = None
        return
getrewritepolicylabelResponse.typecode = Struct(pname=("urn:NSConfig","getrewritepolicylabelResponse"), ofwhat=[ns0.getrewritepolicylabelResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrewritepolicylabelResponse, encoded="urn:NSConfig")

class clearrouterbgp:
    def __init__(self):
        self._neighbor = None
        self._all = None
        return
clearrouterbgp.typecode = Struct(pname=("urn:NSConfig","clearrouterbgp"), ofwhat=[ZSI.TC.String(pname="neighbor", aname="_neighbor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrouterbgp, encoded="urn:NSConfig")

class clearrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
clearrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","clearrouterbgpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrouterbgpResponse, encoded="urn:NSConfig")

class clearrouterbgpEx:
    def __init__(self):
        self._autonomoussystem = None
        self._neighbor = None
        self._all = None
        return
clearrouterbgpEx.typecode = Struct(pname=("urn:NSConfig","clearrouterbgpEx"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="neighbor", aname="_neighbor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrouterbgpEx, encoded="urn:NSConfig")

class clearrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
clearrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","clearrouterbgpExResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=clearrouterbgpResponse, encoded="urn:NSConfig")

class vtysh:
    def __init__(self):
        return
vtysh.typecode = Struct(pname=("urn:NSConfig","vtysh"), ofwhat=[], pyclass=vtysh, encoded="urn:NSConfig")

class vtyshResponse:
    def __init__(self):
        self._return = None
        return
vtyshResponse.typecode = Struct(pname=("urn:NSConfig","vtyshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=vtyshResponse, encoded="urn:NSConfig")

class setrouterospf_routerid:
    def __init__(self):
        self._routerid = None
        return
setrouterospf_routerid.typecode = Struct(pname=("urn:NSConfig","setrouterospf_routerid"), ofwhat=[ZSI.TC.String(pname="routerid", aname="_routerid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_routerid, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_routeridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_passiveinterface:
    def __init__(self):
        self._passiveinterface = None
        return
setrouterospf_passiveinterface.typecode = Struct(pname=("urn:NSConfig","setrouterospf_passiveinterface"), ofwhat=[ZSI.TC.String(pname="passiveinterface", aname="_passiveinterface", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_passiveinterface, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_passiveinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_staticredistribute:
    def __init__(self):
        self._staticredistribute = None
        self._staticmetrictype = None
        return
setrouterospf_staticredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterospf_staticredistribute"), ofwhat=[ZSI.TC.Boolean(pname="staticredistribute", aname="_staticredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="staticmetrictype", aname="_staticmetrictype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_staticredistribute, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_kernelredistribute:
    def __init__(self):
        self._kernelredistribute = None
        self._kernelmetrictype = None
        return
setrouterospf_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterospf_kernelredistribute"), ofwhat=[ZSI.TC.Boolean(pname="kernelredistribute", aname="_kernelredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="kernelmetrictype", aname="_kernelmetrictype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_kernelredistribute, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_conredistribute:
    def __init__(self):
        self._conredistribute = None
        self._conmetrictype = None
        return
setrouterospf_conredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterospf_conredistribute"), ofwhat=[ZSI.TC.Boolean(pname="conredistribute", aname="_conredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="conmetrictype", aname="_conmetrictype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_conredistribute, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_conredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_learnroute:
    def __init__(self):
        self._learnroute = None
        return
setrouterospf_learnroute.typecode = Struct(pname=("urn:NSConfig","setrouterospf_learnroute"), ofwhat=[ZSI.TC.Boolean(pname="learnroute", aname="_learnroute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_learnroute, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_network:
    def __init__(self):
        self._network = None
        self._netmask = None
        self._area = None
        return
setrouterospf_network.typecode = Struct(pname=("urn:NSConfig","setrouterospf_network"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="area", aname="_area", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_network, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class setrouterospf_host:
    def __init__(self):
        self._host = None
        self._cost = None
        return
setrouterospf_host.typecode = Struct(pname=("urn:NSConfig","setrouterospf_host"), ofwhat=[ZSI.TC.String(pname="host", aname="_host", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="cost", aname="_cost", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospf_host, encoded="urn:NSConfig")

class setrouterospfResponse:
    def __init__(self):
        self._return = None
        return
setrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","setrouterospf_hostResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_routerid:
    def __init__(self):
        return
unsetrouterospf_routerid.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_routerid"), ofwhat=[], pyclass=unsetrouterospf_routerid, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_routeridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_learnroute:
    def __init__(self):
        return
unsetrouterospf_learnroute.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_learnroute"), ofwhat=[], pyclass=unsetrouterospf_learnroute, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_conredistribute:
    def __init__(self):
        return
unsetrouterospf_conredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_conredistribute"), ofwhat=[], pyclass=unsetrouterospf_conredistribute, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_conredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_kernelredistribute:
    def __init__(self):
        return
unsetrouterospf_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_kernelredistribute"), ofwhat=[], pyclass=unsetrouterospf_kernelredistribute, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_staticredistribute:
    def __init__(self):
        return
unsetrouterospf_staticredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_staticredistribute"), ofwhat=[], pyclass=unsetrouterospf_staticredistribute, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_network:
    def __init__(self):
        return
unsetrouterospf_network.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_network"), ofwhat=[], pyclass=unsetrouterospf_network, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_host:
    def __init__(self):
        return
unsetrouterospf_host.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_host"), ofwhat=[], pyclass=unsetrouterospf_host, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_hostResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_passiveinterface:
    def __init__(self):
        return
unsetrouterospf_passiveinterface.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_passiveinterface"), ofwhat=[], pyclass=unsetrouterospf_passiveinterface, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_passiveinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_staticmetrictype:
    def __init__(self):
        return
unsetrouterospf_staticmetrictype.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_staticmetrictype"), ofwhat=[], pyclass=unsetrouterospf_staticmetrictype, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_staticmetrictypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_kernelmetrictype:
    def __init__(self):
        return
unsetrouterospf_kernelmetrictype.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_kernelmetrictype"), ofwhat=[], pyclass=unsetrouterospf_kernelmetrictype, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_kernelmetrictypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class unsetrouterospf_conmetrictype:
    def __init__(self):
        return
unsetrouterospf_conmetrictype.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_conmetrictype"), ofwhat=[], pyclass=unsetrouterospf_conmetrictype, encoded="urn:NSConfig")

class unsetrouterospfResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterospf_conmetrictypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterospfResponse, encoded="urn:NSConfig")

class getrouterospf:
    def __init__(self):
        self._ospfoptions = None
        return
getrouterospf.typecode = Struct(pname=("urn:NSConfig","getrouterospf"), ofwhat=[ZSI.TC.String(pname="ospfoptions", aname="_ospfoptions", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrouterospf, encoded="urn:NSConfig")

class getrouterospfResponse:
    def __init__(self):
        self._return = None
        return
getrouterospfResponse.typecode = Struct(pname=("urn:NSConfig","getrouterospfResponse"), ofwhat=[ns0.getrouterospfResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrouterospfResponse, encoded="urn:NSConfig")

class setrouterrip_defaultmetric:
    def __init__(self):
        self._defaultmetric = None
        return
setrouterrip_defaultmetric.typecode = Struct(pname=("urn:NSConfig","setrouterrip_defaultmetric"), ofwhat=[ZSI.TCnumbers.Iint(pname="defaultmetric", aname="_defaultmetric", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_defaultmetric, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_defaultmetricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class setrouterrip_passiveinterface:
    def __init__(self):
        self._passiveinterface = None
        return
setrouterrip_passiveinterface.typecode = Struct(pname=("urn:NSConfig","setrouterrip_passiveinterface"), ofwhat=[ZSI.TC.String(pname="passiveinterface", aname="_passiveinterface", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_passiveinterface, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_passiveinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class setrouterrip_learnroute:
    def __init__(self):
        self._learnroute = None
        return
setrouterrip_learnroute.typecode = Struct(pname=("urn:NSConfig","setrouterrip_learnroute"), ofwhat=[ZSI.TC.Boolean(pname="learnroute", aname="_learnroute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_learnroute, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class setrouterrip_staticredistribute:
    def __init__(self):
        self._staticredistribute = None
        return
setrouterrip_staticredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterrip_staticredistribute"), ofwhat=[ZSI.TC.Boolean(pname="staticredistribute", aname="_staticredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_staticredistribute, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class setrouterrip_kernelredistribute:
    def __init__(self):
        self._kernelredistribute = None
        return
setrouterrip_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterrip_kernelredistribute"), ofwhat=[ZSI.TC.Boolean(pname="kernelredistribute", aname="_kernelredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_kernelredistribute, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class setrouterrip_network:
    def __init__(self):
        self._network = None
        self._netmask = None
        return
setrouterrip_network.typecode = Struct(pname=("urn:NSConfig","setrouterrip_network"), ofwhat=[ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterrip_network, encoded="urn:NSConfig")

class setrouterripResponse:
    def __init__(self):
        self._return = None
        return
setrouterripResponse.typecode = Struct(pname=("urn:NSConfig","setrouterrip_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_defaultmetric:
    def __init__(self):
        return
unsetrouterrip_defaultmetric.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_defaultmetric"), ofwhat=[], pyclass=unsetrouterrip_defaultmetric, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_defaultmetricResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_staticredistribute:
    def __init__(self):
        return
unsetrouterrip_staticredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_staticredistribute"), ofwhat=[], pyclass=unsetrouterrip_staticredistribute, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_learnroute:
    def __init__(self):
        return
unsetrouterrip_learnroute.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_learnroute"), ofwhat=[], pyclass=unsetrouterrip_learnroute, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_kernelredistribute:
    def __init__(self):
        return
unsetrouterrip_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_kernelredistribute"), ofwhat=[], pyclass=unsetrouterrip_kernelredistribute, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_passiveinterface:
    def __init__(self):
        return
unsetrouterrip_passiveinterface.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_passiveinterface"), ofwhat=[], pyclass=unsetrouterrip_passiveinterface, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_passiveinterfaceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class unsetrouterrip_network:
    def __init__(self):
        return
unsetrouterrip_network.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_network"), ofwhat=[], pyclass=unsetrouterrip_network, encoded="urn:NSConfig")

class unsetrouterripResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterripResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterrip_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterripResponse, encoded="urn:NSConfig")

class getrouterrip:
    def __init__(self):
        self._ripoptions = None
        return
getrouterrip.typecode = Struct(pname=("urn:NSConfig","getrouterrip"), ofwhat=[ZSI.TC.String(pname="ripoptions", aname="_ripoptions", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrouterrip, encoded="urn:NSConfig")

class getrouterripResponse:
    def __init__(self):
        self._return = None
        return
getrouterripResponse.typecode = Struct(pname=("urn:NSConfig","getrouterripResponse"), ofwhat=[ns0.getrouterripResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getrouterripResponse, encoded="urn:NSConfig")

class addrouterbgp:
    def __init__(self):
        self._autonomoussystem = None
        return
addrouterbgp.typecode = Struct(pname=("urn:NSConfig","addrouterbgp"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrouterbgp, encoded="urn:NSConfig")

class addrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
addrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","addrouterbgpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addrouterbgpResponse, encoded="urn:NSConfig")

class rmrouterbgp:
    def __init__(self):
        self._autonomoussystem = None
        self._neighbor = None
        return
rmrouterbgp.typecode = Struct(pname=("urn:NSConfig","rmrouterbgp"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="neighbor", aname="_neighbor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrouterbgp, encoded="urn:NSConfig")

class rmrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
rmrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","rmrouterbgpResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_routerid:
    def __init__(self):
        self._autonomoussystem = None
        self._routerid = None
        return
setrouterbgp_routerid.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_routerid"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="routerid", aname="_routerid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_routerid, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_routeridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_learnroute:
    def __init__(self):
        self._autonomoussystem = None
        self._learnroute = None
        return
setrouterbgp_learnroute.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_learnroute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="learnroute", aname="_learnroute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_learnroute, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_staticredistribute:
    def __init__(self):
        self._autonomoussystem = None
        self._staticredistribute = None
        self._staticroutemap = None
        return
setrouterbgp_staticredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_staticredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="staticredistribute", aname="_staticredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="staticroutemap", aname="_staticroutemap", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_staticredistribute, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_kernelredistribute:
    def __init__(self):
        self._autonomoussystem = None
        self._kernelredistribute = None
        self._kernelroutemap = None
        return
setrouterbgp_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_kernelredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="kernelredistribute", aname="_kernelredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="kernelroutemap", aname="_kernelroutemap", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_kernelredistribute, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_conredistribute:
    def __init__(self):
        self._autonomoussystem = None
        self._conredistribute = None
        self._connectedroutemap = None
        return
setrouterbgp_conredistribute.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_conredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="conredistribute", aname="_conredistribute", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="connectedroutemap", aname="_connectedroutemap", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_conredistribute, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_conredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_neighbor:
    def __init__(self):
        self._autonomoussystem = None
        self._neighbor = None
        self._remoteas = None
        self._neighborroutemap = None
        return
setrouterbgp_neighbor.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_neighbor"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="neighbor", aname="_neighbor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="remoteas", aname="_remoteas", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="neighborroutemap", aname="_neighborroutemap", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_neighbor, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_neighborResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class setrouterbgp_network:
    def __init__(self):
        self._autonomoussystem = None
        self._network = None
        self._netmask = None
        return
setrouterbgp_network.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_network"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="network", aname="_network", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgp_network, encoded="urn:NSConfig")

class setrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
setrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","setrouterbgp_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_routerid:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_routerid.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_routerid"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_routerid, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_routeridResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_learnroute:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_learnroute.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_learnroute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_learnroute, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_learnrouteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_staticredistribute:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_staticredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_staticredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_staticredistribute, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_staticredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_kernelredistribute:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_kernelredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_kernelredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_kernelredistribute, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_kernelredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_conredistribute:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_conredistribute.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_conredistribute"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_conredistribute, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_conredistributeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_neighbor:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_neighbor.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_neighbor"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_neighbor, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_neighborResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_network:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_network.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_network"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_network, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_networkResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class unsetrouterbgp_remoteas:
    def __init__(self):
        self._autonomoussystem = None
        return
unsetrouterbgp_remoteas.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_remoteas"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="autonomoussystem", aname="_autonomoussystem", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgp_remoteas, encoded="urn:NSConfig")

class unsetrouterbgpResponse:
    def __init__(self):
        self._return = None
        return
unsetrouterbgpResponse.typecode = Struct(pname=("urn:NSConfig","unsetrouterbgp_remoteasResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetrouterbgpResponse, encoded="urn:NSConfig")

class getsnmpoid:
    def __init__(self):
        self._entitytype = None
        self._name = None
        return
getsnmpoid.typecode = Struct(pname=("urn:NSConfig","getsnmpoid"), ofwhat=[ZSI.TC.String(pname="entitytype", aname="_entitytype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpoid, encoded="urn:NSConfig")

class getsnmpoidResponse:
    def __init__(self):
        self._return = None
        return
getsnmpoidResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpoidResponse"), ofwhat=[ns0.getsnmpoidResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpoidResponse, encoded="urn:NSConfig")

class setsnmpalarm_thresholdvalue:
    def __init__(self):
        self._trapname = None
        self._thresholdvalue = None
        self._normalvalue = None
        return
setsnmpalarm_thresholdvalue.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_thresholdvalue"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="thresholdvalue", aname="_thresholdvalue", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="normalvalue", aname="_normalvalue", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarm_thresholdvalue, encoded="urn:NSConfig")

class setsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
setsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_thresholdvalueResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarmResponse, encoded="urn:NSConfig")

class setsnmpalarm_time:
    def __init__(self):
        self._trapname = None
        self._time = None
        return
setsnmpalarm_time.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_time"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="time", aname="_time", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarm_time, encoded="urn:NSConfig")

class setsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
setsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_timeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarmResponse, encoded="urn:NSConfig")

class setsnmpalarm_state:
    def __init__(self):
        self._trapname = None
        self._state = None
        return
setsnmpalarm_state.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_state"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarm_state, encoded="urn:NSConfig")

class setsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
setsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarmResponse, encoded="urn:NSConfig")

class setsnmpalarm_severity:
    def __init__(self):
        self._trapname = None
        self._severity = None
        return
setsnmpalarm_severity.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_severity"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.trapseverityEnum_Def(pname="severity", aname="_severity", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarm_severity, encoded="urn:NSConfig")

class setsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
setsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpalarm_severityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpalarmResponse, encoded="urn:NSConfig")

class unsetsnmpalarm_thresholdvalue:
    def __init__(self):
        self._trapname = None
        return
unsetsnmpalarm_thresholdvalue.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_thresholdvalue"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarm_thresholdvalue, encoded="urn:NSConfig")

class unsetsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_thresholdvalueResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarmResponse, encoded="urn:NSConfig")

class unsetsnmpalarm_normalvalue:
    def __init__(self):
        self._trapname = None
        return
unsetsnmpalarm_normalvalue.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_normalvalue"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarm_normalvalue, encoded="urn:NSConfig")

class unsetsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_normalvalueResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarmResponse, encoded="urn:NSConfig")

class unsetsnmpalarm_time:
    def __init__(self):
        self._trapname = None
        return
unsetsnmpalarm_time.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_time"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarm_time, encoded="urn:NSConfig")

class unsetsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_timeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarmResponse, encoded="urn:NSConfig")

class unsetsnmpalarm_state:
    def __init__(self):
        self._trapname = None
        return
unsetsnmpalarm_state.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_state"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarm_state, encoded="urn:NSConfig")

class unsetsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_stateResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarmResponse, encoded="urn:NSConfig")

class unsetsnmpalarm_severity:
    def __init__(self):
        self._trapname = None
        return
unsetsnmpalarm_severity.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_severity"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarm_severity, encoded="urn:NSConfig")

class unsetsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpalarm_severityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpalarmResponse, encoded="urn:NSConfig")

class enablesnmpalarm:
    def __init__(self):
        self._trapname = None
        return
enablesnmpalarm.typecode = Struct(pname=("urn:NSConfig","enablesnmpalarm"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesnmpalarm, encoded="urn:NSConfig")

class enablesnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
enablesnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","enablesnmpalarmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesnmpalarmResponse, encoded="urn:NSConfig")

class disablesnmpalarm:
    def __init__(self):
        self._trapname = None
        return
disablesnmpalarm.typecode = Struct(pname=("urn:NSConfig","disablesnmpalarm"), ofwhat=[ns0.thresholdsEnum_Def(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablesnmpalarm, encoded="urn:NSConfig")

class disablesnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
disablesnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","disablesnmpalarmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablesnmpalarmResponse, encoded="urn:NSConfig")

class getsnmpalarm:
    def __init__(self):
        self._trapname = None
        return
getsnmpalarm.typecode = Struct(pname=("urn:NSConfig","getsnmpalarm"), ofwhat=[ZSI.TC.String(pname="trapname", aname="_trapname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpalarm, encoded="urn:NSConfig")

class getsnmpalarmResponse:
    def __init__(self):
        self._return = None
        return
getsnmpalarmResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpalarmResponse"), ofwhat=[ns0.getsnmpalarmResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpalarmResponse, encoded="urn:NSConfig")

class addsnmpcommunity:
    def __init__(self):
        self._communityname = None
        self._permissions = None
        return
addsnmpcommunity.typecode = Struct(pname=("urn:NSConfig","addsnmpcommunity"), ofwhat=[ZSI.TC.String(pname="communityname", aname="_communityname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.snmppermEnum_Def(pname="permissions", aname="_permissions", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpcommunity, encoded="urn:NSConfig")

class addsnmpcommunityResponse:
    def __init__(self):
        self._return = None
        return
addsnmpcommunityResponse.typecode = Struct(pname=("urn:NSConfig","addsnmpcommunityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpcommunityResponse, encoded="urn:NSConfig")

class rmsnmpcommunity:
    def __init__(self):
        self._communityname = None
        return
rmsnmpcommunity.typecode = Struct(pname=("urn:NSConfig","rmsnmpcommunity"), ofwhat=[ZSI.TC.String(pname="communityname", aname="_communityname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpcommunity, encoded="urn:NSConfig")

class rmsnmpcommunityResponse:
    def __init__(self):
        self._return = None
        return
rmsnmpcommunityResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmpcommunityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpcommunityResponse, encoded="urn:NSConfig")

class getsnmpcommunity:
    def __init__(self):
        self._communityname = None
        return
getsnmpcommunity.typecode = Struct(pname=("urn:NSConfig","getsnmpcommunity"), ofwhat=[ZSI.TC.String(pname="communityname", aname="_communityname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpcommunity, encoded="urn:NSConfig")

class getsnmpcommunityResponse:
    def __init__(self):
        self._return = None
        return
getsnmpcommunityResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpcommunityResponse"), ofwhat=[ns0.getsnmpcommunityResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpcommunityResponse, encoded="urn:NSConfig")

class addsnmpmanager:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        return
addsnmpmanager.typecode = Struct(pname=("urn:NSConfig","addsnmpmanager"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpmanager, encoded="urn:NSConfig")

class addsnmpmanagerResponse:
    def __init__(self):
        self._return = None
        return
addsnmpmanagerResponse.typecode = Struct(pname=("urn:NSConfig","addsnmpmanagerResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpmanagerResponse, encoded="urn:NSConfig")

class rmsnmpmanager:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        return
rmsnmpmanager.typecode = Struct(pname=("urn:NSConfig","rmsnmpmanager"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpmanager, encoded="urn:NSConfig")

class rmsnmpmanagerResponse:
    def __init__(self):
        self._return = None
        return
rmsnmpmanagerResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmpmanagerResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpmanagerResponse, encoded="urn:NSConfig")

class getsnmpmanager:
    def __init__(self):
        self._ipaddress = None
        self._netmask = None
        return
getsnmpmanager.typecode = Struct(pname=("urn:NSConfig","getsnmpmanager"), ofwhat=[ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpmanager, encoded="urn:NSConfig")

class getsnmpmanagerResponse:
    def __init__(self):
        self._return = None
        return
getsnmpmanagerResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpmanagerResponse"), ofwhat=[ns0.getsnmpmanagerResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpmanagerResponse, encoded="urn:NSConfig")

class setsnmpmib_contact:
    def __init__(self):
        self._contact = None
        return
setsnmpmib_contact.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_contact"), ofwhat=[ZSI.TC.String(pname="contact", aname="_contact", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmib_contact, encoded="urn:NSConfig")

class setsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
setsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_contactResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmibResponse, encoded="urn:NSConfig")

class setsnmpmib_name:
    def __init__(self):
        self._name = None
        return
setsnmpmib_name.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_name"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmib_name, encoded="urn:NSConfig")

class setsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
setsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_nameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmibResponse, encoded="urn:NSConfig")

class setsnmpmib_location:
    def __init__(self):
        self._location = None
        return
setsnmpmib_location.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_location"), ofwhat=[ZSI.TC.String(pname="location", aname="_location", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmib_location, encoded="urn:NSConfig")

class setsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
setsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_locationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmibResponse, encoded="urn:NSConfig")

class setsnmpmib_customid:
    def __init__(self):
        self._customid = None
        return
setsnmpmib_customid.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_customid"), ofwhat=[ZSI.TC.String(pname="customid", aname="_customid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmib_customid, encoded="urn:NSConfig")

class setsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
setsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpmib_customidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpmibResponse, encoded="urn:NSConfig")

class unsetsnmpmib_contact:
    def __init__(self):
        return
unsetsnmpmib_contact.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_contact"), ofwhat=[], pyclass=unsetsnmpmib_contact, encoded="urn:NSConfig")

class unsetsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_contactResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpmibResponse, encoded="urn:NSConfig")

class unsetsnmpmib_name:
    def __init__(self):
        return
unsetsnmpmib_name.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_name"), ofwhat=[], pyclass=unsetsnmpmib_name, encoded="urn:NSConfig")

class unsetsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_nameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpmibResponse, encoded="urn:NSConfig")

class unsetsnmpmib_location:
    def __init__(self):
        return
unsetsnmpmib_location.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_location"), ofwhat=[], pyclass=unsetsnmpmib_location, encoded="urn:NSConfig")

class unsetsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_locationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpmibResponse, encoded="urn:NSConfig")

class unsetsnmpmib_customid:
    def __init__(self):
        return
unsetsnmpmib_customid.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_customid"), ofwhat=[], pyclass=unsetsnmpmib_customid, encoded="urn:NSConfig")

class unsetsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpmib_customidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpmibResponse, encoded="urn:NSConfig")

class getsnmpmib:
    def __init__(self):
        return
getsnmpmib.typecode = Struct(pname=("urn:NSConfig","getsnmpmib"), ofwhat=[], pyclass=getsnmpmib, encoded="urn:NSConfig")

class getsnmpmibResponse:
    def __init__(self):
        self._return = None
        return
getsnmpmibResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpmibResponse"), ofwhat=[ns0.getsnmpmibResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpmibResponse, encoded="urn:NSConfig")

class addsnmptrap:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
addsnmptrap.typecode = Struct(pname=("urn:NSConfig","addsnmptrap"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmptrap, encoded="urn:NSConfig")

class addsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
addsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","addsnmptrapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmptrapResponse, encoded="urn:NSConfig")

class rmsnmptrap:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
rmsnmptrap.typecode = Struct(pname=("urn:NSConfig","rmsnmptrap"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmptrap, encoded="urn:NSConfig")

class rmsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
rmsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmptrapResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmptrapResponse, encoded="urn:NSConfig")

class setsnmptrap_destport:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        self._destport = None
        return
setsnmptrap_destport.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_destport"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrap_destport, encoded="urn:NSConfig")

class setsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
setsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrapResponse, encoded="urn:NSConfig")

class setsnmptrap_version:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        self._version = None
        return
setsnmptrap_version.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_version"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.trapversionEnum_Def(pname="version", aname="_version", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrap_version, encoded="urn:NSConfig")

class setsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
setsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_versionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrapResponse, encoded="urn:NSConfig")

class setsnmptrap_communityname:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        self._communityname = None
        return
setsnmptrap_communityname.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_communityname"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="communityname", aname="_communityname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrap_communityname, encoded="urn:NSConfig")

class setsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
setsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_communitynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrapResponse, encoded="urn:NSConfig")

class setsnmptrap_srcip:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        self._srcip = None
        return
setsnmptrap_srcip.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_srcip"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrap_srcip, encoded="urn:NSConfig")

class setsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
setsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrapResponse, encoded="urn:NSConfig")

class setsnmptrap_severity:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        self._severity = None
        return
setsnmptrap_severity.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_severity"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.trapseverityEnum_Def(pname="severity", aname="_severity", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrap_severity, encoded="urn:NSConfig")

class setsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
setsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","setsnmptrap_severityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmptrapResponse, encoded="urn:NSConfig")

class unsetsnmptrap_destport:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
unsetsnmptrap_destport.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_destport"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrap_destport, encoded="urn:NSConfig")

class unsetsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_destportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrapResponse, encoded="urn:NSConfig")

class unsetsnmptrap_version:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
unsetsnmptrap_version.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_version"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrap_version, encoded="urn:NSConfig")

class unsetsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_versionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrapResponse, encoded="urn:NSConfig")

class unsetsnmptrap_communityname:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
unsetsnmptrap_communityname.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_communityname"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrap_communityname, encoded="urn:NSConfig")

class unsetsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_communitynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrapResponse, encoded="urn:NSConfig")

class unsetsnmptrap_srcip:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
unsetsnmptrap_srcip.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_srcip"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrap_srcip, encoded="urn:NSConfig")

class unsetsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_srcipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrapResponse, encoded="urn:NSConfig")

class unsetsnmptrap_severity:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
unsetsnmptrap_severity.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_severity"), ofwhat=[ns0.trapclassEnum_Def(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrap_severity, encoded="urn:NSConfig")

class unsetsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmptrap_severityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmptrapResponse, encoded="urn:NSConfig")

class getsnmptrap:
    def __init__(self):
        self._trapclass = None
        self._trapdestination = None
        return
getsnmptrap.typecode = Struct(pname=("urn:NSConfig","getsnmptrap"), ofwhat=[ZSI.TC.String(pname="trapclass", aname="_trapclass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmptrap, encoded="urn:NSConfig")

class getsnmptrapResponse:
    def __init__(self):
        self._return = None
        return
getsnmptrapResponse.typecode = Struct(pname=("urn:NSConfig","getsnmptrapResponse"), ofwhat=[ns0.getsnmptrapResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmptrapResponse, encoded="urn:NSConfig")

class addsnmpgroup:
    def __init__(self):
        self._name = None
        self._securitylevel = None
        self._readviewname = None
        return
addsnmpgroup.typecode = Struct(pname=("urn:NSConfig","addsnmpgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.securitylevelEnum_Def(pname="securitylevel", aname="_securitylevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="readviewname", aname="_readviewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpgroup, encoded="urn:NSConfig")

class addsnmpgroupResponse:
    def __init__(self):
        self._return = None
        return
addsnmpgroupResponse.typecode = Struct(pname=("urn:NSConfig","addsnmpgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpgroupResponse, encoded="urn:NSConfig")

class rmsnmpgroup:
    def __init__(self):
        self._name = None
        self._securitylevel = None
        return
rmsnmpgroup.typecode = Struct(pname=("urn:NSConfig","rmsnmpgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.securitylevelEnum_Def(pname="securitylevel", aname="_securitylevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpgroup, encoded="urn:NSConfig")

class rmsnmpgroupResponse:
    def __init__(self):
        self._return = None
        return
rmsnmpgroupResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmpgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpgroupResponse, encoded="urn:NSConfig")

class setsnmpgroup_readviewname:
    def __init__(self):
        self._name = None
        self._securitylevel = None
        self._readviewname = None
        return
setsnmpgroup_readviewname.typecode = Struct(pname=("urn:NSConfig","setsnmpgroup_readviewname"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.securitylevelEnum_Def(pname="securitylevel", aname="_securitylevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="readviewname", aname="_readviewname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpgroup_readviewname, encoded="urn:NSConfig")

class setsnmpgroupResponse:
    def __init__(self):
        self._return = None
        return
setsnmpgroupResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpgroup_readviewnameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpgroupResponse, encoded="urn:NSConfig")

class getsnmpgroup:
    def __init__(self):
        self._name = None
        self._securitylevel = None
        return
getsnmpgroup.typecode = Struct(pname=("urn:NSConfig","getsnmpgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="securitylevel", aname="_securitylevel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpgroup, encoded="urn:NSConfig")

class getsnmpgroupResponse:
    def __init__(self):
        self._return = None
        return
getsnmpgroupResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpgroupResponse"), ofwhat=[ns0.getsnmpgroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpgroupResponse, encoded="urn:NSConfig")

class addsnmpview:
    def __init__(self):
        self._name = None
        self._subtree = None
        self._type = None
        return
addsnmpview.typecode = Struct(pname=("urn:NSConfig","addsnmpview"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subtree", aname="_subtree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.subtreetypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpview, encoded="urn:NSConfig")

class addsnmpviewResponse:
    def __init__(self):
        self._return = None
        return
addsnmpviewResponse.typecode = Struct(pname=("urn:NSConfig","addsnmpviewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpviewResponse, encoded="urn:NSConfig")

class rmsnmpview:
    def __init__(self):
        self._name = None
        self._subtree = None
        return
rmsnmpview.typecode = Struct(pname=("urn:NSConfig","rmsnmpview"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subtree", aname="_subtree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpview, encoded="urn:NSConfig")

class rmsnmpviewResponse:
    def __init__(self):
        self._return = None
        return
rmsnmpviewResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmpviewResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpviewResponse, encoded="urn:NSConfig")

class setsnmpview_type:
    def __init__(self):
        self._name = None
        self._subtree = None
        self._type = None
        return
setsnmpview_type.typecode = Struct(pname=("urn:NSConfig","setsnmpview_type"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subtree", aname="_subtree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.subtreetypeEnum_Def(pname="type", aname="_type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpview_type, encoded="urn:NSConfig")

class setsnmpviewResponse:
    def __init__(self):
        self._return = None
        return
setsnmpviewResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpview_typeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpviewResponse, encoded="urn:NSConfig")

class getsnmpview:
    def __init__(self):
        self._name = None
        self._subtree = None
        return
getsnmpview.typecode = Struct(pname=("urn:NSConfig","getsnmpview"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="subtree", aname="_subtree", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpview, encoded="urn:NSConfig")

class getsnmpviewResponse:
    def __init__(self):
        self._return = None
        return
getsnmpviewResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpviewResponse"), ofwhat=[ns0.getsnmpviewResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpviewResponse, encoded="urn:NSConfig")

class addsnmpuser:
    def __init__(self):
        self._name = None
        self._group = None
        self._authtype = None
        self._authpasswd = None
        self._privtype = None
        self._privpasswd = None
        return
addsnmpuser.typecode = Struct(pname=("urn:NSConfig","addsnmpuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="group", aname="_group", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.snmpauthtypeEnum_Def(pname="authtype", aname="_authtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="authpasswd", aname="_authpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.privtypeEnum_Def(pname="privtype", aname="_privtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="privpasswd", aname="_privpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpuser, encoded="urn:NSConfig")

class addsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
addsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","addsnmpuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsnmpuserResponse, encoded="urn:NSConfig")

class rmsnmpuser:
    def __init__(self):
        self._name = None
        return
rmsnmpuser.typecode = Struct(pname=("urn:NSConfig","rmsnmpuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpuser, encoded="urn:NSConfig")

class rmsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
rmsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","rmsnmpuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsnmpuserResponse, encoded="urn:NSConfig")

class setsnmpuser_group:
    def __init__(self):
        self._name = None
        self._group = None
        return
setsnmpuser_group.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_group"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="group", aname="_group", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuser_group, encoded="urn:NSConfig")

class setsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
setsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_groupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuserResponse, encoded="urn:NSConfig")

class setsnmpuser_authtype:
    def __init__(self):
        self._name = None
        self._authtype = None
        self._authpasswd = None
        return
setsnmpuser_authtype.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_authtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.snmpauthtypeEnum_Def(pname="authtype", aname="_authtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="authpasswd", aname="_authpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuser_authtype, encoded="urn:NSConfig")

class setsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
setsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_authtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuserResponse, encoded="urn:NSConfig")

class setsnmpuser_privtype:
    def __init__(self):
        self._name = None
        self._privtype = None
        self._privpasswd = None
        return
setsnmpuser_privtype.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_privtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.privtypeEnum_Def(pname="privtype", aname="_privtype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="privpasswd", aname="_privpasswd", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuser_privtype, encoded="urn:NSConfig")

class setsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
setsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpuser_privtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpuserResponse, encoded="urn:NSConfig")

class unsetsnmpuser_authtype:
    def __init__(self):
        self._name = None
        return
unsetsnmpuser_authtype.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_authtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuser_authtype, encoded="urn:NSConfig")

class unsetsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_authtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuserResponse, encoded="urn:NSConfig")

class unsetsnmpuser_privtype:
    def __init__(self):
        self._name = None
        return
unsetsnmpuser_privtype.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_privtype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuser_privtype, encoded="urn:NSConfig")

class unsetsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_privtypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuserResponse, encoded="urn:NSConfig")

class unsetsnmpuser_authpasswd:
    def __init__(self):
        self._name = None
        return
unsetsnmpuser_authpasswd.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_authpasswd"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuser_authpasswd, encoded="urn:NSConfig")

class unsetsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_authpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuserResponse, encoded="urn:NSConfig")

class unsetsnmpuser_privpasswd:
    def __init__(self):
        self._name = None
        return
unsetsnmpuser_privpasswd.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_privpasswd"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuser_privpasswd, encoded="urn:NSConfig")

class unsetsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
unsetsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","unsetsnmpuser_privpasswdResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsnmpuserResponse, encoded="urn:NSConfig")

class getsnmpuser:
    def __init__(self):
        self._name = None
        return
getsnmpuser.typecode = Struct(pname=("urn:NSConfig","getsnmpuser"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpuser, encoded="urn:NSConfig")

class getsnmpuserResponse:
    def __init__(self):
        self._return = None
        return
getsnmpuserResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpuserResponse"), ofwhat=[ns0.getsnmpuserResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpuserResponse, encoded="urn:NSConfig")

class setsnmpengineid_engineid:
    def __init__(self):
        self._engineid = None
        return
setsnmpengineid_engineid.typecode = Struct(pname=("urn:NSConfig","setsnmpengineid_engineid"), ofwhat=[ZSI.TC.String(pname="engineid", aname="_engineid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpengineid_engineid, encoded="urn:NSConfig")

class setsnmpengineidResponse:
    def __init__(self):
        self._return = None
        return
setsnmpengineidResponse.typecode = Struct(pname=("urn:NSConfig","setsnmpengineid_engineidResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsnmpengineidResponse, encoded="urn:NSConfig")

class getsnmpengineid:
    def __init__(self):
        return
getsnmpengineid.typecode = Struct(pname=("urn:NSConfig","getsnmpengineid"), ofwhat=[], pyclass=getsnmpengineid, encoded="urn:NSConfig")

class getsnmpengineidResponse:
    def __init__(self):
        self._return = None
        return
getsnmpengineidResponse.typecode = Struct(pname=("urn:NSConfig","getsnmpengineidResponse"), ofwhat=[ns0.getsnmpengineidResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsnmpengineidResponse, encoded="urn:NSConfig")

class setscparameter_sessionlife:
    def __init__(self):
        self._sessionlife = None
        return
setscparameter_sessionlife.typecode = Struct(pname=("urn:NSConfig","setscparameter_sessionlife"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="sessionlife", aname="_sessionlife", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscparameter_sessionlife, encoded="urn:NSConfig")

class setscparameterResponse:
    def __init__(self):
        self._return = None
        return
setscparameterResponse.typecode = Struct(pname=("urn:NSConfig","setscparameter_sessionlifeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscparameterResponse, encoded="urn:NSConfig")

class setscparameter_vsr:
    def __init__(self):
        self._vsr = None
        return
setscparameter_vsr.typecode = Struct(pname=("urn:NSConfig","setscparameter_vsr"), ofwhat=[ZSI.TC.String(pname="vsr", aname="_vsr", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscparameter_vsr, encoded="urn:NSConfig")

class setscparameterResponse:
    def __init__(self):
        self._return = None
        return
setscparameterResponse.typecode = Struct(pname=("urn:NSConfig","setscparameter_vsrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscparameterResponse, encoded="urn:NSConfig")

class unsetscparameter_sessionlife:
    def __init__(self):
        return
unsetscparameter_sessionlife.typecode = Struct(pname=("urn:NSConfig","unsetscparameter_sessionlife"), ofwhat=[], pyclass=unsetscparameter_sessionlife, encoded="urn:NSConfig")

class unsetscparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetscparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetscparameter_sessionlifeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscparameterResponse, encoded="urn:NSConfig")

class unsetscparameter_vsr:
    def __init__(self):
        return
unsetscparameter_vsr.typecode = Struct(pname=("urn:NSConfig","unsetscparameter_vsr"), ofwhat=[], pyclass=unsetscparameter_vsr, encoded="urn:NSConfig")

class unsetscparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetscparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetscparameter_vsrResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscparameterResponse, encoded="urn:NSConfig")

class getscparameter:
    def __init__(self):
        return
getscparameter.typecode = Struct(pname=("urn:NSConfig","getscparameter"), ofwhat=[], pyclass=getscparameter, encoded="urn:NSConfig")

class getscparameterResponse:
    def __init__(self):
        self._return = None
        return
getscparameterResponse.typecode = Struct(pname=("urn:NSConfig","getscparameterResponse"), ofwhat=[ns0.getscparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getscparameterResponse, encoded="urn:NSConfig")

class addscpolicy:
    def __init__(self):
        self._name = None
        self._url = None
        self._rule = None
        self._delay = None
        self._maxconn = None
        self._actioN = None
        self._altcontentsvcname = None
        self._altcontentpath = None
        return
addscpolicy.typecode = Struct(pname=("urn:NSConfig","addscpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxconn", aname="_maxconn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.scactionEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="altcontentsvcname", aname="_altcontentsvcname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="altcontentpath", aname="_altcontentpath", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addscpolicy, encoded="urn:NSConfig")

class addscpolicyResponse:
    def __init__(self):
        self._return = None
        return
addscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addscpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addscpolicyResponse, encoded="urn:NSConfig")

class rmscpolicy:
    def __init__(self):
        self._name = None
        return
rmscpolicy.typecode = Struct(pname=("urn:NSConfig","rmscpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmscpolicy, encoded="urn:NSConfig")

class rmscpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmscpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmscpolicyResponse, encoded="urn:NSConfig")

class setscpolicy_url:
    def __init__(self):
        self._name = None
        self._url = None
        return
setscpolicy_url.typecode = Struct(pname=("urn:NSConfig","setscpolicy_url"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicy_url, encoded="urn:NSConfig")

class setscpolicyResponse:
    def __init__(self):
        self._return = None
        return
setscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setscpolicy_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicyResponse, encoded="urn:NSConfig")

class setscpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setscpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setscpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicy_rule, encoded="urn:NSConfig")

class setscpolicyResponse:
    def __init__(self):
        self._return = None
        return
setscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setscpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicyResponse, encoded="urn:NSConfig")

class setscpolicy_delay:
    def __init__(self):
        self._name = None
        self._delay = None
        return
setscpolicy_delay.typecode = Struct(pname=("urn:NSConfig","setscpolicy_delay"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicy_delay, encoded="urn:NSConfig")

class setscpolicyResponse:
    def __init__(self):
        self._return = None
        return
setscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setscpolicy_delayResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicyResponse, encoded="urn:NSConfig")

class setscpolicy_maxconn:
    def __init__(self):
        self._name = None
        self._maxconn = None
        return
setscpolicy_maxconn.typecode = Struct(pname=("urn:NSConfig","setscpolicy_maxconn"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxconn", aname="_maxconn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicy_maxconn, encoded="urn:NSConfig")

class setscpolicyResponse:
    def __init__(self):
        self._return = None
        return
setscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setscpolicy_maxconnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicyResponse, encoded="urn:NSConfig")

class setscpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        self._altcontentsvcname = None
        self._altcontentpath = None
        return
setscpolicy_action.typecode = Struct(pname=("urn:NSConfig","setscpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.scactionEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="altcontentsvcname", aname="_altcontentsvcname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="altcontentpath", aname="_altcontentpath", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicy_action, encoded="urn:NSConfig")

class setscpolicyResponse:
    def __init__(self):
        self._return = None
        return
setscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setscpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setscpolicyResponse, encoded="urn:NSConfig")

class unsetscpolicy_delay:
    def __init__(self):
        self._name = None
        return
unsetscpolicy_delay.typecode = Struct(pname=("urn:NSConfig","unsetscpolicy_delay"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscpolicy_delay, encoded="urn:NSConfig")

class unsetscpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetscpolicy_delayResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscpolicyResponse, encoded="urn:NSConfig")

class unsetscpolicy_maxconn:
    def __init__(self):
        self._name = None
        return
unsetscpolicy_maxconn.typecode = Struct(pname=("urn:NSConfig","unsetscpolicy_maxconn"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscpolicy_maxconn, encoded="urn:NSConfig")

class unsetscpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetscpolicy_maxconnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetscpolicyResponse, encoded="urn:NSConfig")

class getscpolicy:
    def __init__(self):
        self._name = None
        return
getscpolicy.typecode = Struct(pname=("urn:NSConfig","getscpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getscpolicy, encoded="urn:NSConfig")

class getscpolicyResponse:
    def __init__(self):
        self._return = None
        return
getscpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getscpolicyResponse"), ofwhat=[ns0.getscpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getscpolicyResponse, encoded="urn:NSConfig")

class createsslwrapkey:
    def __init__(self):
        self._wrapkeyname = None
        self._password = None
        self._salt = None
        return
createsslwrapkey.typecode = Struct(pname=("urn:NSConfig","createsslwrapkey"), ofwhat=[ZSI.TC.String(pname="wrapkeyname", aname="_wrapkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="salt", aname="_salt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=createsslwrapkey, encoded="urn:NSConfig")

class createsslwrapkeyResponse:
    def __init__(self):
        self._return = None
        return
createsslwrapkeyResponse.typecode = Struct(pname=("urn:NSConfig","createsslwrapkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=createsslwrapkeyResponse, encoded="urn:NSConfig")

class createsslfipskey:
    def __init__(self):
        self._fipskeyname = None
        self._modulus = None
        self._exponent = None
        return
createsslfipskey.typecode = Struct(pname=("urn:NSConfig","createsslfipskey"), ofwhat=[ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="modulus", aname="_modulus", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.fipskeyexpEnum_Def(pname="exponent", aname="_exponent", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=createsslfipskey, encoded="urn:NSConfig")

class createsslfipskeyResponse:
    def __init__(self):
        self._return = None
        return
createsslfipskeyResponse.typecode = Struct(pname=("urn:NSConfig","createsslfipskeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=createsslfipskeyResponse, encoded="urn:NSConfig")

class getsslcertlink:
    def __init__(self):
        return
getsslcertlink.typecode = Struct(pname=("urn:NSConfig","getsslcertlink"), ofwhat=[], pyclass=getsslcertlink, encoded="urn:NSConfig")

class getsslcertlinkResponse:
    def __init__(self):
        self._return = None
        return
getsslcertlinkResponse.typecode = Struct(pname=("urn:NSConfig","getsslcertlinkResponse"), ofwhat=[ns0.getsslcertlinkResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcertlinkResponse, encoded="urn:NSConfig")

class bindsslcipher_vserver:
    def __init__(self):
        self._cipheraliasname = None
        self._cipheroperation = None
        self._vservername = None
        self._vserver = None
        return
bindsslcipher_vserver.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_vserver"), ofwhat=[ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ciphopEnum_Def(pname="cipheroperation", aname="_cipheroperation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="vserver", aname="_vserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipher_vserver, encoded="urn:NSConfig")

class bindsslcipherResponse:
    def __init__(self):
        self._return = None
        return
bindsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipherResponse, encoded="urn:NSConfig")

class bindsslcipher_service:
    def __init__(self):
        self._cipheraliasname = None
        self._cipheroperation = None
        self._servicename = None
        self._service = None
        return
bindsslcipher_service.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_service"), ofwhat=[ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ciphopEnum_Def(pname="cipheroperation", aname="_cipheroperation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="service", aname="_service", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipher_service, encoded="urn:NSConfig")

class bindsslcipherResponse:
    def __init__(self):
        self._return = None
        return
bindsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipherResponse, encoded="urn:NSConfig")

class bindsslcipher_servicegroup:
    def __init__(self):
        self._cipheraliasname = None
        self._cipheroperation = None
        self._servicegroupname = None
        return
bindsslcipher_servicegroup.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_servicegroup"), ofwhat=[ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ciphopEnum_Def(pname="cipheroperation", aname="_cipheroperation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipher_servicegroup, encoded="urn:NSConfig")

class bindsslcipherResponse:
    def __init__(self):
        self._return = None
        return
bindsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcipher_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcipherResponse, encoded="urn:NSConfig")

class getsslcipher:
    def __init__(self):
        self._cipheraliasname = None
        return
getsslcipher.typecode = Struct(pname=("urn:NSConfig","getsslcipher"), ofwhat=[ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcipher, encoded="urn:NSConfig")

class getsslcipherResponse:
    def __init__(self):
        self._return = None
        return
getsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","getsslcipherResponse"), ofwhat=[ns0.getsslcipherResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcipherResponse, encoded="urn:NSConfig")

class addsslcertkey:
    def __init__(self):
        self._certkeyname = None
        self._cert = None
        self._key = None
        self._password = None
        self._fipskey = None
        self._inform = None
        self._expirymonitor = None
        self._notificationperiod = None
        return
addsslcertkey.typecode = Struct(pname=("urn:NSConfig","addsslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cert", aname="_cert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="key", aname="_key", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fipskey", aname="_fipskey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.informatsEnum_Def(pname="inform", aname="_inform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="expirymonitor", aname="_expirymonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="notificationperiod", aname="_notificationperiod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcertkey, encoded="urn:NSConfig")

class addsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
addsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","addsslcertkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcertkeyResponse, encoded="urn:NSConfig")

class rmsslcertkey:
    def __init__(self):
        self._certkeyname = None
        return
rmsslcertkey.typecode = Struct(pname=("urn:NSConfig","rmsslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcertkey, encoded="urn:NSConfig")

class rmsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
rmsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","rmsslcertkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcertkeyResponse, encoded="urn:NSConfig")

class setsslcertkey_expirymonitor:
    def __init__(self):
        self._certkeyname = None
        self._expirymonitor = None
        self._notificationperiod = None
        return
setsslcertkey_expirymonitor.typecode = Struct(pname=("urn:NSConfig","setsslcertkey_expirymonitor"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="expirymonitor", aname="_expirymonitor", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="notificationperiod", aname="_notificationperiod", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcertkey_expirymonitor, encoded="urn:NSConfig")

class setsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
setsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","setsslcertkey_expirymonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcertkeyResponse, encoded="urn:NSConfig")

class unsetsslcertkey_expirymonitor:
    def __init__(self):
        self._certkeyname = None
        return
unsetsslcertkey_expirymonitor.typecode = Struct(pname=("urn:NSConfig","unsetsslcertkey_expirymonitor"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcertkey_expirymonitor, encoded="urn:NSConfig")

class unsetsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcertkey_expirymonitorResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcertkeyResponse, encoded="urn:NSConfig")

class unsetsslcertkey_notificationperiod:
    def __init__(self):
        self._certkeyname = None
        return
unsetsslcertkey_notificationperiod.typecode = Struct(pname=("urn:NSConfig","unsetsslcertkey_notificationperiod"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcertkey_notificationperiod, encoded="urn:NSConfig")

class unsetsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcertkey_notificationperiodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcertkeyResponse, encoded="urn:NSConfig")

class bindsslcertkey_vserver:
    def __init__(self):
        self._certkeyname = None
        self._vservername = None
        self._vserver = None
        return
bindsslcertkey_vserver.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_vserver"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="vserver", aname="_vserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkey_vserver, encoded="urn:NSConfig")

class bindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
bindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkeyResponse, encoded="urn:NSConfig")

class bindsslcertkey_service:
    def __init__(self):
        self._certkeyname = None
        self._servicename = None
        self._service = None
        return
bindsslcertkey_service.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_service"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="service", aname="_service", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkey_service, encoded="urn:NSConfig")

class bindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
bindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkeyResponse, encoded="urn:NSConfig")

class bindsslcertkey_servicegroup:
    def __init__(self):
        self._certkeyname = None
        self._servicegroupname = None
        return
bindsslcertkey_servicegroup.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_servicegroup"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkey_servicegroup, encoded="urn:NSConfig")

class bindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
bindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkeyResponse, encoded="urn:NSConfig")

class bindsslcertkey_ca:
    def __init__(self):
        self._certkeyname = None
        self._ca = None
        self._crlcheck = None
        return
bindsslcertkey_ca.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_ca"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crlcheckEnum_Def(pname="crlcheck", aname="_crlcheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkey_ca, encoded="urn:NSConfig")

class bindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
bindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","bindsslcertkey_caResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslcertkeyResponse, encoded="urn:NSConfig")

class unbindsslcertkey_vserver:
    def __init__(self):
        self._certkeyname = None
        self._vservername = None
        self._vserver = None
        return
unbindsslcertkey_vserver.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_vserver"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="vserver", aname="_vserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkey_vserver, encoded="urn:NSConfig")

class unbindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unbindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_vserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkeyResponse, encoded="urn:NSConfig")

class unbindsslcertkey_service:
    def __init__(self):
        self._certkeyname = None
        self._servicename = None
        self._service = None
        return
unbindsslcertkey_service.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_service"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="service", aname="_service", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkey_service, encoded="urn:NSConfig")

class unbindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unbindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_serviceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkeyResponse, encoded="urn:NSConfig")

class unbindsslcertkey_servicegroup:
    def __init__(self):
        self._certkeyname = None
        self._servicegroupname = None
        return
unbindsslcertkey_servicegroup.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_servicegroup"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkey_servicegroup, encoded="urn:NSConfig")

class unbindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unbindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_servicegroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkeyResponse, encoded="urn:NSConfig")

class unbindsslcertkey_ca:
    def __init__(self):
        self._certkeyname = None
        self._ca = None
        return
unbindsslcertkey_ca.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_ca"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkey_ca, encoded="urn:NSConfig")

class unbindsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unbindsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslcertkey_caResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslcertkeyResponse, encoded="urn:NSConfig")

class linksslcertkey:
    def __init__(self):
        self._certkeyname = None
        self._linkcertkeyname = None
        return
linksslcertkey.typecode = Struct(pname=("urn:NSConfig","linksslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkcertkeyname", aname="_linkcertkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=linksslcertkey, encoded="urn:NSConfig")

class linksslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
linksslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","linksslcertkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=linksslcertkeyResponse, encoded="urn:NSConfig")

class unlinksslcertkey:
    def __init__(self):
        self._certkeyname = None
        return
unlinksslcertkey.typecode = Struct(pname=("urn:NSConfig","unlinksslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unlinksslcertkey, encoded="urn:NSConfig")

class unlinksslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
unlinksslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","unlinksslcertkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unlinksslcertkeyResponse, encoded="urn:NSConfig")

class getsslcertkey:
    def __init__(self):
        self._certkeyname = None
        return
getsslcertkey.typecode = Struct(pname=("urn:NSConfig","getsslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcertkey, encoded="urn:NSConfig")

class getsslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
getsslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","getsslcertkeyResponse"), ofwhat=[ns0.getsslcertkeyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcertkeyResponse, encoded="urn:NSConfig")

class updatesslcertkey:
    def __init__(self):
        self._certkeyname = None
        self._cert = None
        self._key = None
        self._password = None
        self._fipskey = None
        self._inform = None
        self._nodomaincheck = None
        return
updatesslcertkey.typecode = Struct(pname=("urn:NSConfig","updatesslcertkey"), ofwhat=[ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cert", aname="_cert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="key", aname="_key", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="fipskey", aname="_fipskey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.informatsEnum_Def(pname="inform", aname="_inform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="nodomaincheck", aname="_nodomaincheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=updatesslcertkey, encoded="urn:NSConfig")

class updatesslcertkeyResponse:
    def __init__(self):
        self._return = None
        return
updatesslcertkeyResponse.typecode = Struct(pname=("urn:NSConfig","updatesslcertkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=updatesslcertkeyResponse, encoded="urn:NSConfig")

class addsslcipher:
    def __init__(self):
        self._ciphergroupname = None
        self._cipheraliasname = None
        return
addsslcipher.typecode = Struct(pname=("urn:NSConfig","addsslcipher"), ofwhat=[ZSI.TC.String(pname="ciphergroupname", aname="_ciphergroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcipher, encoded="urn:NSConfig")

class addsslcipherResponse:
    def __init__(self):
        self._return = None
        return
addsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","addsslcipherResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcipherResponse, encoded="urn:NSConfig")

class rmsslcipher:
    def __init__(self):
        self._ciphergroupname = None
        self._ciphername = None
        return
rmsslcipher.typecode = Struct(pname=("urn:NSConfig","rmsslcipher"), ofwhat=[ZSI.TC.String(pname="ciphergroupname", aname="_ciphergroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ciphername", aname="_ciphername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcipher, encoded="urn:NSConfig")

class rmsslcipherResponse:
    def __init__(self):
        self._return = None
        return
rmsslcipherResponse.typecode = Struct(pname=("urn:NSConfig","rmsslcipherResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcipherResponse, encoded="urn:NSConfig")

class setsslparameter_quantumsize:
    def __init__(self):
        self._quantumsize = None
        return
setsslparameter_quantumsize.typecode = Struct(pname=("urn:NSConfig","setsslparameter_quantumsize"), ofwhat=[ns0.ssl_params_quantumEnum_Def(pname="quantumsize", aname="_quantumsize", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameter_quantumsize, encoded="urn:NSConfig")

class setsslparameterResponse:
    def __init__(self):
        self._return = None
        return
setsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","setsslparameter_quantumsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameterResponse, encoded="urn:NSConfig")

class setsslparameter_crlmemorysizemb:
    def __init__(self):
        self._crlmemorysizemb = None
        return
setsslparameter_crlmemorysizemb.typecode = Struct(pname=("urn:NSConfig","setsslparameter_crlmemorysizemb"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="crlmemorysizemb", aname="_crlmemorysizemb", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameter_crlmemorysizemb, encoded="urn:NSConfig")

class setsslparameterResponse:
    def __init__(self):
        self._return = None
        return
setsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","setsslparameter_crlmemorysizembResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameterResponse, encoded="urn:NSConfig")

class setsslparameter_strictcachecks:
    def __init__(self):
        self._strictcachecks = None
        return
setsslparameter_strictcachecks.typecode = Struct(pname=("urn:NSConfig","setsslparameter_strictcachecks"), ofwhat=[ns0.yesnoEnum_Def(pname="strictcachecks", aname="_strictcachecks", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameter_strictcachecks, encoded="urn:NSConfig")

class setsslparameterResponse:
    def __init__(self):
        self._return = None
        return
setsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","setsslparameter_strictcachecksResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameterResponse, encoded="urn:NSConfig")

class setsslparameter_ssltriggertimeout:
    def __init__(self):
        self._ssltriggertimeout = None
        return
setsslparameter_ssltriggertimeout.typecode = Struct(pname=("urn:NSConfig","setsslparameter_ssltriggertimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="ssltriggertimeout", aname="_ssltriggertimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameter_ssltriggertimeout, encoded="urn:NSConfig")

class setsslparameterResponse:
    def __init__(self):
        self._return = None
        return
setsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","setsslparameter_ssltriggertimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameterResponse, encoded="urn:NSConfig")

class setsslparameter_sendclosenotify:
    def __init__(self):
        self._sendclosenotify = None
        return
setsslparameter_sendclosenotify.typecode = Struct(pname=("urn:NSConfig","setsslparameter_sendclosenotify"), ofwhat=[ns0.yesnoEnum_Def(pname="sendclosenotify", aname="_sendclosenotify", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameter_sendclosenotify, encoded="urn:NSConfig")

class setsslparameterResponse:
    def __init__(self):
        self._return = None
        return
setsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","setsslparameter_sendclosenotifyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslparameterResponse, encoded="urn:NSConfig")

class unsetsslparameter_quantumsize:
    def __init__(self):
        return
unsetsslparameter_quantumsize.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_quantumsize"), ofwhat=[], pyclass=unsetsslparameter_quantumsize, encoded="urn:NSConfig")

class unsetsslparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_quantumsizeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslparameterResponse, encoded="urn:NSConfig")

class unsetsslparameter_crlmemorysizemb:
    def __init__(self):
        return
unsetsslparameter_crlmemorysizemb.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_crlmemorysizemb"), ofwhat=[], pyclass=unsetsslparameter_crlmemorysizemb, encoded="urn:NSConfig")

class unsetsslparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_crlmemorysizembResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslparameterResponse, encoded="urn:NSConfig")

class unsetsslparameter_strictcachecks:
    def __init__(self):
        return
unsetsslparameter_strictcachecks.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_strictcachecks"), ofwhat=[], pyclass=unsetsslparameter_strictcachecks, encoded="urn:NSConfig")

class unsetsslparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_strictcachecksResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslparameterResponse, encoded="urn:NSConfig")

class unsetsslparameter_ssltriggertimeout:
    def __init__(self):
        return
unsetsslparameter_ssltriggertimeout.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_ssltriggertimeout"), ofwhat=[], pyclass=unsetsslparameter_ssltriggertimeout, encoded="urn:NSConfig")

class unsetsslparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_ssltriggertimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslparameterResponse, encoded="urn:NSConfig")

class unsetsslparameter_sendclosenotify:
    def __init__(self):
        return
unsetsslparameter_sendclosenotify.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_sendclosenotify"), ofwhat=[], pyclass=unsetsslparameter_sendclosenotify, encoded="urn:NSConfig")

class unsetsslparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslparameter_sendclosenotifyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslparameterResponse, encoded="urn:NSConfig")

class getsslparameter:
    def __init__(self):
        return
getsslparameter.typecode = Struct(pname=("urn:NSConfig","getsslparameter"), ofwhat=[], pyclass=getsslparameter, encoded="urn:NSConfig")

class getsslparameterResponse:
    def __init__(self):
        self._return = None
        return
getsslparameterResponse.typecode = Struct(pname=("urn:NSConfig","getsslparameterResponse"), ofwhat=[ns0.getsslparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslparameterResponse, encoded="urn:NSConfig")

class addsslcrl:
    def __init__(self):
        self._crlname = None
        self._crlpath = None
        self._inform = None
        return
addsslcrl.typecode = Struct(pname=("urn:NSConfig","addsslcrl"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="crlpath", aname="_crlpath", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.informatsEnum_Def(pname="inform", aname="_inform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcrl, encoded="urn:NSConfig")

class addsslcrlResponse:
    def __init__(self):
        self._return = None
        return
addsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","addsslcrlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslcrlResponse, encoded="urn:NSConfig")

class rmsslcrl:
    def __init__(self):
        self._crlname = None
        return
rmsslcrl.typecode = Struct(pname=("urn:NSConfig","rmsslcrl"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcrl, encoded="urn:NSConfig")

class rmsslcrlResponse:
    def __init__(self):
        self._return = None
        return
rmsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","rmsslcrlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_refresh:
    def __init__(self):
        self._crlname = None
        self._refresh = None
        return
setsslcrl_refresh.typecode = Struct(pname=("urn:NSConfig","setsslcrl_refresh"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="refresh", aname="_refresh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_refresh, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_refreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_cacert:
    def __init__(self):
        self._crlname = None
        self._cacert = None
        return
setsslcrl_cacert.typecode = Struct(pname=("urn:NSConfig","setsslcrl_cacert"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cacert", aname="_cacert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_cacert, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_cacertResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_server:
    def __init__(self):
        self._crlname = None
        self._server = None
        return
setsslcrl_server.typecode = Struct(pname=("urn:NSConfig","setsslcrl_server"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="server", aname="_server", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_server, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_serverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_method:
    def __init__(self):
        self._crlname = None
        self._method = None
        self._url = None
        return
setsslcrl_method.typecode = Struct(pname=("urn:NSConfig","setsslcrl_method"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.refreshmethodEnum_Def(pname="method", aname="_method", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_method, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_methodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_port:
    def __init__(self):
        self._crlname = None
        self._port = None
        return
setsslcrl_port.typecode = Struct(pname=("urn:NSConfig","setsslcrl_port"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_port, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_portResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_basedn:
    def __init__(self):
        self._crlname = None
        self._basedn = None
        return
setsslcrl_basedn.typecode = Struct(pname=("urn:NSConfig","setsslcrl_basedn"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="basedn", aname="_basedn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_basedn, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_basednResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_scope:
    def __init__(self):
        self._crlname = None
        self._scope = None
        return
setsslcrl_scope.typecode = Struct(pname=("urn:NSConfig","setsslcrl_scope"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ldapsrchscopeEnum_Def(pname="scope", aname="_scope", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_scope, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_scopeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_interval:
    def __init__(self):
        self._crlname = None
        self._interval = None
        return
setsslcrl_interval.typecode = Struct(pname=("urn:NSConfig","setsslcrl_interval"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.refreshintervlEnum_Def(pname="interval", aname="_interval", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_interval, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_intervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_day:
    def __init__(self):
        self._crlname = None
        self._day = None
        return
setsslcrl_day.typecode = Struct(pname=("urn:NSConfig","setsslcrl_day"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="day", aname="_day", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_day, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_dayResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_time:
    def __init__(self):
        self._crlname = None
        self._time = None
        return
setsslcrl_time.typecode = Struct(pname=("urn:NSConfig","setsslcrl_time"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="time", aname="_time", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_time, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_timeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_binddn:
    def __init__(self):
        self._crlname = None
        self._binddn = None
        return
setsslcrl_binddn.typecode = Struct(pname=("urn:NSConfig","setsslcrl_binddn"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="binddn", aname="_binddn", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_binddn, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_binddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_password:
    def __init__(self):
        self._crlname = None
        self._password = None
        return
setsslcrl_password.typecode = Struct(pname=("urn:NSConfig","setsslcrl_password"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_password, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class setsslcrl_binary:
    def __init__(self):
        self._crlname = None
        self._binary = None
        return
setsslcrl_binary.typecode = Struct(pname=("urn:NSConfig","setsslcrl_binary"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.yesnoEnum_Def(pname="binary", aname="_binary", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrl_binary, encoded="urn:NSConfig")

class setsslcrlResponse:
    def __init__(self):
        self._return = None
        return
setsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","setsslcrl_binaryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_refresh:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_refresh.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_refresh"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_refresh, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_refreshResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_cacert:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_cacert.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_cacert"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_cacert, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_cacertResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_server:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_server.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_server"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_server, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_serverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_method:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_method.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_method"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_method, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_methodResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_url:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_url.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_url"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_url, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_port:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_port.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_port"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_port, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_portResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_basedn:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_basedn.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_basedn"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_basedn, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_basednResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_scope:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_scope.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_scope"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_scope, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_scopeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_interval:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_interval.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_interval"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_interval, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_intervalResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_day:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_day.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_day"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_day, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_dayResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_time:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_time.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_time"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_time, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_timeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_binddn:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_binddn.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_binddn"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_binddn, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_binddnResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_password:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_password.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_password"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_password, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class unsetsslcrl_binary:
    def __init__(self):
        self._crlname = None
        return
unsetsslcrl_binary.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_binary"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrl_binary, encoded="urn:NSConfig")

class unsetsslcrlResponse:
    def __init__(self):
        self._return = None
        return
unsetsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslcrl_binaryResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslcrlResponse, encoded="urn:NSConfig")

class getsslcrl:
    def __init__(self):
        self._crlname = None
        return
getsslcrl.typecode = Struct(pname=("urn:NSConfig","getsslcrl"), ofwhat=[ZSI.TC.String(pname="crlname", aname="_crlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcrl, encoded="urn:NSConfig")

class getsslcrlResponse:
    def __init__(self):
        self._return = None
        return
getsslcrlResponse.typecode = Struct(pname=("urn:NSConfig","getsslcrlResponse"), ofwhat=[ns0.getsslcrlResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslcrlResponse, encoded="urn:NSConfig")

class setsslfips_inithsm:
    def __init__(self):
        self._sopassword = None
        self._oldsopassword = None
        self._userpassword = None
        self._inithsm = None
        return
setsslfips_inithsm.typecode = Struct(pname=("urn:NSConfig","setsslfips_inithsm"), ofwhat=[ZSI.TC.String(pname="sopassword", aname="_sopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="userpassword", aname="_userpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.fipsinitlevelEnum_Def(pname="inithsm", aname="_inithsm", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfips_inithsm, encoded="urn:NSConfig")

class setsslfipsResponse:
    def __init__(self):
        self._return = None
        return
setsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","setsslfips_inithsmResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfipsResponse, encoded="urn:NSConfig")

class setsslfips_sopassword:
    def __init__(self):
        self._inithsm = None
        self._oldsopassword = None
        self._userpassword = None
        self._sopassword = None
        return
setsslfips_sopassword.typecode = Struct(pname=("urn:NSConfig","setsslfips_sopassword"), ofwhat=[ns0.fipsinitlevelEnum_Def(pname="inithsm", aname="_inithsm", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="userpassword", aname="_userpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sopassword", aname="_sopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfips_sopassword, encoded="urn:NSConfig")

class setsslfipsResponse:
    def __init__(self):
        self._return = None
        return
setsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","setsslfips_sopasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfipsResponse, encoded="urn:NSConfig")

class setsslfips_oldsopassword:
    def __init__(self):
        self._inithsm = None
        self._sopassword = None
        self._userpassword = None
        self._oldsopassword = None
        return
setsslfips_oldsopassword.typecode = Struct(pname=("urn:NSConfig","setsslfips_oldsopassword"), ofwhat=[ns0.fipsinitlevelEnum_Def(pname="inithsm", aname="_inithsm", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sopassword", aname="_sopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="userpassword", aname="_userpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfips_oldsopassword, encoded="urn:NSConfig")

class setsslfipsResponse:
    def __init__(self):
        self._return = None
        return
setsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","setsslfips_oldsopasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfipsResponse, encoded="urn:NSConfig")

class setsslfips_userpassword:
    def __init__(self):
        self._inithsm = None
        self._sopassword = None
        self._oldsopassword = None
        self._userpassword = None
        return
setsslfips_userpassword.typecode = Struct(pname=("urn:NSConfig","setsslfips_userpassword"), ofwhat=[ns0.fipsinitlevelEnum_Def(pname="inithsm", aname="_inithsm", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sopassword", aname="_sopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="userpassword", aname="_userpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfips_userpassword, encoded="urn:NSConfig")

class setsslfipsResponse:
    def __init__(self):
        self._return = None
        return
setsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","setsslfips_userpasswordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfipsResponse, encoded="urn:NSConfig")

class setsslfips_hsmlabel:
    def __init__(self):
        self._inithsm = None
        self._sopassword = None
        self._oldsopassword = None
        self._userpassword = None
        self._hsmlabel = None
        return
setsslfips_hsmlabel.typecode = Struct(pname=("urn:NSConfig","setsslfips_hsmlabel"), ofwhat=[ns0.fipsinitlevelEnum_Def(pname="inithsm", aname="_inithsm", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sopassword", aname="_sopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="userpassword", aname="_userpassword", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hsmlabel", aname="_hsmlabel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfips_hsmlabel, encoded="urn:NSConfig")

class setsslfipsResponse:
    def __init__(self):
        self._return = None
        return
setsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","setsslfips_hsmlabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslfipsResponse, encoded="urn:NSConfig")

class unsetsslfips_hsmlabel:
    def __init__(self):
        return
unsetsslfips_hsmlabel.typecode = Struct(pname=("urn:NSConfig","unsetsslfips_hsmlabel"), ofwhat=[], pyclass=unsetsslfips_hsmlabel, encoded="urn:NSConfig")

class unsetsslfipsResponse:
    def __init__(self):
        self._return = None
        return
unsetsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslfips_hsmlabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslfipsResponse, encoded="urn:NSConfig")

class resetsslfips:
    def __init__(self):
        return
resetsslfips.typecode = Struct(pname=("urn:NSConfig","resetsslfips"), ofwhat=[], pyclass=resetsslfips, encoded="urn:NSConfig")

class resetsslfipsResponse:
    def __init__(self):
        self._return = None
        return
resetsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","resetsslfipsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=resetsslfipsResponse, encoded="urn:NSConfig")

class getsslfips:
    def __init__(self):
        return
getsslfips.typecode = Struct(pname=("urn:NSConfig","getsslfips"), ofwhat=[], pyclass=getsslfips, encoded="urn:NSConfig")

class getsslfipsResponse:
    def __init__(self):
        self._return = None
        return
getsslfipsResponse.typecode = Struct(pname=("urn:NSConfig","getsslfipsResponse"), ofwhat=[ns0.getsslfipsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslfipsResponse, encoded="urn:NSConfig")

class rmsslfipskey:
    def __init__(self):
        self._fipskeyname = None
        return
rmsslfipskey.typecode = Struct(pname=("urn:NSConfig","rmsslfipskey"), ofwhat=[ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslfipskey, encoded="urn:NSConfig")

class rmsslfipskeyResponse:
    def __init__(self):
        self._return = None
        return
rmsslfipskeyResponse.typecode = Struct(pname=("urn:NSConfig","rmsslfipskeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslfipskeyResponse, encoded="urn:NSConfig")

class getsslfipskey:
    def __init__(self):
        self._fipskeyname = None
        return
getsslfipskey.typecode = Struct(pname=("urn:NSConfig","getsslfipskey"), ofwhat=[ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslfipskey, encoded="urn:NSConfig")

class getsslfipskeyResponse:
    def __init__(self):
        self._return = None
        return
getsslfipskeyResponse.typecode = Struct(pname=("urn:NSConfig","getsslfipskeyResponse"), ofwhat=[ns0.getsslfipskeyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslfipskeyResponse, encoded="urn:NSConfig")

class importsslfipskey:
    def __init__(self):
        self._fipskeyname = None
        self._key = None
        self._inform = None
        self._wrapkeyname = None
        self._iv = None
        return
importsslfipskey.typecode = Struct(pname=("urn:NSConfig","importsslfipskey"), ofwhat=[ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="key", aname="_key", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.fipskeyinformEnum_Def(pname="inform", aname="_inform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="wrapkeyname", aname="_wrapkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="iv", aname="_iv", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=importsslfipskey, encoded="urn:NSConfig")

class importsslfipskeyResponse:
    def __init__(self):
        self._return = None
        return
importsslfipskeyResponse.typecode = Struct(pname=("urn:NSConfig","importsslfipskeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=importsslfipskeyResponse, encoded="urn:NSConfig")

class exportsslfipskey:
    def __init__(self):
        self._fipskeyname = None
        self._key = None
        return
exportsslfipskey.typecode = Struct(pname=("urn:NSConfig","exportsslfipskey"), ofwhat=[ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="key", aname="_key", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=exportsslfipskey, encoded="urn:NSConfig")

class exportsslfipskeyResponse:
    def __init__(self):
        self._return = None
        return
exportsslfipskeyResponse.typecode = Struct(pname=("urn:NSConfig","exportsslfipskeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=exportsslfipskeyResponse, encoded="urn:NSConfig")

class setsslservice_dh:
    def __init__(self):
        self._servicename = None
        self._dh = None
        self._dhfile = None
        return
setsslservice_dh.typecode = Struct(pname=("urn:NSConfig","setsslservice_dh"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="dh", aname="_dh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dhfile", aname="_dhfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_dh, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_dhResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_dhcount:
    def __init__(self):
        self._servicename = None
        self._dhcount = None
        return
setsslservice_dhcount.typecode = Struct(pname=("urn:NSConfig","setsslservice_dhcount"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="dhcount", aname="_dhcount", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_dhcount, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_dhcountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_ersa:
    def __init__(self):
        self._servicename = None
        self._ersa = None
        self._ersacount = None
        return
setsslservice_ersa.typecode = Struct(pname=("urn:NSConfig","setsslservice_ersa"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ersa", aname="_ersa", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ersacount", aname="_ersacount", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_ersa, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_ersaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_sessreuse:
    def __init__(self):
        self._servicename = None
        self._sessreuse = None
        self._sesstimeout = None
        return
setsslservice_sessreuse.typecode = Struct(pname=("urn:NSConfig","setsslservice_sessreuse"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessreuse", aname="_sessreuse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_sessreuse, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_cipherredirect:
    def __init__(self):
        self._servicename = None
        self._cipherredirect = None
        self._cipherurl = None
        return
setsslservice_cipherredirect.typecode = Struct(pname=("urn:NSConfig","setsslservice_cipherredirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="cipherredirect", aname="_cipherredirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipherurl", aname="_cipherurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_cipherredirect, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_cipherredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_sslv2redirect:
    def __init__(self):
        self._servicename = None
        self._sslv2redirect = None
        self._sslv2url = None
        return
setsslservice_sslv2redirect.typecode = Struct(pname=("urn:NSConfig","setsslservice_sslv2redirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sslv2redirect", aname="_sslv2redirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sslv2url", aname="_sslv2url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_sslv2redirect, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_sslv2redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_clientauth:
    def __init__(self):
        self._servicename = None
        self._clientauth = None
        self._clientcert = None
        return
setsslservice_clientauth.typecode = Struct(pname=("urn:NSConfig","setsslservice_clientauth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="clientauth", aname="_clientauth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.client_authcertEnum_Def(pname="clientcert", aname="_clientcert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_clientauth, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_clientauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_sslredirect:
    def __init__(self):
        self._servicename = None
        self._sslredirect = None
        return
setsslservice_sslredirect.typecode = Struct(pname=("urn:NSConfig","setsslservice_sslredirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sslredirect", aname="_sslredirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_sslredirect, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_sslredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_redirectportrewrite:
    def __init__(self):
        self._servicename = None
        self._redirectportrewrite = None
        return
setsslservice_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","setsslservice_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="redirectportrewrite", aname="_redirectportrewrite", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_redirectportrewrite, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_nonfipsciphers:
    def __init__(self):
        self._servicename = None
        self._nonfipsciphers = None
        return
setsslservice_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","setsslservice_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="nonfipsciphers", aname="_nonfipsciphers", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_nonfipsciphers, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_ssl2:
    def __init__(self):
        self._servicename = None
        self._ssl2 = None
        return
setsslservice_ssl2.typecode = Struct(pname=("urn:NSConfig","setsslservice_ssl2"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssl2", aname="_ssl2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_ssl2, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_ssl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_ssl3:
    def __init__(self):
        self._servicename = None
        self._ssl3 = None
        return
setsslservice_ssl3.typecode = Struct(pname=("urn:NSConfig","setsslservice_ssl3"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssl3", aname="_ssl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_ssl3, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_tls1:
    def __init__(self):
        self._servicename = None
        self._tls1 = None
        return
setsslservice_tls1.typecode = Struct(pname=("urn:NSConfig","setsslservice_tls1"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="tls1", aname="_tls1", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_tls1, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class setsslservice_serverauth:
    def __init__(self):
        self._servicename = None
        self._serverauth = None
        return
setsslservice_serverauth.typecode = Struct(pname=("urn:NSConfig","setsslservice_serverauth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="serverauth", aname="_serverauth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservice_serverauth, encoded="urn:NSConfig")

class setsslserviceResponse:
    def __init__(self):
        self._return = None
        return
setsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","setsslservice_serverauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_dh:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_dh.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dh"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_dh, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dhResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_dhfile:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_dhfile.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dhfile"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_dhfile, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dhfileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_dhcount:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_dhcount.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dhcount"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_dhcount, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_dhcountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_ersa:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_ersa.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ersa"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_ersa, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ersaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_ersacount:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_ersacount.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ersacount"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_ersacount, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ersacountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_sessreuse:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_sessreuse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sessreuse"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_sessreuse, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_sesstimeout:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_sesstimeout.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sesstimeout"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_sesstimeout, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_cipherredirect:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_cipherredirect.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_cipherredirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_cipherredirect, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_cipherredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_cipherurl:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_cipherurl.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_cipherurl"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_cipherurl, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_cipherurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_sslv2redirect:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_sslv2redirect.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslv2redirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_sslv2redirect, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslv2redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_sslv2url:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_sslv2url.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslv2url"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_sslv2url, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslv2urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_clientauth:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_clientauth.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_clientauth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_clientauth, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_clientauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_clientcert:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_clientcert.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_clientcert"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_clientcert, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_clientcertResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_sslredirect:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_sslredirect.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslredirect"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_sslredirect, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_sslredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_redirectportrewrite:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_redirectportrewrite, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_nonfipsciphers:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_nonfipsciphers, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_ssl2:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_ssl2.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ssl2"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_ssl2, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ssl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_ssl3:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_ssl3.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ssl3"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_ssl3, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_tls1:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_tls1.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_tls1"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_tls1, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class unsetsslservice_serverauth:
    def __init__(self):
        self._servicename = None
        return
unsetsslservice_serverauth.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_serverauth"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservice_serverauth, encoded="urn:NSConfig")

class unsetsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unsetsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservice_serverauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslserviceResponse, encoded="urn:NSConfig")

class bindsslservice_policyname:
    def __init__(self):
        self._servicename = None
        self._policyname = None
        self._priority = None
        return
bindsslservice_policyname.typecode = Struct(pname=("urn:NSConfig","bindsslservice_policyname"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslservice_policyname, encoded="urn:NSConfig")

class bindsslserviceResponse:
    def __init__(self):
        self._return = None
        return
bindsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","bindsslservice_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslserviceResponse, encoded="urn:NSConfig")

class bindsslservice_certkeyname:
    def __init__(self):
        self._servicename = None
        self._certkeyname = None
        self._ca = None
        self._crlcheck = None
        return
bindsslservice_certkeyname.typecode = Struct(pname=("urn:NSConfig","bindsslservice_certkeyname"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crlcheckEnum_Def(pname="crlcheck", aname="_crlcheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslservice_certkeyname, encoded="urn:NSConfig")

class bindsslserviceResponse:
    def __init__(self):
        self._return = None
        return
bindsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","bindsslservice_certkeynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslserviceResponse, encoded="urn:NSConfig")

class unbindsslservice_policyname:
    def __init__(self):
        self._servicename = None
        self._policyname = None
        return
unbindsslservice_policyname.typecode = Struct(pname=("urn:NSConfig","unbindsslservice_policyname"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslservice_policyname, encoded="urn:NSConfig")

class unbindsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unbindsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslservice_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslserviceResponse, encoded="urn:NSConfig")

class unbindsslservice_certkeyname:
    def __init__(self):
        self._servicename = None
        self._certkeyname = None
        self._ca = None
        self._crlcheck = None
        return
unbindsslservice_certkeyname.typecode = Struct(pname=("urn:NSConfig","unbindsslservice_certkeyname"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crlcheckEnum_Def(pname="crlcheck", aname="_crlcheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslservice_certkeyname, encoded="urn:NSConfig")

class unbindsslserviceResponse:
    def __init__(self):
        self._return = None
        return
unbindsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslservice_certkeynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslserviceResponse, encoded="urn:NSConfig")

class getsslservice:
    def __init__(self):
        self._servicename = None
        self._cipherdetails = None
        return
getsslservice.typecode = Struct(pname=("urn:NSConfig","getsslservice"), ofwhat=[ZSI.TC.String(pname="servicename", aname="_servicename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslservice, encoded="urn:NSConfig")

class getsslserviceResponse:
    def __init__(self):
        self._return = None
        return
getsslserviceResponse.typecode = Struct(pname=("urn:NSConfig","getsslserviceResponse"), ofwhat=[ns0.getsslserviceResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslserviceResponse, encoded="urn:NSConfig")

class setsslservicegroup_sessreuse:
    def __init__(self):
        self._servicegroupname = None
        self._sessreuse = None
        self._sesstimeout = None
        return
setsslservicegroup_sessreuse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_sessreuse"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessreuse", aname="_sessreuse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroup_sessreuse, encoded="urn:NSConfig")

class setsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroupResponse, encoded="urn:NSConfig")

class setsslservicegroup_nonfipsciphers:
    def __init__(self):
        self._servicegroupname = None
        self._nonfipsciphers = None
        return
setsslservicegroup_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="nonfipsciphers", aname="_nonfipsciphers", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroup_nonfipsciphers, encoded="urn:NSConfig")

class setsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroupResponse, encoded="urn:NSConfig")

class setsslservicegroup_ssl3:
    def __init__(self):
        self._servicegroupname = None
        self._ssl3 = None
        return
setsslservicegroup_ssl3.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_ssl3"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssl3", aname="_ssl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroup_ssl3, encoded="urn:NSConfig")

class setsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroupResponse, encoded="urn:NSConfig")

class setsslservicegroup_tls1:
    def __init__(self):
        self._servicegroupname = None
        self._tls1 = None
        return
setsslservicegroup_tls1.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_tls1"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="tls1", aname="_tls1", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroup_tls1, encoded="urn:NSConfig")

class setsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroupResponse, encoded="urn:NSConfig")

class setsslservicegroup_serverauth:
    def __init__(self):
        self._servicegroupname = None
        self._serverauth = None
        return
setsslservicegroup_serverauth.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_serverauth"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="serverauth", aname="_serverauth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroup_serverauth, encoded="urn:NSConfig")

class setsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
setsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","setsslservicegroup_serverauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_sessreuse:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_sessreuse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_sessreuse"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_sessreuse, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_sesstimeout:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_sesstimeout.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_sesstimeout"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_sesstimeout, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_nonfipsciphers:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_nonfipsciphers, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_ssl3:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_ssl3.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_ssl3"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_ssl3, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_tls1:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_tls1.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_tls1"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_tls1, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class unsetsslservicegroup_serverauth:
    def __init__(self):
        self._servicegroupname = None
        return
unsetsslservicegroup_serverauth.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_serverauth"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroup_serverauth, encoded="urn:NSConfig")

class unsetsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
unsetsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslservicegroup_serverauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslservicegroupResponse, encoded="urn:NSConfig")

class getsslservicegroup:
    def __init__(self):
        self._servicegroupname = None
        self._cipherdetails = None
        return
getsslservicegroup.typecode = Struct(pname=("urn:NSConfig","getsslservicegroup"), ofwhat=[ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslservicegroup, encoded="urn:NSConfig")

class getsslservicegroupResponse:
    def __init__(self):
        self._return = None
        return
getsslservicegroupResponse.typecode = Struct(pname=("urn:NSConfig","getsslservicegroupResponse"), ofwhat=[ns0.getsslservicegroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslservicegroupResponse, encoded="urn:NSConfig")

class setsslvserver_cleartextport:
    def __init__(self):
        self._vservername = None
        self._cleartextport = None
        return
setsslvserver_cleartextport.typecode = Struct(pname=("urn:NSConfig","setsslvserver_cleartextport"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_cleartextport, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_cleartextportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_dh:
    def __init__(self):
        self._vservername = None
        self._dh = None
        self._dhfile = None
        return
setsslvserver_dh.typecode = Struct(pname=("urn:NSConfig","setsslvserver_dh"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="dh", aname="_dh", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dhfile", aname="_dhfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_dh, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_dhResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_dhcount:
    def __init__(self):
        self._vservername = None
        self._dhcount = None
        return
setsslvserver_dhcount.typecode = Struct(pname=("urn:NSConfig","setsslvserver_dhcount"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="dhcount", aname="_dhcount", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_dhcount, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_dhcountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_ersa:
    def __init__(self):
        self._vservername = None
        self._ersa = None
        self._ersacount = None
        return
setsslvserver_ersa.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ersa"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ersa", aname="_ersa", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="ersacount", aname="_ersacount", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_ersa, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ersaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_sessreuse:
    def __init__(self):
        self._vservername = None
        self._sessreuse = None
        self._sesstimeout = None
        return
setsslvserver_sessreuse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sessreuse"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sessreuse", aname="_sessreuse", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_sessreuse, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_cipherredirect:
    def __init__(self):
        self._vservername = None
        self._cipherredirect = None
        self._cipherurl = None
        return
setsslvserver_cipherredirect.typecode = Struct(pname=("urn:NSConfig","setsslvserver_cipherredirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="cipherredirect", aname="_cipherredirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipherurl", aname="_cipherurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_cipherredirect, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_cipherredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_sslv2redirect:
    def __init__(self):
        self._vservername = None
        self._sslv2redirect = None
        self._sslv2url = None
        return
setsslvserver_sslv2redirect.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sslv2redirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sslv2redirect", aname="_sslv2redirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sslv2url", aname="_sslv2url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_sslv2redirect, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sslv2redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_clientauth:
    def __init__(self):
        self._vservername = None
        self._clientauth = None
        self._clientcert = None
        return
setsslvserver_clientauth.typecode = Struct(pname=("urn:NSConfig","setsslvserver_clientauth"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="clientauth", aname="_clientauth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.client_authcertEnum_Def(pname="clientcert", aname="_clientcert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_clientauth, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_clientauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_sslredirect:
    def __init__(self):
        self._vservername = None
        self._sslredirect = None
        return
setsslvserver_sslredirect.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sslredirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="sslredirect", aname="_sslredirect", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_sslredirect, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_sslredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_redirectportrewrite:
    def __init__(self):
        self._vservername = None
        self._redirectportrewrite = None
        return
setsslvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","setsslvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="redirectportrewrite", aname="_redirectportrewrite", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_redirectportrewrite, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_nonfipsciphers:
    def __init__(self):
        self._vservername = None
        self._nonfipsciphers = None
        return
setsslvserver_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","setsslvserver_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="nonfipsciphers", aname="_nonfipsciphers", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_nonfipsciphers, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_ssl2:
    def __init__(self):
        self._vservername = None
        self._ssl2 = None
        return
setsslvserver_ssl2.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ssl2"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssl2", aname="_ssl2", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_ssl2, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ssl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_ssl3:
    def __init__(self):
        self._vservername = None
        self._ssl3 = None
        return
setsslvserver_ssl3.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ssl3"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="ssl3", aname="_ssl3", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_ssl3, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class setsslvserver_tls1:
    def __init__(self):
        self._vservername = None
        self._tls1 = None
        return
setsslvserver_tls1.typecode = Struct(pname=("urn:NSConfig","setsslvserver_tls1"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="tls1", aname="_tls1", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserver_tls1, encoded="urn:NSConfig")

class setsslvserverResponse:
    def __init__(self):
        self._return = None
        return
setsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","setsslvserver_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_cleartextport:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_cleartextport.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cleartextport"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_cleartextport, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cleartextportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_dh:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_dh.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dh"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_dh, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dhResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_dhfile:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_dhfile.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dhfile"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_dhfile, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dhfileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_dhcount:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_dhcount.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dhcount"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_dhcount, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_dhcountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_ersa:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_ersa.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ersa"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_ersa, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ersaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_ersacount:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_ersacount.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ersacount"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_ersacount, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ersacountResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_sessreuse:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_sessreuse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sessreuse"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_sessreuse, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sessreuseResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_sesstimeout:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_sesstimeout.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sesstimeout"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_sesstimeout, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_cipherredirect:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_cipherredirect.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cipherredirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_cipherredirect, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cipherredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_cipherurl:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_cipherurl.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cipherurl"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_cipherurl, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_cipherurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_sslv2redirect:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_sslv2redirect.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslv2redirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_sslv2redirect, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslv2redirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_sslv2url:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_sslv2url.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslv2url"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_sslv2url, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslv2urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_clientauth:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_clientauth.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_clientauth"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_clientauth, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_clientauthResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_clientcert:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_clientcert.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_clientcert"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_clientcert, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_clientcertResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_sslredirect:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_sslredirect.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslredirect"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_sslredirect, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_sslredirectResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_redirectportrewrite:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_redirectportrewrite.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_redirectportrewrite"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_redirectportrewrite, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_redirectportrewriteResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_nonfipsciphers:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_nonfipsciphers.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_nonfipsciphers"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_nonfipsciphers, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_nonfipsciphersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_ssl2:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_ssl2.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ssl2"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_ssl2, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ssl2Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_ssl3:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_ssl3.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ssl3"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_ssl3, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_ssl3Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class unsetsslvserver_tls1:
    def __init__(self):
        self._vservername = None
        return
unsetsslvserver_tls1.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_tls1"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserver_tls1, encoded="urn:NSConfig")

class unsetsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetsslvserver_tls1Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetsslvserverResponse, encoded="urn:NSConfig")

class bindsslvserver_policyname:
    def __init__(self):
        self._vservername = None
        self._policyname = None
        self._priority = None
        return
bindsslvserver_policyname.typecode = Struct(pname=("urn:NSConfig","bindsslvserver_policyname"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslvserver_policyname, encoded="urn:NSConfig")

class bindsslvserverResponse:
    def __init__(self):
        self._return = None
        return
bindsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindsslvserver_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslvserverResponse, encoded="urn:NSConfig")

class bindsslvserver_certkeyname:
    def __init__(self):
        self._vservername = None
        self._certkeyname = None
        self._ca = None
        self._crlcheck = None
        return
bindsslvserver_certkeyname.typecode = Struct(pname=("urn:NSConfig","bindsslvserver_certkeyname"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crlcheckEnum_Def(pname="crlcheck", aname="_crlcheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslvserver_certkeyname, encoded="urn:NSConfig")

class bindsslvserverResponse:
    def __init__(self):
        self._return = None
        return
bindsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindsslvserver_certkeynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslvserverResponse, encoded="urn:NSConfig")

class unbindsslvserver_policyname:
    def __init__(self):
        self._vservername = None
        self._policyname = None
        return
unbindsslvserver_policyname.typecode = Struct(pname=("urn:NSConfig","unbindsslvserver_policyname"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslvserver_policyname, encoded="urn:NSConfig")

class unbindsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslvserver_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslvserverResponse, encoded="urn:NSConfig")

class unbindsslvserver_certkeyname:
    def __init__(self):
        self._vservername = None
        self._certkeyname = None
        self._ca = None
        self._crlcheck = None
        return
unbindsslvserver_certkeyname.typecode = Struct(pname=("urn:NSConfig","unbindsslvserver_certkeyname"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ca", aname="_ca", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.crlcheckEnum_Def(pname="crlcheck", aname="_crlcheck", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslvserver_certkeyname, encoded="urn:NSConfig")

class unbindsslvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslvserver_certkeynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslvserverResponse, encoded="urn:NSConfig")

class getsslvserver:
    def __init__(self):
        self._vservername = None
        self._cipherdetails = None
        return
getsslvserver.typecode = Struct(pname=("urn:NSConfig","getsslvserver"), ofwhat=[ZSI.TC.String(pname="vservername", aname="_vservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslvserver, encoded="urn:NSConfig")

class getsslvserverResponse:
    def __init__(self):
        self._return = None
        return
getsslvserverResponse.typecode = Struct(pname=("urn:NSConfig","getsslvserverResponse"), ofwhat=[ns0.getsslvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslvserverResponse, encoded="urn:NSConfig")

class rmsslwrapkey:
    def __init__(self):
        self._wrapkeyname = None
        return
rmsslwrapkey.typecode = Struct(pname=("urn:NSConfig","rmsslwrapkey"), ofwhat=[ZSI.TC.String(pname="wrapkeyname", aname="_wrapkeyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslwrapkey, encoded="urn:NSConfig")

class rmsslwrapkeyResponse:
    def __init__(self):
        self._return = None
        return
rmsslwrapkeyResponse.typecode = Struct(pname=("urn:NSConfig","rmsslwrapkeyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslwrapkeyResponse, encoded="urn:NSConfig")

class getsslwrapkey:
    def __init__(self):
        return
getsslwrapkey.typecode = Struct(pname=("urn:NSConfig","getsslwrapkey"), ofwhat=[], pyclass=getsslwrapkey, encoded="urn:NSConfig")

class getsslwrapkeyResponse:
    def __init__(self):
        self._return = None
        return
getsslwrapkeyResponse.typecode = Struct(pname=("urn:NSConfig","getsslwrapkeyResponse"), ofwhat=[ns0.getsslwrapkeyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslwrapkeyResponse, encoded="urn:NSConfig")

class enablesslfipssimtarget:
    def __init__(self):
        self._keyvector = None
        self._sourcesecret = None
        return
enablesslfipssimtarget.typecode = Struct(pname=("urn:NSConfig","enablesslfipssimtarget"), ofwhat=[ZSI.TC.String(pname="keyvector", aname="_keyvector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sourcesecret", aname="_sourcesecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesslfipssimtarget, encoded="urn:NSConfig")

class enablesslfipssimtargetResponse:
    def __init__(self):
        self._return = None
        return
enablesslfipssimtargetResponse.typecode = Struct(pname=("urn:NSConfig","enablesslfipssimtargetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesslfipssimtargetResponse, encoded="urn:NSConfig")

class initsslfipssimtarget:
    def __init__(self):
        self._certfile = None
        self._keyvector = None
        self._targetsecret = None
        return
initsslfipssimtarget.typecode = Struct(pname=("urn:NSConfig","initsslfipssimtarget"), ofwhat=[ZSI.TC.String(pname="certfile", aname="_certfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="keyvector", aname="_keyvector", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="targetsecret", aname="_targetsecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=initsslfipssimtarget, encoded="urn:NSConfig")

class initsslfipssimtargetResponse:
    def __init__(self):
        self._return = None
        return
initsslfipssimtargetResponse.typecode = Struct(pname=("urn:NSConfig","initsslfipssimtargetResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=initsslfipssimtargetResponse, encoded="urn:NSConfig")

class enablesslfipssimsource:
    def __init__(self):
        self._targetsecret = None
        self._sourcesecret = None
        return
enablesslfipssimsource.typecode = Struct(pname=("urn:NSConfig","enablesslfipssimsource"), ofwhat=[ZSI.TC.String(pname="targetsecret", aname="_targetsecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sourcesecret", aname="_sourcesecret", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesslfipssimsource, encoded="urn:NSConfig")

class enablesslfipssimsourceResponse:
    def __init__(self):
        self._return = None
        return
enablesslfipssimsourceResponse.typecode = Struct(pname=("urn:NSConfig","enablesslfipssimsourceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablesslfipssimsourceResponse, encoded="urn:NSConfig")

class initsslfipssimsource:
    def __init__(self):
        self._certfile = None
        return
initsslfipssimsource.typecode = Struct(pname=("urn:NSConfig","initsslfipssimsource"), ofwhat=[ZSI.TC.String(pname="certfile", aname="_certfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=initsslfipssimsource, encoded="urn:NSConfig")

class initsslfipssimsourceResponse:
    def __init__(self):
        self._return = None
        return
initsslfipssimsourceResponse.typecode = Struct(pname=("urn:NSConfig","initsslfipssimsourceResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=initsslfipssimsourceResponse, encoded="urn:NSConfig")

class addsslaction:
    def __init__(self):
        self._name = None
        self._clientauth = None
        self._clientcert = None
        self._certheader = None
        self._clientcertserialnumber = None
        self._certserialheader = None
        self._clientcertsubject = None
        self._certsubjectheader = None
        self._clientcerthash = None
        self._certhashheader = None
        self._clientcertissuer = None
        self._certissuerheader = None
        self._sessionid = None
        self._sessionidheader = None
        self._cipher = None
        self._cipherheader = None
        self._clientcertnotbefore = None
        self._certnotbeforeheader = None
        self._clientcertnotafter = None
        self._certnotafterheader = None
        self._owasupport = None
        return
addsslaction.typecode = Struct(pname=("urn:NSConfig","addsslaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.clntauthEnum_Def(pname="clientauth", aname="_clientauth", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcert", aname="_clientcert", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certheader", aname="_certheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcertserialnumber", aname="_clientcertserialnumber", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certserialheader", aname="_certserialheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcertsubject", aname="_clientcertsubject", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certsubjectheader", aname="_certsubjectheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcerthash", aname="_clientcerthash", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certhashheader", aname="_certhashheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcertissuer", aname="_clientcertissuer", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certissuerheader", aname="_certissuerheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="sessionid", aname="_sessionid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionidheader", aname="_sessionidheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="cipher", aname="_cipher", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cipherheader", aname="_cipherheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcertnotbefore", aname="_clientcertnotbefore", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certnotbeforeheader", aname="_certnotbeforeheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="clientcertnotafter", aname="_clientcertnotafter", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="certnotafterheader", aname="_certnotafterheader", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisablednzEnum_Def(pname="owasupport", aname="_owasupport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslaction, encoded="urn:NSConfig")

class addsslactionResponse:
    def __init__(self):
        self._return = None
        return
addsslactionResponse.typecode = Struct(pname=("urn:NSConfig","addsslactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslactionResponse, encoded="urn:NSConfig")

class rmsslaction:
    def __init__(self):
        self._name = None
        return
rmsslaction.typecode = Struct(pname=("urn:NSConfig","rmsslaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslaction, encoded="urn:NSConfig")

class rmsslactionResponse:
    def __init__(self):
        self._return = None
        return
rmsslactionResponse.typecode = Struct(pname=("urn:NSConfig","rmsslactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslactionResponse, encoded="urn:NSConfig")

class getsslaction:
    def __init__(self):
        self._name = None
        return
getsslaction.typecode = Struct(pname=("urn:NSConfig","getsslaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslaction, encoded="urn:NSConfig")

class getsslactionResponse:
    def __init__(self):
        self._return = None
        return
getsslactionResponse.typecode = Struct(pname=("urn:NSConfig","getsslactionResponse"), ofwhat=[ns0.getsslactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslactionResponse, encoded="urn:NSConfig")

class addsslpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._reqaction = None
        return
addsslpolicy.typecode = Struct(pname=("urn:NSConfig","addsslpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqaction", aname="_reqaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslpolicy, encoded="urn:NSConfig")

class addsslpolicyResponse:
    def __init__(self):
        self._return = None
        return
addsslpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addsslpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsslpolicyResponse, encoded="urn:NSConfig")

class rmsslpolicy:
    def __init__(self):
        self._name = None
        return
rmsslpolicy.typecode = Struct(pname=("urn:NSConfig","rmsslpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslpolicy, encoded="urn:NSConfig")

class rmsslpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmsslpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmsslpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsslpolicyResponse, encoded="urn:NSConfig")

class getsslpolicy:
    def __init__(self):
        self._name = None
        return
getsslpolicy.typecode = Struct(pname=("urn:NSConfig","getsslpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslpolicy, encoded="urn:NSConfig")

class getsslpolicyResponse:
    def __init__(self):
        self._return = None
        return
getsslpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getsslpolicyResponse"), ofwhat=[ns0.getsslpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslpolicyResponse, encoded="urn:NSConfig")

class bindsslglobal_policyname:
    def __init__(self):
        self._policyname = None
        self._priority = None
        return
bindsslglobal_policyname.typecode = Struct(pname=("urn:NSConfig","bindsslglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslglobal_policyname, encoded="urn:NSConfig")

class bindsslglobalResponse:
    def __init__(self):
        self._return = None
        return
bindsslglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindsslglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsslglobalResponse, encoded="urn:NSConfig")

class unbindsslglobal_policyname:
    def __init__(self):
        self._policyname = None
        return
unbindsslglobal_policyname.typecode = Struct(pname=("urn:NSConfig","unbindsslglobal_policyname"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslglobal_policyname, encoded="urn:NSConfig")

class unbindsslglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindsslglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindsslglobal_policynameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsslglobalResponse, encoded="urn:NSConfig")

class getsslglobal:
    def __init__(self):
        return
getsslglobal.typecode = Struct(pname=("urn:NSConfig","getsslglobal"), ofwhat=[], pyclass=getsslglobal, encoded="urn:NSConfig")

class getsslglobalResponse:
    def __init__(self):
        self._return = None
        return
getsslglobalResponse.typecode = Struct(pname=("urn:NSConfig","getsslglobalResponse"), ofwhat=[ns0.getsslglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsslglobalResponse, encoded="urn:NSConfig")

class getsystemsession:
    def __init__(self):
        self._sid = None
        return
getsystemsession.typecode = Struct(pname=("urn:NSConfig","getsystemsession"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="sid", aname="_sid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemsession, encoded="urn:NSConfig")

class getsystemsessionResponse:
    def __init__(self):
        self._return = None
        return
getsystemsessionResponse.typecode = Struct(pname=("urn:NSConfig","getsystemsessionResponse"), ofwhat=[ns0.getsystemsessionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemsessionResponse, encoded="urn:NSConfig")

class killsystemsession:
    def __init__(self):
        self._sid = None
        self._all = None
        return
killsystemsession.typecode = Struct(pname=("urn:NSConfig","killsystemsession"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="sid", aname="_sid", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="all", aname="_all", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=killsystemsession, encoded="urn:NSConfig")

class killsystemsessionResponse:
    def __init__(self):
        self._return = None
        return
killsystemsessionResponse.typecode = Struct(pname=("urn:NSConfig","killsystemsessionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=killsystemsessionResponse, encoded="urn:NSConfig")

class addsystemcmdpolicy:
    def __init__(self):
        self._policyname = None
        self._actioN = None
        self._cmdspec = None
        return
addsystemcmdpolicy.typecode = Struct(pname=("urn:NSConfig","addsystemcmdpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cmdspec", aname="_cmdspec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemcmdpolicy, encoded="urn:NSConfig")

class addsystemcmdpolicyResponse:
    def __init__(self):
        self._return = None
        return
addsystemcmdpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addsystemcmdpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemcmdpolicyResponse, encoded="urn:NSConfig")

class rmsystemcmdpolicy:
    def __init__(self):
        self._policyname = None
        return
rmsystemcmdpolicy.typecode = Struct(pname=("urn:NSConfig","rmsystemcmdpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemcmdpolicy, encoded="urn:NSConfig")

class rmsystemcmdpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmsystemcmdpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmsystemcmdpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemcmdpolicyResponse, encoded="urn:NSConfig")

class setsystemcmdpolicy_action:
    def __init__(self):
        self._policyname = None
        self._cmdspec = None
        self._actioN = None
        return
setsystemcmdpolicy_action.typecode = Struct(pname=("urn:NSConfig","setsystemcmdpolicy_action"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cmdspec", aname="_cmdspec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemcmdpolicy_action, encoded="urn:NSConfig")

class setsystemcmdpolicyResponse:
    def __init__(self):
        self._return = None
        return
setsystemcmdpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setsystemcmdpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemcmdpolicyResponse, encoded="urn:NSConfig")

class setsystemcmdpolicy_cmdspec:
    def __init__(self):
        self._policyname = None
        self._actioN = None
        self._cmdspec = None
        return
setsystemcmdpolicy_cmdspec.typecode = Struct(pname=("urn:NSConfig","setsystemcmdpolicy_cmdspec"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="cmdspec", aname="_cmdspec", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemcmdpolicy_cmdspec, encoded="urn:NSConfig")

class setsystemcmdpolicyResponse:
    def __init__(self):
        self._return = None
        return
setsystemcmdpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setsystemcmdpolicy_cmdspecResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemcmdpolicyResponse, encoded="urn:NSConfig")

class getsystemcmdpolicy:
    def __init__(self):
        self._policyname = None
        return
getsystemcmdpolicy.typecode = Struct(pname=("urn:NSConfig","getsystemcmdpolicy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemcmdpolicy, encoded="urn:NSConfig")

class getsystemcmdpolicyResponse:
    def __init__(self):
        self._return = None
        return
getsystemcmdpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getsystemcmdpolicyResponse"), ofwhat=[ns0.getsystemcmdpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemcmdpolicyResponse, encoded="urn:NSConfig")

class addsystemuser:
    def __init__(self):
        self._username = None
        self._password = None
        return
addsystemuser.typecode = Struct(pname=("urn:NSConfig","addsystemuser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemuser, encoded="urn:NSConfig")

class addsystemuserResponse:
    def __init__(self):
        self._return = None
        return
addsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","addsystemuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemuserResponse, encoded="urn:NSConfig")

class rmsystemuser:
    def __init__(self):
        self._username = None
        return
rmsystemuser.typecode = Struct(pname=("urn:NSConfig","rmsystemuser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemuser, encoded="urn:NSConfig")

class rmsystemuserResponse:
    def __init__(self):
        self._return = None
        return
rmsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","rmsystemuserResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemuserResponse, encoded="urn:NSConfig")

class setsystemuser_password:
    def __init__(self):
        self._username = None
        self._password = None
        return
setsystemuser_password.typecode = Struct(pname=("urn:NSConfig","setsystemuser_password"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="password", aname="_password", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemuser_password, encoded="urn:NSConfig")

class setsystemuserResponse:
    def __init__(self):
        self._return = None
        return
setsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","setsystemuser_passwordResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setsystemuserResponse, encoded="urn:NSConfig")

class bindsystemuser_policy:
    def __init__(self):
        self._username = None
        self._policyname = None
        self._priority = None
        return
bindsystemuser_policy.typecode = Struct(pname=("urn:NSConfig","bindsystemuser_policy"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemuser_policy, encoded="urn:NSConfig")

class bindsystemuserResponse:
    def __init__(self):
        self._return = None
        return
bindsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","bindsystemuser_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemuserResponse, encoded="urn:NSConfig")

class unbindsystemuser_policy:
    def __init__(self):
        self._username = None
        self._policyname = None
        return
unbindsystemuser_policy.typecode = Struct(pname=("urn:NSConfig","unbindsystemuser_policy"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemuser_policy, encoded="urn:NSConfig")

class unbindsystemuserResponse:
    def __init__(self):
        self._return = None
        return
unbindsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","unbindsystemuser_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemuserResponse, encoded="urn:NSConfig")

class getsystemuser:
    def __init__(self):
        self._username = None
        return
getsystemuser.typecode = Struct(pname=("urn:NSConfig","getsystemuser"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemuser, encoded="urn:NSConfig")

class getsystemuserResponse:
    def __init__(self):
        self._return = None
        return
getsystemuserResponse.typecode = Struct(pname=("urn:NSConfig","getsystemuserResponse"), ofwhat=[ns0.getsystemuserResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemuserResponse, encoded="urn:NSConfig")

class addsystemgroup:
    def __init__(self):
        self._groupname = None
        return
addsystemgroup.typecode = Struct(pname=("urn:NSConfig","addsystemgroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemgroup, encoded="urn:NSConfig")

class addsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
addsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","addsystemgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addsystemgroupResponse, encoded="urn:NSConfig")

class rmsystemgroup:
    def __init__(self):
        self._groupname = None
        return
rmsystemgroup.typecode = Struct(pname=("urn:NSConfig","rmsystemgroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemgroup, encoded="urn:NSConfig")

class rmsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
rmsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","rmsystemgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmsystemgroupResponse, encoded="urn:NSConfig")

class bindsystemgroup_user:
    def __init__(self):
        self._groupname = None
        self._username = None
        return
bindsystemgroup_user.typecode = Struct(pname=("urn:NSConfig","bindsystemgroup_user"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemgroup_user, encoded="urn:NSConfig")

class bindsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
bindsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","bindsystemgroup_userResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemgroupResponse, encoded="urn:NSConfig")

class bindsystemgroup_policy:
    def __init__(self):
        self._groupname = None
        self._policyname = None
        self._priority = None
        return
bindsystemgroup_policy.typecode = Struct(pname=("urn:NSConfig","bindsystemgroup_policy"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemgroup_policy, encoded="urn:NSConfig")

class bindsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
bindsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","bindsystemgroup_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemgroupResponse, encoded="urn:NSConfig")

class unbindsystemgroup_user:
    def __init__(self):
        self._groupname = None
        self._username = None
        return
unbindsystemgroup_user.typecode = Struct(pname=("urn:NSConfig","unbindsystemgroup_user"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemgroup_user, encoded="urn:NSConfig")

class unbindsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
unbindsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindsystemgroup_userResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemgroupResponse, encoded="urn:NSConfig")

class unbindsystemgroup_policy:
    def __init__(self):
        self._groupname = None
        self._policyname = None
        return
unbindsystemgroup_policy.typecode = Struct(pname=("urn:NSConfig","unbindsystemgroup_policy"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemgroup_policy, encoded="urn:NSConfig")

class unbindsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
unbindsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","unbindsystemgroup_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemgroupResponse, encoded="urn:NSConfig")

class getsystemgroup:
    def __init__(self):
        self._groupname = None
        return
getsystemgroup.typecode = Struct(pname=("urn:NSConfig","getsystemgroup"), ofwhat=[ZSI.TC.String(pname="groupname", aname="_groupname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemgroup, encoded="urn:NSConfig")

class getsystemgroupResponse:
    def __init__(self):
        self._return = None
        return
getsystemgroupResponse.typecode = Struct(pname=("urn:NSConfig","getsystemgroupResponse"), ofwhat=[ns0.getsystemgroupResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemgroupResponse, encoded="urn:NSConfig")

class bindsystemglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        return
bindsystemglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindsystemglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemglobal_policy, encoded="urn:NSConfig")

class bindsystemglobalResponse:
    def __init__(self):
        self._return = None
        return
bindsystemglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindsystemglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindsystemglobalResponse, encoded="urn:NSConfig")

class unbindsystemglobal_policy:
    def __init__(self):
        self._policyname = None
        return
unbindsystemglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindsystemglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemglobal_policy, encoded="urn:NSConfig")

class unbindsystemglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindsystemglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindsystemglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindsystemglobalResponse, encoded="urn:NSConfig")

class getsystemglobal:
    def __init__(self):
        return
getsystemglobal.typecode = Struct(pname=("urn:NSConfig","getsystemglobal"), ofwhat=[], pyclass=getsystemglobal, encoded="urn:NSConfig")

class getsystemglobalResponse:
    def __init__(self):
        self._return = None
        return
getsystemglobalResponse.typecode = Struct(pname=("urn:NSConfig","getsystemglobalResponse"), ofwhat=[ns0.getsystemglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getsystemglobalResponse, encoded="urn:NSConfig")

class addtunneltrafficpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addtunneltrafficpolicy.typecode = Struct(pname=("urn:NSConfig","addtunneltrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addtunneltrafficpolicy, encoded="urn:NSConfig")

class addtunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
addtunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addtunneltrafficpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addtunneltrafficpolicyResponse, encoded="urn:NSConfig")

class rmtunneltrafficpolicy:
    def __init__(self):
        self._name = None
        return
rmtunneltrafficpolicy.typecode = Struct(pname=("urn:NSConfig","rmtunneltrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmtunneltrafficpolicy, encoded="urn:NSConfig")

class rmtunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmtunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmtunneltrafficpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmtunneltrafficpolicyResponse, encoded="urn:NSConfig")

class settunneltrafficpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
settunneltrafficpolicy_rule.typecode = Struct(pname=("urn:NSConfig","settunneltrafficpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=settunneltrafficpolicy_rule, encoded="urn:NSConfig")

class settunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
settunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","settunneltrafficpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=settunneltrafficpolicyResponse, encoded="urn:NSConfig")

class settunneltrafficpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
settunneltrafficpolicy_action.typecode = Struct(pname=("urn:NSConfig","settunneltrafficpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=settunneltrafficpolicy_action, encoded="urn:NSConfig")

class settunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
settunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","settunneltrafficpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=settunneltrafficpolicyResponse, encoded="urn:NSConfig")

class unsettunneltrafficpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsettunneltrafficpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsettunneltrafficpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsettunneltrafficpolicy_rule, encoded="urn:NSConfig")

class unsettunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsettunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsettunneltrafficpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsettunneltrafficpolicyResponse, encoded="urn:NSConfig")

class unsettunneltrafficpolicy_action:
    def __init__(self):
        self._name = None
        return
unsettunneltrafficpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsettunneltrafficpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsettunneltrafficpolicy_action, encoded="urn:NSConfig")

class unsettunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsettunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsettunneltrafficpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsettunneltrafficpolicyResponse, encoded="urn:NSConfig")

class gettunneltrafficpolicy:
    def __init__(self):
        self._name = None
        return
gettunneltrafficpolicy.typecode = Struct(pname=("urn:NSConfig","gettunneltrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gettunneltrafficpolicy, encoded="urn:NSConfig")

class gettunneltrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
gettunneltrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","gettunneltrafficpolicyResponse"), ofwhat=[ns0.gettunneltrafficpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gettunneltrafficpolicyResponse, encoded="urn:NSConfig")

class bindtunnelglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._state = None
        return
bindtunnelglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindtunnelglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindtunnelglobal_policy, encoded="urn:NSConfig")

class bindtunnelglobalResponse:
    def __init__(self):
        self._return = None
        return
bindtunnelglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindtunnelglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindtunnelglobalResponse, encoded="urn:NSConfig")

class unbindtunnelglobal_policy:
    def __init__(self):
        self._policyname = None
        return
unbindtunnelglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindtunnelglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindtunnelglobal_policy, encoded="urn:NSConfig")

class unbindtunnelglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindtunnelglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindtunnelglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindtunnelglobalResponse, encoded="urn:NSConfig")

class gettunnelglobal:
    def __init__(self):
        return
gettunnelglobal.typecode = Struct(pname=("urn:NSConfig","gettunnelglobal"), ofwhat=[], pyclass=gettunnelglobal, encoded="urn:NSConfig")

class gettunnelglobalResponse:
    def __init__(self):
        self._return = None
        return
gettunnelglobalResponse.typecode = Struct(pname=("urn:NSConfig","gettunnelglobalResponse"), ofwhat=[ns0.gettunnelglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gettunnelglobalResponse, encoded="urn:NSConfig")

class install:
    def __init__(self):
        self._url = None
        return
install.typecode = Struct(pname=("urn:NSConfig","install"), ofwhat=[ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=install, encoded="urn:NSConfig")

class installResponse:
    def __init__(self):
        self._return = None
        return
installResponse.typecode = Struct(pname=("urn:NSConfig","installResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=installResponse, encoded="urn:NSConfig")

class gettechsupport:
    def __init__(self):
        return
gettechsupport.typecode = Struct(pname=("urn:NSConfig","gettechsupport"), ofwhat=[], pyclass=gettechsupport, encoded="urn:NSConfig")

class gettechsupportResponse:
    def __init__(self):
        self._return = None
        return
gettechsupportResponse.typecode = Struct(pname=("urn:NSConfig","gettechsupportResponse"), ofwhat=[ns0.gettechsupportResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=gettechsupportResponse, encoded="urn:NSConfig")

class addvpnvserver:
    def __init__(self):
        self._name = None
        self._servicetype = None
        self._ipaddress = None
        self._range = None
        self._port = None
        self._state = None
        return
addvpnvserver.typecode = Struct(pname=("urn:NSConfig","addvpnvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.sslvpnvservicetypeEnum_Def(pname="servicetype", aname="_servicetype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnvserver, encoded="urn:NSConfig")

class addvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
addvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","addvpnvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnvserverResponse, encoded="urn:NSConfig")

class rmvpnvserver:
    def __init__(self):
        self._name = None
        return
rmvpnvserver.typecode = Struct(pname=("urn:NSConfig","rmvpnvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnvserver, encoded="urn:NSConfig")

class rmvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
rmvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnvserverResponse, encoded="urn:NSConfig")

class setvpnvserver_ipaddress:
    def __init__(self):
        self._name = None
        self._ipaddress = None
        return
setvpnvserver_ipaddress.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_ipaddress"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserver_ipaddress, encoded="urn:NSConfig")

class setvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
setvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_ipaddressResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserverResponse, encoded="urn:NSConfig")

class setvpnvserver_authentication:
    def __init__(self):
        self._name = None
        self._authentication = None
        return
setvpnvserver_authentication.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_authentication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="authentication", aname="_authentication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserver_authentication, encoded="urn:NSConfig")

class setvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
setvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_authenticationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserverResponse, encoded="urn:NSConfig")

class setvpnvserver_maxaaausers:
    def __init__(self):
        self._name = None
        self._maxaaausers = None
        return
setvpnvserver_maxaaausers.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_maxaaausers"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="maxaaausers", aname="_maxaaausers", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserver_maxaaausers, encoded="urn:NSConfig")

class setvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
setvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_maxaaausersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserverResponse, encoded="urn:NSConfig")

class setvpnvserver_downstateflush:
    def __init__(self):
        self._name = None
        self._downstateflush = None
        return
setvpnvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.enabledisabledEnum_Def(pname="downstateflush", aname="_downstateflush", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserver_downstateflush, encoded="urn:NSConfig")

class setvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
setvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","setvpnvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnvserverResponse, encoded="urn:NSConfig")

class unsetvpnvserver_authentication:
    def __init__(self):
        self._name = None
        return
unsetvpnvserver_authentication.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_authentication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserver_authentication, encoded="urn:NSConfig")

class unsetvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_authenticationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserverResponse, encoded="urn:NSConfig")

class unsetvpnvserver_maxaaausers:
    def __init__(self):
        self._name = None
        return
unsetvpnvserver_maxaaausers.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_maxaaausers"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserver_maxaaausers, encoded="urn:NSConfig")

class unsetvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_maxaaausersResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserverResponse, encoded="urn:NSConfig")

class unsetvpnvserver_downstateflush:
    def __init__(self):
        self._name = None
        return
unsetvpnvserver_downstateflush.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_downstateflush"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserver_downstateflush, encoded="urn:NSConfig")

class unsetvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnvserver_downstateflushResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_policy:
    def __init__(self):
        self._name = None
        self._policy = None
        self._priority = None
        self._secondary = None
        return
bindvpnvserver_policy.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="secondary", aname="_secondary", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_policy, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_intranetapplication:
    def __init__(self):
        self._name = None
        self._intranetapplication = None
        return
bindvpnvserver_intranetapplication.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_intranetapplication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_intranetapplication, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_nexthopserver:
    def __init__(self):
        self._name = None
        self._nexthopserver = None
        return
bindvpnvserver_nexthopserver.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_nexthopserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nexthopserver", aname="_nexthopserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_nexthopserver, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_nexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_url:
    def __init__(self):
        self._name = None
        self._urlname = None
        return
bindvpnvserver_url.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_url"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_url, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_intranetip:
    def __init__(self):
        self._name = None
        self._intranetip = None
        self._netmask = None
        return
bindvpnvserver_intranetip.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_intranetip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_intranetip, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class bindvpnvserver_staserver:
    def __init__(self):
        self._name = None
        self._staserver = None
        return
bindvpnvserver_staserver.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_staserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="staserver", aname="_staserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserver_staserver, encoded="urn:NSConfig")

class bindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
bindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnvserver_staserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_policy:
    def __init__(self):
        self._name = None
        self._policy = None
        self._secondary = None
        return
unbindvpnvserver_policy.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_policy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="policy", aname="_policy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="secondary", aname="_secondary", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_policy, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_intranetapplication:
    def __init__(self):
        self._name = None
        self._intranetapplication = None
        return
unbindvpnvserver_intranetapplication.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_intranetapplication"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_intranetapplication, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_nexthopserver:
    def __init__(self):
        self._name = None
        self._nexthopserver = None
        return
unbindvpnvserver_nexthopserver.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_nexthopserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nexthopserver", aname="_nexthopserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_nexthopserver, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_nexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_url:
    def __init__(self):
        self._name = None
        self._urlname = None
        return
unbindvpnvserver_url.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_url"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_url, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_intranetip:
    def __init__(self):
        self._name = None
        self._intranetip = None
        self._netmask = None
        return
unbindvpnvserver_intranetip.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_intranetip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_intranetip, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class unbindvpnvserver_staserver:
    def __init__(self):
        self._name = None
        self._staserver = None
        return
unbindvpnvserver_staserver.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_staserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="staserver", aname="_staserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserver_staserver, encoded="urn:NSConfig")

class unbindvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnvserver_staserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnvserverResponse, encoded="urn:NSConfig")

class enablevpnvserver:
    def __init__(self):
        self._name = None
        return
enablevpnvserver.typecode = Struct(pname=("urn:NSConfig","enablevpnvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablevpnvserver, encoded="urn:NSConfig")

class enablevpnvserverResponse:
    def __init__(self):
        self._return = None
        return
enablevpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","enablevpnvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=enablevpnvserverResponse, encoded="urn:NSConfig")

class disablevpnvserver:
    def __init__(self):
        self._name = None
        return
disablevpnvserver.typecode = Struct(pname=("urn:NSConfig","disablevpnvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablevpnvserver, encoded="urn:NSConfig")

class disablevpnvserverResponse:
    def __init__(self):
        self._return = None
        return
disablevpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","disablevpnvserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=disablevpnvserverResponse, encoded="urn:NSConfig")

class getvpnvserver:
    def __init__(self):
        self._name = None
        return
getvpnvserver.typecode = Struct(pname=("urn:NSConfig","getvpnvserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnvserver, encoded="urn:NSConfig")

class getvpnvserverResponse:
    def __init__(self):
        self._return = None
        return
getvpnvserverResponse.typecode = Struct(pname=("urn:NSConfig","getvpnvserverResponse"), ofwhat=[ns0.getvpnvserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnvserverResponse, encoded="urn:NSConfig")

class addvpnintranetapplication:
    def __init__(self):
        self._intranetapplication = None
        self._protocol = None
        self._destip = None
        self._netmask = None
        self._iprange = None
        self._hostname = None
        self._clientapplication = None
        self._spoofiip = None
        self._destport = None
        self._interception = None
        self._srcip = None
        self._srcport = None
        return
addvpnintranetapplication.typecode = Struct(pname=("urn:NSConfig","addvpnintranetapplication"), ofwhat=[ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.protocolsEnum_Def(pname="protocol", aname="_protocol", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destip", aname="_destip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="iprange", aname="_iprange", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hostname", aname="_hostname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientapplication", aname="_clientapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="spoofiip", aname="_spoofiip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="destport", aname="_destport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.appmodeEnum_Def(pname="interception", aname="_interception", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="srcip", aname="_srcip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="srcport", aname="_srcport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnintranetapplication, encoded="urn:NSConfig")

class addvpnintranetapplicationResponse:
    def __init__(self):
        self._return = None
        return
addvpnintranetapplicationResponse.typecode = Struct(pname=("urn:NSConfig","addvpnintranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnintranetapplicationResponse, encoded="urn:NSConfig")

class rmvpnintranetapplication:
    def __init__(self):
        self._intranetapplication = None
        return
rmvpnintranetapplication.typecode = Struct(pname=("urn:NSConfig","rmvpnintranetapplication"), ofwhat=[ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnintranetapplication, encoded="urn:NSConfig")

class rmvpnintranetapplicationResponse:
    def __init__(self):
        self._return = None
        return
rmvpnintranetapplicationResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnintranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnintranetapplicationResponse, encoded="urn:NSConfig")

class getvpnintranetapplication:
    def __init__(self):
        self._intranetapplication = None
        return
getvpnintranetapplication.typecode = Struct(pname=("urn:NSConfig","getvpnintranetapplication"), ofwhat=[ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnintranetapplication, encoded="urn:NSConfig")

class getvpnintranetapplicationResponse:
    def __init__(self):
        self._return = None
        return
getvpnintranetapplicationResponse.typecode = Struct(pname=("urn:NSConfig","getvpnintranetapplicationResponse"), ofwhat=[ns0.getvpnintranetapplicationResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnintranetapplicationResponse, encoded="urn:NSConfig")

class addvpnnexthopserver:
    def __init__(self):
        self._name = None
        self._nexthopip = None
        self._nexthopport = None
        self._secure = None
        return
addvpnnexthopserver.typecode = Struct(pname=("urn:NSConfig","addvpnnexthopserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="nexthopip", aname="_nexthopip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="nexthopport", aname="_nexthopport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="secure", aname="_secure", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnnexthopserver, encoded="urn:NSConfig")

class addvpnnexthopserverResponse:
    def __init__(self):
        self._return = None
        return
addvpnnexthopserverResponse.typecode = Struct(pname=("urn:NSConfig","addvpnnexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnnexthopserverResponse, encoded="urn:NSConfig")

class rmvpnnexthopserver:
    def __init__(self):
        self._name = None
        return
rmvpnnexthopserver.typecode = Struct(pname=("urn:NSConfig","rmvpnnexthopserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnnexthopserver, encoded="urn:NSConfig")

class rmvpnnexthopserverResponse:
    def __init__(self):
        self._return = None
        return
rmvpnnexthopserverResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnnexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnnexthopserverResponse, encoded="urn:NSConfig")

class getvpnnexthopserver:
    def __init__(self):
        self._name = None
        return
getvpnnexthopserver.typecode = Struct(pname=("urn:NSConfig","getvpnnexthopserver"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnnexthopserver, encoded="urn:NSConfig")

class getvpnnexthopserverResponse:
    def __init__(self):
        self._return = None
        return
getvpnnexthopserverResponse.typecode = Struct(pname=("urn:NSConfig","getvpnnexthopserverResponse"), ofwhat=[ns0.getvpnnexthopserverResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnnexthopserverResponse, encoded="urn:NSConfig")

class getvpnicaconnection:
    def __init__(self):
        self._username = None
        return
getvpnicaconnection.typecode = Struct(pname=("urn:NSConfig","getvpnicaconnection"), ofwhat=[ZSI.TC.String(pname="username", aname="_username", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnicaconnection, encoded="urn:NSConfig")

class getvpnicaconnectionResponse:
    def __init__(self):
        self._return = None
        return
getvpnicaconnectionResponse.typecode = Struct(pname=("urn:NSConfig","getvpnicaconnectionResponse"), ofwhat=[ns0.getvpnicaconnectionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnicaconnectionResponse, encoded="urn:NSConfig")

class bindvpnglobal_policy:
    def __init__(self):
        self._policyname = None
        self._priority = None
        self._secondary = None
        return
bindvpnglobal_policy.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="secondary", aname="_secondary", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_policy, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_intranetdomain:
    def __init__(self):
        self._intranetdomain = None
        return
bindvpnglobal_intranetdomain.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetdomain"), ofwhat=[ZSI.TC.String(pname="intranetdomain", aname="_intranetdomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_intranetdomain, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_intranetapplication:
    def __init__(self):
        self._intranetapplication = None
        return
bindvpnglobal_intranetapplication.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetapplication"), ofwhat=[ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_intranetapplication, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_nexthopserver:
    def __init__(self):
        self._nexthopserver = None
        return
bindvpnglobal_nexthopserver.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_nexthopserver"), ofwhat=[ZSI.TC.String(pname="nexthopserver", aname="_nexthopserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_nexthopserver, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_nexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_url:
    def __init__(self):
        self._urlname = None
        return
bindvpnglobal_url.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_url"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_url, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_intranetip:
    def __init__(self):
        self._intranetip = None
        self._netmask = None
        return
bindvpnglobal_intranetip.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetip"), ofwhat=[ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_intranetip, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class bindvpnglobal_staserver:
    def __init__(self):
        self._staserver = None
        return
bindvpnglobal_staserver.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_staserver"), ofwhat=[ZSI.TC.String(pname="staserver", aname="_staserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobal_staserver, encoded="urn:NSConfig")

class bindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
bindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","bindvpnglobal_staserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=bindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_policy:
    def __init__(self):
        self._policyname = None
        self._secondary = None
        return
unbindvpnglobal_policy.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_policy"), ofwhat=[ZSI.TC.String(pname="policyname", aname="_policyname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="secondary", aname="_secondary", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_policy, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_policyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_intranetdomain:
    def __init__(self):
        self._intranetdomain = None
        return
unbindvpnglobal_intranetdomain.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetdomain"), ofwhat=[ZSI.TC.String(pname="intranetdomain", aname="_intranetdomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_intranetdomain, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_intranetapplication:
    def __init__(self):
        self._intranetapplication = None
        return
unbindvpnglobal_intranetapplication.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetapplication"), ofwhat=[ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_intranetapplication, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetapplicationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_nexthopserver:
    def __init__(self):
        self._nexthopserver = None
        return
unbindvpnglobal_nexthopserver.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_nexthopserver"), ofwhat=[ZSI.TC.String(pname="nexthopserver", aname="_nexthopserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_nexthopserver, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_nexthopserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_url:
    def __init__(self):
        self._urlname = None
        return
unbindvpnglobal_url.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_url"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_url, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_urlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_intranetip:
    def __init__(self):
        self._intranetip = None
        self._netmask = None
        return
unbindvpnglobal_intranetip.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetip"), ofwhat=[ZSI.TC.String(pname="intranetip", aname="_intranetip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="netmask", aname="_netmask", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_intranetip, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_intranetipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class unbindvpnglobal_staserver:
    def __init__(self):
        self._staserver = None
        return
unbindvpnglobal_staserver.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_staserver"), ofwhat=[ZSI.TC.String(pname="staserver", aname="_staserver", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobal_staserver, encoded="urn:NSConfig")

class unbindvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
unbindvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","unbindvpnglobal_staserverResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unbindvpnglobalResponse, encoded="urn:NSConfig")

class getvpnglobal:
    def __init__(self):
        return
getvpnglobal.typecode = Struct(pname=("urn:NSConfig","getvpnglobal"), ofwhat=[], pyclass=getvpnglobal, encoded="urn:NSConfig")

class getvpnglobalResponse:
    def __init__(self):
        self._return = None
        return
getvpnglobalResponse.typecode = Struct(pname=("urn:NSConfig","getvpnglobalResponse"), ofwhat=[ns0.getvpnglobalResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnglobalResponse, encoded="urn:NSConfig")

class addvpntrafficpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addvpntrafficpolicy.typecode = Struct(pname=("urn:NSConfig","addvpntrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpntrafficpolicy, encoded="urn:NSConfig")

class addvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
addvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addvpntrafficpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpntrafficpolicyResponse, encoded="urn:NSConfig")

class rmvpntrafficpolicy:
    def __init__(self):
        self._name = None
        return
rmvpntrafficpolicy.typecode = Struct(pname=("urn:NSConfig","rmvpntrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpntrafficpolicy, encoded="urn:NSConfig")

class rmvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmvpntrafficpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpntrafficpolicyResponse, encoded="urn:NSConfig")

class setvpntrafficpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setvpntrafficpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setvpntrafficpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficpolicy_rule, encoded="urn:NSConfig")

class setvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
setvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setvpntrafficpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficpolicyResponse, encoded="urn:NSConfig")

class setvpntrafficpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setvpntrafficpolicy_action.typecode = Struct(pname=("urn:NSConfig","setvpntrafficpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficpolicy_action, encoded="urn:NSConfig")

class setvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
setvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setvpntrafficpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficpolicyResponse, encoded="urn:NSConfig")

class unsetvpntrafficpolicy_rule:
    def __init__(self):
        self._name = None
        return
unsetvpntrafficpolicy_rule.typecode = Struct(pname=("urn:NSConfig","unsetvpntrafficpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpntrafficpolicy_rule, encoded="urn:NSConfig")

class unsetvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpntrafficpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpntrafficpolicyResponse, encoded="urn:NSConfig")

class unsetvpntrafficpolicy_action:
    def __init__(self):
        self._name = None
        return
unsetvpntrafficpolicy_action.typecode = Struct(pname=("urn:NSConfig","unsetvpntrafficpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpntrafficpolicy_action, encoded="urn:NSConfig")

class unsetvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
unsetvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpntrafficpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpntrafficpolicyResponse, encoded="urn:NSConfig")

class getvpntrafficpolicy:
    def __init__(self):
        self._name = None
        return
getvpntrafficpolicy.typecode = Struct(pname=("urn:NSConfig","getvpntrafficpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpntrafficpolicy, encoded="urn:NSConfig")

class getvpntrafficpolicyResponse:
    def __init__(self):
        self._return = None
        return
getvpntrafficpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getvpntrafficpolicyResponse"), ofwhat=[ns0.getvpntrafficpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpntrafficpolicyResponse, encoded="urn:NSConfig")

class addvpntrafficaction:
    def __init__(self):
        self._name = None
        self._qual = None
        self._apptimeout = None
        self._sso = None
        return
addvpntrafficaction.typecode = Struct(pname=("urn:NSConfig","addvpntrafficaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.actionvpntraffictypeEnum_Def(pname="qual", aname="_qual", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="apptimeout", aname="_apptimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoff2Enum_Def(pname="sso", aname="_sso", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpntrafficaction, encoded="urn:NSConfig")

class addvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
addvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","addvpntrafficactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpntrafficactionResponse, encoded="urn:NSConfig")

class rmvpntrafficaction:
    def __init__(self):
        self._name = None
        return
rmvpntrafficaction.typecode = Struct(pname=("urn:NSConfig","rmvpntrafficaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpntrafficaction, encoded="urn:NSConfig")

class rmvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
rmvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","rmvpntrafficactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpntrafficactionResponse, encoded="urn:NSConfig")

class setvpntrafficaction_apptimeout:
    def __init__(self):
        self._name = None
        self._apptimeout = None
        return
setvpntrafficaction_apptimeout.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_apptimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="apptimeout", aname="_apptimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficaction_apptimeout, encoded="urn:NSConfig")

class setvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
setvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_apptimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficactionResponse, encoded="urn:NSConfig")

class setvpntrafficaction_sso:
    def __init__(self):
        self._name = None
        self._sso = None
        return
setvpntrafficaction_sso.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_sso"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoff2Enum_Def(pname="sso", aname="_sso", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficaction_sso, encoded="urn:NSConfig")

class setvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
setvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_ssoResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficactionResponse, encoded="urn:NSConfig")

class setvpntrafficaction_fta:
    def __init__(self):
        self._name = None
        self._fta = None
        return
setvpntrafficaction_fta.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_fta"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoff2Enum_Def(pname="fta", aname="_fta", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficaction_fta, encoded="urn:NSConfig")

class setvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
setvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpntrafficaction_ftaResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpntrafficactionResponse, encoded="urn:NSConfig")

class getvpntrafficaction:
    def __init__(self):
        self._name = None
        return
getvpntrafficaction.typecode = Struct(pname=("urn:NSConfig","getvpntrafficaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpntrafficaction, encoded="urn:NSConfig")

class getvpntrafficactionResponse:
    def __init__(self):
        self._return = None
        return
getvpntrafficactionResponse.typecode = Struct(pname=("urn:NSConfig","getvpntrafficactionResponse"), ofwhat=[ns0.getvpntrafficactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpntrafficactionResponse, encoded="urn:NSConfig")

class addvpnurl:
    def __init__(self):
        self._urlname = None
        self._linkname = None
        self._actualurl = None
        return
addvpnurl.typecode = Struct(pname=("urn:NSConfig","addvpnurl"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkname", aname="_linkname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actualurl", aname="_actualurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnurl, encoded="urn:NSConfig")

class addvpnurlResponse:
    def __init__(self):
        self._return = None
        return
addvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","addvpnurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnurlResponse, encoded="urn:NSConfig")

class rmvpnurl:
    def __init__(self):
        self._urlname = None
        return
rmvpnurl.typecode = Struct(pname=("urn:NSConfig","rmvpnurl"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnurl, encoded="urn:NSConfig")

class rmvpnurlResponse:
    def __init__(self):
        self._return = None
        return
rmvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnurlResponse, encoded="urn:NSConfig")

class setvpnurl_linkname:
    def __init__(self):
        self._urlname = None
        self._linkname = None
        return
setvpnurl_linkname.typecode = Struct(pname=("urn:NSConfig","setvpnurl_linkname"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="linkname", aname="_linkname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurl_linkname, encoded="urn:NSConfig")

class setvpnurlResponse:
    def __init__(self):
        self._return = None
        return
setvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","setvpnurl_linknameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurlResponse, encoded="urn:NSConfig")

class setvpnurl_actualurl:
    def __init__(self):
        self._urlname = None
        self._actualurl = None
        return
setvpnurl_actualurl.typecode = Struct(pname=("urn:NSConfig","setvpnurl_actualurl"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actualurl", aname="_actualurl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurl_actualurl, encoded="urn:NSConfig")

class setvpnurlResponse:
    def __init__(self):
        self._return = None
        return
setvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","setvpnurl_actualurlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurlResponse, encoded="urn:NSConfig")

class setvpnurl_clientlessaccess:
    def __init__(self):
        self._urlname = None
        self._clientlessaccess = None
        return
setvpnurl_clientlessaccess.typecode = Struct(pname=("urn:NSConfig","setvpnurl_clientlessaccess"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.onoffEnum_Def(pname="clientlessaccess", aname="_clientlessaccess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurl_clientlessaccess, encoded="urn:NSConfig")

class setvpnurlResponse:
    def __init__(self):
        self._return = None
        return
setvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","setvpnurl_clientlessaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnurlResponse, encoded="urn:NSConfig")

class unsetvpnurl_clientlessaccess:
    def __init__(self):
        self._urlname = None
        return
unsetvpnurl_clientlessaccess.typecode = Struct(pname=("urn:NSConfig","unsetvpnurl_clientlessaccess"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnurl_clientlessaccess, encoded="urn:NSConfig")

class unsetvpnurlResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnurl_clientlessaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnurlResponse, encoded="urn:NSConfig")

class getvpnurl:
    def __init__(self):
        self._urlname = None
        return
getvpnurl.typecode = Struct(pname=("urn:NSConfig","getvpnurl"), ofwhat=[ZSI.TC.String(pname="urlname", aname="_urlname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnurl, encoded="urn:NSConfig")

class getvpnurlResponse:
    def __init__(self):
        self._return = None
        return
getvpnurlResponse.typecode = Struct(pname=("urn:NSConfig","getvpnurlResponse"), ofwhat=[ns0.getvpnurlResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnurlResponse, encoded="urn:NSConfig")

class addvpnsessionpolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._actioN = None
        return
addvpnsessionpolicy.typecode = Struct(pname=("urn:NSConfig","addvpnsessionpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnsessionpolicy, encoded="urn:NSConfig")

class addvpnsessionpolicyResponse:
    def __init__(self):
        self._return = None
        return
addvpnsessionpolicyResponse.typecode = Struct(pname=("urn:NSConfig","addvpnsessionpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnsessionpolicyResponse, encoded="urn:NSConfig")

class rmvpnsessionpolicy:
    def __init__(self):
        self._name = None
        return
rmvpnsessionpolicy.typecode = Struct(pname=("urn:NSConfig","rmvpnsessionpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnsessionpolicy, encoded="urn:NSConfig")

class rmvpnsessionpolicyResponse:
    def __init__(self):
        self._return = None
        return
rmvpnsessionpolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnsessionpolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnsessionpolicyResponse, encoded="urn:NSConfig")

class setvpnsessionpolicy_rule:
    def __init__(self):
        self._name = None
        self._rule = None
        return
setvpnsessionpolicy_rule.typecode = Struct(pname=("urn:NSConfig","setvpnsessionpolicy_rule"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionpolicy_rule, encoded="urn:NSConfig")

class setvpnsessionpolicyResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionpolicy_ruleResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionpolicyResponse, encoded="urn:NSConfig")

class setvpnsessionpolicy_action:
    def __init__(self):
        self._name = None
        self._actioN = None
        return
setvpnsessionpolicy_action.typecode = Struct(pname=("urn:NSConfig","setvpnsessionpolicy_action"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="actioN", aname="_actioN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionpolicy_action, encoded="urn:NSConfig")

class setvpnsessionpolicyResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionpolicyResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionpolicy_actionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionpolicyResponse, encoded="urn:NSConfig")

class getvpnsessionpolicy:
    def __init__(self):
        self._name = None
        return
getvpnsessionpolicy.typecode = Struct(pname=("urn:NSConfig","getvpnsessionpolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnsessionpolicy, encoded="urn:NSConfig")

class getvpnsessionpolicyResponse:
    def __init__(self):
        self._return = None
        return
getvpnsessionpolicyResponse.typecode = Struct(pname=("urn:NSConfig","getvpnsessionpolicyResponse"), ofwhat=[ns0.getvpnsessionpolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnsessionpolicyResponse, encoded="urn:NSConfig")

class addvpnsessionaction:
    def __init__(self):
        self._name = None
        return
addvpnsessionaction.typecode = Struct(pname=("urn:NSConfig","addvpnsessionaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnsessionaction, encoded="urn:NSConfig")

class addvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
addvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","addvpnsessionactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnsessionactionResponse, encoded="urn:NSConfig")

class rmvpnsessionaction:
    def __init__(self):
        self._name = None
        return
rmvpnsessionaction.typecode = Struct(pname=("urn:NSConfig","rmvpnsessionaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnsessionaction, encoded="urn:NSConfig")

class rmvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
rmvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnsessionactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_httpport:
    def __init__(self):
        self._name = None
        self._httpport = None
        return
setvpnsessionaction_httpport.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_httpport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="httpport", aname="_httpport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_httpport, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_winsip:
    def __init__(self):
        self._name = None
        self._winsip = None
        return
setvpnsessionaction_winsip.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_winsip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="winsip", aname="_winsip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_winsip, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_winsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_dnsvservername:
    def __init__(self):
        self._name = None
        self._dnsvservername = None
        return
setvpnsessionaction_dnsvservername.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_dnsvservername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_dnsvservername, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_splitdns:
    def __init__(self):
        self._name = None
        self._splitdns = None
        return
setvpnsessionaction_splitdns.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_splitdns"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_splitdnsEnum_Def(pname="splitdns", aname="_splitdns", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_splitdns, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_splitdnsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_sesstimeout:
    def __init__(self):
        self._name = None
        self._sesstimeout = None
        return
setvpnsessionaction_sesstimeout.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_sesstimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_sesstimeout, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientsecurity:
    def __init__(self):
        self._name = None
        self._clientsecurity = None
        self._clientsecuritygroup = None
        self._clientsecuritymessage = None
        return
setvpnsessionaction_clientsecurity.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientsecurity"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecurity", aname="_clientsecurity", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecuritygroup", aname="_clientsecuritygroup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientsecurity, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientsecurityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientsecuritylog:
    def __init__(self):
        self._name = None
        self._clientsecuritylog = None
        return
setvpnsessionaction_clientsecuritylog.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientsecuritylog"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="clientsecuritylog", aname="_clientsecuritylog", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientsecuritylog, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientsecuritylogResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_splittunnel:
    def __init__(self):
        self._name = None
        self._splittunnel = None
        return
setvpnsessionaction_splittunnel.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_splittunnel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_splittunnelEnum_Def(pname="splittunnel", aname="_splittunnel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_splittunnel, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_splittunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_locallanaccess:
    def __init__(self):
        self._name = None
        self._locallanaccess = None
        return
setvpnsessionaction_locallanaccess.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_locallanaccess"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_locallanaccessEnum_Def(pname="locallanaccess", aname="_locallanaccess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_locallanaccess, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_locallanaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_rfc1918:
    def __init__(self):
        self._name = None
        self._rfc1918 = None
        return
setvpnsessionaction_rfc1918.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_rfc1918"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="rfc1918", aname="_rfc1918", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_rfc1918, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_rfc1918Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_spoofiip:
    def __init__(self):
        self._name = None
        self._spoofiip = None
        return
setvpnsessionaction_spoofiip.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_spoofiip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="spoofiip", aname="_spoofiip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_spoofiip, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_spoofiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_killconnections:
    def __init__(self):
        self._name = None
        self._killconnections = None
        return
setvpnsessionaction_killconnections.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_killconnections"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="killconnections", aname="_killconnections", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_killconnections, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_killconnectionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_transparentinterception:
    def __init__(self):
        self._name = None
        self._transparentinterception = None
        return
setvpnsessionaction_transparentinterception.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_transparentinterception"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="transparentinterception", aname="_transparentinterception", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_transparentinterception, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_transparentinterceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_windowsclienttype:
    def __init__(self):
        self._name = None
        self._windowsclienttype = None
        return
setvpnsessionaction_windowsclienttype.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_windowsclienttype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_clttypeEnum_Def(pname="windowsclienttype", aname="_windowsclienttype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_windowsclienttype, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_windowsclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_defaultauthorizationaction:
    def __init__(self):
        self._name = None
        self._defaultauthorizationaction = None
        return
setvpnsessionaction_defaultauthorizationaction.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_defaultauthorizationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.allowdenyEnum_Def(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_defaultauthorizationaction, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_defaultauthorizationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_authorizationgroup:
    def __init__(self):
        self._name = None
        self._authorizationgroup = None
        return
setvpnsessionaction_authorizationgroup.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_authorizationgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="authorizationgroup", aname="_authorizationgroup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_authorizationgroup, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_authorizationgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientidletimeout:
    def __init__(self):
        self._name = None
        self._clientidletimeout = None
        return
setvpnsessionaction_clientidletimeout.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientidletimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="clientidletimeout", aname="_clientidletimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientidletimeout, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientidletimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_proxy:
    def __init__(self):
        self._name = None
        self._proxy = None
        return
setvpnsessionaction_proxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_proxyEnum_Def(pname="proxy", aname="_proxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_proxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_allprotocolproxy:
    def __init__(self):
        self._name = None
        self._allprotocolproxy = None
        return
setvpnsessionaction_allprotocolproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_allprotocolproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="allprotocolproxy", aname="_allprotocolproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_allprotocolproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_allprotocolproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_httpproxy:
    def __init__(self):
        self._name = None
        self._httpproxy = None
        return
setvpnsessionaction_httpproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_httpproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="httpproxy", aname="_httpproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_httpproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_httpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_ftpproxy:
    def __init__(self):
        self._name = None
        self._ftpproxy = None
        return
setvpnsessionaction_ftpproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ftpproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ftpproxy", aname="_ftpproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_ftpproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ftpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_socksproxy:
    def __init__(self):
        self._name = None
        self._socksproxy = None
        return
setvpnsessionaction_socksproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_socksproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="socksproxy", aname="_socksproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_socksproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_socksproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_gopherproxy:
    def __init__(self):
        self._name = None
        self._gopherproxy = None
        return
setvpnsessionaction_gopherproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_gopherproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="gopherproxy", aname="_gopherproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_gopherproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_gopherproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_sslproxy:
    def __init__(self):
        self._name = None
        self._sslproxy = None
        return
setvpnsessionaction_sslproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_sslproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sslproxy", aname="_sslproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_sslproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_sslproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_proxyexception:
    def __init__(self):
        self._name = None
        self._proxyexception = None
        return
setvpnsessionaction_proxyexception.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxyexception"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="proxyexception", aname="_proxyexception", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_proxyexception, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxyexceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_proxylocalbypass:
    def __init__(self):
        self._name = None
        self._proxylocalbypass = None
        return
setvpnsessionaction_proxylocalbypass.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxylocalbypass"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_enabledisabledEnum_Def(pname="proxylocalbypass", aname="_proxylocalbypass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_proxylocalbypass, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_proxylocalbypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientcleanupprompt:
    def __init__(self):
        self._name = None
        self._clientcleanupprompt = None
        return
setvpnsessionaction_clientcleanupprompt.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientcleanupprompt"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="clientcleanupprompt", aname="_clientcleanupprompt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientcleanupprompt, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientcleanuppromptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_forcecleanup:
    def __init__(self):
        self._name = None
        self._forcecleanup = None
        return
setvpnsessionaction_forcecleanup.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcecleanup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.forceclnupEnum_Def(pname="forcecleanup", aname="_forcecleanup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_forcecleanup, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcecleanupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientoptions:
    def __init__(self):
        self._name = None
        self._clientoptions = None
        return
setvpnsessionaction_clientoptions.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientoptions"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.clntoptionsEnum_Def(pname="clientoptions", aname="_clientoptions", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientoptions, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientoptionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientconfiguration:
    def __init__(self):
        self._name = None
        self._clientconfiguration = None
        return
setvpnsessionaction_clientconfiguration.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientconfiguration"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.clntconfEnum_Def(pname="clientconfiguration", aname="_clientconfiguration", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientconfiguration, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientconfigurationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_sso:
    def __init__(self):
        self._name = None
        self._sso = None
        return
setvpnsessionaction_sso.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_sso"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="sso", aname="_sso", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_sso, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ssoResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_ssocredential:
    def __init__(self):
        self._name = None
        self._ssocredential = None
        return
setvpnsessionaction_ssocredential.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ssocredential"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_sso_credential_indexEnum_Def(pname="ssocredential", aname="_ssocredential", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_ssocredential, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ssocredentialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_windowsautologon:
    def __init__(self):
        self._name = None
        self._windowsautologon = None
        return
setvpnsessionaction_windowsautologon.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_windowsautologon"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="windowsautologon", aname="_windowsautologon", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_windowsautologon, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_windowsautologonResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_usemip:
    def __init__(self):
        self._name = None
        self._usemip = None
        return
setvpnsessionaction_usemip.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_usemip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_usemipEnum_Def(pname="usemip", aname="_usemip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_usemip, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_usemipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_useiip:
    def __init__(self):
        self._name = None
        self._useiip = None
        return
setvpnsessionaction_useiip.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_useiip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_useiipEnum_Def(pname="useiip", aname="_useiip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_useiip, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_useiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientdebug:
    def __init__(self):
        self._name = None
        self._clientdebug = None
        return
setvpnsessionaction_clientdebug.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientdebug"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.clntdbgEnum_Def(pname="clientdebug", aname="_clientdebug", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientdebug, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientdebugResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_loginscript:
    def __init__(self):
        self._name = None
        self._loginscript = None
        return
setvpnsessionaction_loginscript.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_loginscript"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="loginscript", aname="_loginscript", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_loginscript, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_loginscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_logoutscript:
    def __init__(self):
        self._name = None
        self._logoutscript = None
        return
setvpnsessionaction_logoutscript.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_logoutscript"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="logoutscript", aname="_logoutscript", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_logoutscript, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_logoutscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_homepage:
    def __init__(self):
        self._name = None
        self._homepage = None
        return
setvpnsessionaction_homepage.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_homepage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="homepage", aname="_homepage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_homepage, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_homepageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_icaproxy:
    def __init__(self):
        self._name = None
        self._icaproxy = None
        return
setvpnsessionaction_icaproxy.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_icaproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="icaproxy", aname="_icaproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_icaproxy, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_icaproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_wihome:
    def __init__(self):
        self._name = None
        self._wihome = None
        return
setvpnsessionaction_wihome.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_wihome"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="wihome", aname="_wihome", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_wihome, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_wihomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_wiportalmode:
    def __init__(self):
        self._name = None
        self._wiportalmode = None
        return
setvpnsessionaction_wiportalmode.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_wiportalmode"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_portal_wimodeEnum_Def(pname="wiportalmode", aname="_wiportalmode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_wiportalmode, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_wiportalmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientchoices:
    def __init__(self):
        self._name = None
        self._clientchoices = None
        return
setvpnsessionaction_clientchoices.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientchoices"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessactEnum_Def(pname="clientchoices", aname="_clientchoices", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientchoices, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientchoicesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_epaclienttype:
    def __init__(self):
        self._name = None
        self._epaclienttype = None
        return
setvpnsessionaction_epaclienttype.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_epaclienttype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_clttypeEnum_Def(pname="epaclienttype", aname="_epaclienttype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_epaclienttype, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_epaclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_iipdnssuffix:
    def __init__(self):
        self._name = None
        self._iipdnssuffix = None
        return
setvpnsessionaction_iipdnssuffix.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_iipdnssuffix"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="iipdnssuffix", aname="_iipdnssuffix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_iipdnssuffix, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_iipdnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_forcedtimeout:
    def __init__(self):
        self._name = None
        self._forcedtimeout = None
        return
setvpnsessionaction_forcedtimeout.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcedtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeout", aname="_forcedtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_forcedtimeout, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcedtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_forcedtimeoutwarning:
    def __init__(self):
        self._name = None
        self._forcedtimeoutwarning = None
        return
setvpnsessionaction_forcedtimeoutwarning.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcedtimeoutwarning"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeoutwarning", aname="_forcedtimeoutwarning", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_forcedtimeoutwarning, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_forcedtimeoutwarningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_ntdomain:
    def __init__(self):
        self._name = None
        self._ntdomain = None
        return
setvpnsessionaction_ntdomain.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ntdomain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ntdomain", aname="_ntdomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_ntdomain, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_ntdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientlessvpnmode:
    def __init__(self):
        self._name = None
        self._clientlessvpnmode = None
        return
setvpnsessionaction_clientlessvpnmode.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientlessvpnmode"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_cvpnmodeEnum_Def(pname="clientlessvpnmode", aname="_clientlessvpnmode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientlessvpnmode, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientlessvpnmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_emailhome:
    def __init__(self):
        self._name = None
        self._emailhome = None
        return
setvpnsessionaction_emailhome.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_emailhome"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="emailhome", aname="_emailhome", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_emailhome, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_emailhomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnsessionaction_clientlessmodeurlencoding:
    def __init__(self):
        self._name = None
        self._clientlessmodeurlencoding = None
        return
setvpnsessionaction_clientlessmodeurlencoding.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientlessmodeurlencoding"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.vpnsessact_urlencodingEnum_Def(pname="clientlessmodeurlencoding", aname="_clientlessmodeurlencoding", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionaction_clientlessmodeurlencoding, encoded="urn:NSConfig")

class setvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
setvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","setvpnsessionaction_clientlessmodeurlencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_httpport:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_httpport.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_httpport"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_httpport, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_winsip:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_winsip.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_winsip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_winsip, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_winsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_dnsvservername:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_dnsvservername.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_dnsvservername"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_dnsvservername, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_splitdns:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_splitdns.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_splitdns"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_splitdns, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_splitdnsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_sesstimeout:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_sesstimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_sesstimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_sesstimeout, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientsecurity:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientsecurity.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecurity"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientsecurity, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecurityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientsecuritygroup:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientsecuritygroup.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritygroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientsecuritygroup, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritygroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientsecuritymessage:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientsecuritymessage.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritymessage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientsecuritymessage, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritymessageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientsecuritylog:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientsecuritylog.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritylog"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientsecuritylog, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientsecuritylogResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_splittunnel:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_splittunnel.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_splittunnel"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_splittunnel, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_splittunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_locallanaccess:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_locallanaccess.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_locallanaccess"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_locallanaccess, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_locallanaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_rfc1918:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_rfc1918.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_rfc1918"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_rfc1918, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_rfc1918Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_spoofiip:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_spoofiip.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_spoofiip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_spoofiip, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_spoofiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_killconnections:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_killconnections.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_killconnections"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_killconnections, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_killconnectionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_transparentinterception:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_transparentinterception.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_transparentinterception"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_transparentinterception, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_transparentinterceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_windowsclienttype:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_windowsclienttype.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_windowsclienttype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_windowsclienttype, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_windowsclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_defaultauthorizationaction:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_defaultauthorizationaction.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_defaultauthorizationaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_defaultauthorizationaction, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_defaultauthorizationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_authorizationgroup:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_authorizationgroup.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_authorizationgroup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_authorizationgroup, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_authorizationgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientidletimeout:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientidletimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientidletimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientidletimeout, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientidletimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_proxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_proxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_proxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_allprotocolproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_allprotocolproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_allprotocolproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_allprotocolproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_allprotocolproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_httpproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_httpproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_httpproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_httpproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_httpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_ftpproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_ftpproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ftpproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_ftpproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ftpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_socksproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_socksproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_socksproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_socksproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_socksproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_gopherproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_gopherproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_gopherproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_gopherproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_gopherproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_sslproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_sslproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_sslproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_sslproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_sslproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_proxyexception:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_proxyexception.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxyexception"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_proxyexception, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxyexceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_proxylocalbypass:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_proxylocalbypass.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxylocalbypass"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_proxylocalbypass, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_proxylocalbypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientcleanupprompt:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientcleanupprompt.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientcleanupprompt"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientcleanupprompt, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientcleanuppromptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_forcecleanup:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_forcecleanup.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcecleanup"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_forcecleanup, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcecleanupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientoptions:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientoptions.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientoptions"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientoptions, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientoptionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientconfiguration:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientconfiguration.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientconfiguration"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientconfiguration, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientconfigurationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_sso:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_sso.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_sso"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_sso, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ssoResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_ssocredential:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_ssocredential.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ssocredential"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_ssocredential, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ssocredentialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_windowsautologon:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_windowsautologon.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_windowsautologon"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_windowsautologon, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_windowsautologonResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_usemip:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_usemip.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_usemip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_usemip, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_usemipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_useiip:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_useiip.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_useiip"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_useiip, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_useiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientdebug:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientdebug.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientdebug"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientdebug, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientdebugResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_loginscript:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_loginscript.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_loginscript"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_loginscript, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_loginscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_logoutscript:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_logoutscript.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_logoutscript"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_logoutscript, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_logoutscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_homepage:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_homepage.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_homepage"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_homepage, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_homepageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_icaproxy:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_icaproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_icaproxy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_icaproxy, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_icaproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_wihome:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_wihome.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_wihome"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_wihome, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_wihomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_wiportalmode:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_wiportalmode.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_wiportalmode"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_wiportalmode, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_wiportalmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientchoices:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientchoices.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientchoices"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientchoices, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientchoicesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_epaclienttype:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_epaclienttype.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_epaclienttype"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_epaclienttype, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_epaclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_iipdnssuffix:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_iipdnssuffix.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_iipdnssuffix"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_iipdnssuffix, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_iipdnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_forcedtimeout:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_forcedtimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcedtimeout"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_forcedtimeout, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcedtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_forcedtimeoutwarning:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_forcedtimeoutwarning.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcedtimeoutwarning"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_forcedtimeoutwarning, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_forcedtimeoutwarningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_ntdomain:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_ntdomain.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ntdomain"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_ntdomain, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_ntdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientlessvpnmode:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientlessvpnmode.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientlessvpnmode"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientlessvpnmode, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientlessvpnmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_emailhome:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_emailhome.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_emailhome"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_emailhome, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_emailhomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class unsetvpnsessionaction_clientlessmodeurlencoding:
    def __init__(self):
        self._name = None
        return
unsetvpnsessionaction_clientlessmodeurlencoding.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientlessmodeurlencoding"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionaction_clientlessmodeurlencoding, encoded="urn:NSConfig")

class unsetvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnsessionaction_clientlessmodeurlencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnsessionactionResponse, encoded="urn:NSConfig")

class getvpnsessionaction:
    def __init__(self):
        self._name = None
        return
getvpnsessionaction.typecode = Struct(pname=("urn:NSConfig","getvpnsessionaction"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnsessionaction, encoded="urn:NSConfig")

class getvpnsessionactionResponse:
    def __init__(self):
        self._return = None
        return
getvpnsessionactionResponse.typecode = Struct(pname=("urn:NSConfig","getvpnsessionactionResponse"), ofwhat=[ns0.getvpnsessionactionResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnsessionactionResponse, encoded="urn:NSConfig")

class setvpnparameter_httpport:
    def __init__(self):
        self._httpport = None
        return
setvpnparameter_httpport.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_httpport"), ofwhat=[ZSI.TC.String(pname="httpport", aname="_httpport", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_httpport, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_winsip:
    def __init__(self):
        self._winsip = None
        return
setvpnparameter_winsip.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_winsip"), ofwhat=[ZSI.TC.String(pname="winsip", aname="_winsip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_winsip, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_winsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_dnsvservername:
    def __init__(self):
        self._dnsvservername = None
        return
setvpnparameter_dnsvservername.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_dnsvservername"), ofwhat=[ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_dnsvservername, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_splitdns:
    def __init__(self):
        self._splitdns = None
        return
setvpnparameter_splitdns.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_splitdns"), ofwhat=[ns0.vpnsessact_splitdnsEnum_Def(pname="splitdns", aname="_splitdns", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_splitdns, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_splitdnsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_sesstimeout:
    def __init__(self):
        self._sesstimeout = None
        return
setvpnparameter_sesstimeout.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_sesstimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_sesstimeout, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientsecurity:
    def __init__(self):
        self._clientsecurity = None
        self._clientsecuritygroup = None
        self._clientsecuritymessage = None
        return
setvpnparameter_clientsecurity.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientsecurity"), ofwhat=[ZSI.TC.String(pname="clientsecurity", aname="_clientsecurity", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecuritygroup", aname="_clientsecuritygroup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientsecurity, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientsecurityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientsecuritylog:
    def __init__(self):
        self._clientsecuritylog = None
        return
setvpnparameter_clientsecuritylog.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientsecuritylog"), ofwhat=[ns0.vpnsessactEnum_Def(pname="clientsecuritylog", aname="_clientsecuritylog", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientsecuritylog, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientsecuritylogResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_splittunnel:
    def __init__(self):
        self._splittunnel = None
        return
setvpnparameter_splittunnel.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_splittunnel"), ofwhat=[ns0.vpnsessact_splittunnelEnum_Def(pname="splittunnel", aname="_splittunnel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_splittunnel, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_splittunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_locallanaccess:
    def __init__(self):
        self._locallanaccess = None
        return
setvpnparameter_locallanaccess.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_locallanaccess"), ofwhat=[ns0.vpnsessact_locallanaccessEnum_Def(pname="locallanaccess", aname="_locallanaccess", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_locallanaccess, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_locallanaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_rfc1918:
    def __init__(self):
        self._rfc1918 = None
        return
setvpnparameter_rfc1918.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_rfc1918"), ofwhat=[ns0.vpnsessactEnum_Def(pname="rfc1918", aname="_rfc1918", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_rfc1918, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_rfc1918Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_spoofiip:
    def __init__(self):
        self._spoofiip = None
        return
setvpnparameter_spoofiip.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_spoofiip"), ofwhat=[ns0.vpnsessactEnum_Def(pname="spoofiip", aname="_spoofiip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_spoofiip, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_spoofiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_killconnections:
    def __init__(self):
        self._killconnections = None
        return
setvpnparameter_killconnections.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_killconnections"), ofwhat=[ns0.vpnsessactEnum_Def(pname="killconnections", aname="_killconnections", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_killconnections, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_killconnectionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_transparentinterception:
    def __init__(self):
        self._transparentinterception = None
        return
setvpnparameter_transparentinterception.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_transparentinterception"), ofwhat=[ns0.vpnsessactEnum_Def(pname="transparentinterception", aname="_transparentinterception", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_transparentinterception, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_transparentinterceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_windowsclienttype:
    def __init__(self):
        self._windowsclienttype = None
        return
setvpnparameter_windowsclienttype.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_windowsclienttype"), ofwhat=[ns0.vpnsessact_clttypeEnum_Def(pname="windowsclienttype", aname="_windowsclienttype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_windowsclienttype, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_windowsclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_defaultauthorizationaction:
    def __init__(self):
        self._defaultauthorizationaction = None
        return
setvpnparameter_defaultauthorizationaction.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_defaultauthorizationaction"), ofwhat=[ns0.allowdenyEnum_Def(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_defaultauthorizationaction, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_defaultauthorizationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_authorizationgroup:
    def __init__(self):
        self._authorizationgroup = None
        return
setvpnparameter_authorizationgroup.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_authorizationgroup"), ofwhat=[ZSI.TC.String(pname="authorizationgroup", aname="_authorizationgroup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_authorizationgroup, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_authorizationgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientidletimeout:
    def __init__(self):
        self._clientidletimeout = None
        return
setvpnparameter_clientidletimeout.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientidletimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="clientidletimeout", aname="_clientidletimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientidletimeout, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientidletimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_proxy:
    def __init__(self):
        self._proxy = None
        return
setvpnparameter_proxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxy"), ofwhat=[ns0.vpnsessact_proxyEnum_Def(pname="proxy", aname="_proxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_proxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_allprotocolproxy:
    def __init__(self):
        self._allprotocolproxy = None
        return
setvpnparameter_allprotocolproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_allprotocolproxy"), ofwhat=[ZSI.TC.String(pname="allprotocolproxy", aname="_allprotocolproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_allprotocolproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_allprotocolproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_httpproxy:
    def __init__(self):
        self._httpproxy = None
        return
setvpnparameter_httpproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_httpproxy"), ofwhat=[ZSI.TC.String(pname="httpproxy", aname="_httpproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_httpproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_httpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_ftpproxy:
    def __init__(self):
        self._ftpproxy = None
        return
setvpnparameter_ftpproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ftpproxy"), ofwhat=[ZSI.TC.String(pname="ftpproxy", aname="_ftpproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_ftpproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ftpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_socksproxy:
    def __init__(self):
        self._socksproxy = None
        return
setvpnparameter_socksproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_socksproxy"), ofwhat=[ZSI.TC.String(pname="socksproxy", aname="_socksproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_socksproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_socksproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_gopherproxy:
    def __init__(self):
        self._gopherproxy = None
        return
setvpnparameter_gopherproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_gopherproxy"), ofwhat=[ZSI.TC.String(pname="gopherproxy", aname="_gopherproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_gopherproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_gopherproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_sslproxy:
    def __init__(self):
        self._sslproxy = None
        return
setvpnparameter_sslproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_sslproxy"), ofwhat=[ZSI.TC.String(pname="sslproxy", aname="_sslproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_sslproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_sslproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_proxyexception:
    def __init__(self):
        self._proxyexception = None
        return
setvpnparameter_proxyexception.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxyexception"), ofwhat=[ZSI.TC.String(pname="proxyexception", aname="_proxyexception", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_proxyexception, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxyexceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_proxylocalbypass:
    def __init__(self):
        self._proxylocalbypass = None
        return
setvpnparameter_proxylocalbypass.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxylocalbypass"), ofwhat=[ns0.vpnsessact_enabledisabledEnum_Def(pname="proxylocalbypass", aname="_proxylocalbypass", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_proxylocalbypass, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_proxylocalbypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientcleanupprompt:
    def __init__(self):
        self._clientcleanupprompt = None
        return
setvpnparameter_clientcleanupprompt.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientcleanupprompt"), ofwhat=[ns0.vpnsessactEnum_Def(pname="clientcleanupprompt", aname="_clientcleanupprompt", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientcleanupprompt, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientcleanuppromptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_forcecleanup:
    def __init__(self):
        self._forcecleanup = None
        return
setvpnparameter_forcecleanup.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcecleanup"), ofwhat=[ns0.forceclnupEnum_Def(pname="forcecleanup", aname="_forcecleanup", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_forcecleanup, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcecleanupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientoptions:
    def __init__(self):
        self._clientoptions = None
        return
setvpnparameter_clientoptions.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientoptions"), ofwhat=[ns0.clntoptionsEnum_Def(pname="clientoptions", aname="_clientoptions", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientoptions, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientoptionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientconfiguration:
    def __init__(self):
        self._clientconfiguration = None
        return
setvpnparameter_clientconfiguration.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientconfiguration"), ofwhat=[ns0.clntconfEnum_Def(pname="clientconfiguration", aname="_clientconfiguration", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientconfiguration, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientconfigurationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_sso:
    def __init__(self):
        self._sso = None
        return
setvpnparameter_sso.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_sso"), ofwhat=[ns0.vpnsessactEnum_Def(pname="sso", aname="_sso", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_sso, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ssoResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_ssocredential:
    def __init__(self):
        self._ssocredential = None
        return
setvpnparameter_ssocredential.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ssocredential"), ofwhat=[ns0.vpnsessact_sso_credential_indexEnum_Def(pname="ssocredential", aname="_ssocredential", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_ssocredential, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ssocredentialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_windowsautologon:
    def __init__(self):
        self._windowsautologon = None
        return
setvpnparameter_windowsautologon.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_windowsautologon"), ofwhat=[ns0.vpnsessactEnum_Def(pname="windowsautologon", aname="_windowsautologon", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_windowsautologon, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_windowsautologonResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_usemip:
    def __init__(self):
        self._usemip = None
        return
setvpnparameter_usemip.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_usemip"), ofwhat=[ns0.vpnsessact_usemipEnum_Def(pname="usemip", aname="_usemip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_usemip, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_usemipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_useiip:
    def __init__(self):
        self._useiip = None
        return
setvpnparameter_useiip.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_useiip"), ofwhat=[ns0.vpnsessact_useiipEnum_Def(pname="useiip", aname="_useiip", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_useiip, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_useiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientdebug:
    def __init__(self):
        self._clientdebug = None
        return
setvpnparameter_clientdebug.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientdebug"), ofwhat=[ns0.clntdbgEnum_Def(pname="clientdebug", aname="_clientdebug", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientdebug, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientdebugResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_loginscript:
    def __init__(self):
        self._loginscript = None
        return
setvpnparameter_loginscript.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_loginscript"), ofwhat=[ZSI.TC.String(pname="loginscript", aname="_loginscript", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_loginscript, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_loginscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_logoutscript:
    def __init__(self):
        self._logoutscript = None
        return
setvpnparameter_logoutscript.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_logoutscript"), ofwhat=[ZSI.TC.String(pname="logoutscript", aname="_logoutscript", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_logoutscript, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_logoutscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_homepage:
    def __init__(self):
        self._homepage = None
        return
setvpnparameter_homepage.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_homepage"), ofwhat=[ZSI.TC.String(pname="homepage", aname="_homepage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_homepage, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_homepageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_icaproxy:
    def __init__(self):
        self._icaproxy = None
        return
setvpnparameter_icaproxy.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_icaproxy"), ofwhat=[ns0.vpnsessactEnum_Def(pname="icaproxy", aname="_icaproxy", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_icaproxy, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_icaproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_wihome:
    def __init__(self):
        self._wihome = None
        return
setvpnparameter_wihome.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_wihome"), ofwhat=[ZSI.TC.String(pname="wihome", aname="_wihome", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_wihome, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_wihomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_wiportalmode:
    def __init__(self):
        self._wiportalmode = None
        return
setvpnparameter_wiportalmode.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_wiportalmode"), ofwhat=[ns0.vpnsessact_portal_wimodeEnum_Def(pname="wiportalmode", aname="_wiportalmode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_wiportalmode, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_wiportalmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientchoices:
    def __init__(self):
        self._clientchoices = None
        return
setvpnparameter_clientchoices.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientchoices"), ofwhat=[ns0.vpnsessactEnum_Def(pname="clientchoices", aname="_clientchoices", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientchoices, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientchoicesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_epaclienttype:
    def __init__(self):
        self._epaclienttype = None
        return
setvpnparameter_epaclienttype.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_epaclienttype"), ofwhat=[ns0.vpnsessact_clttypeEnum_Def(pname="epaclienttype", aname="_epaclienttype", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_epaclienttype, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_epaclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_iipdnssuffix:
    def __init__(self):
        self._iipdnssuffix = None
        return
setvpnparameter_iipdnssuffix.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_iipdnssuffix"), ofwhat=[ZSI.TC.String(pname="iipdnssuffix", aname="_iipdnssuffix", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_iipdnssuffix, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_iipdnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_forcedtimeout:
    def __init__(self):
        self._forcedtimeout = None
        return
setvpnparameter_forcedtimeout.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcedtimeout"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="forcedtimeout", aname="_forcedtimeout", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_forcedtimeout, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcedtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_forcedtimeoutwarning:
    def __init__(self):
        self._forcedtimeoutwarning = None
        return
setvpnparameter_forcedtimeoutwarning.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcedtimeoutwarning"), ofwhat=[ZSI.TCnumbers.IunsignedInt(pname="forcedtimeoutwarning", aname="_forcedtimeoutwarning", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_forcedtimeoutwarning, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_forcedtimeoutwarningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_ntdomain:
    def __init__(self):
        self._ntdomain = None
        return
setvpnparameter_ntdomain.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ntdomain"), ofwhat=[ZSI.TC.String(pname="ntdomain", aname="_ntdomain", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_ntdomain, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_ntdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientlessvpnmode:
    def __init__(self):
        self._clientlessvpnmode = None
        return
setvpnparameter_clientlessvpnmode.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientlessvpnmode"), ofwhat=[ns0.vpnsessact_cvpnmodeEnum_Def(pname="clientlessvpnmode", aname="_clientlessvpnmode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientlessvpnmode, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientlessvpnmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_clientlessmodeurlencoding:
    def __init__(self):
        self._clientlessmodeurlencoding = None
        return
setvpnparameter_clientlessmodeurlencoding.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientlessmodeurlencoding"), ofwhat=[ns0.vpnsessact_urlencodingEnum_Def(pname="clientlessmodeurlencoding", aname="_clientlessmodeurlencoding", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_clientlessmodeurlencoding, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_clientlessmodeurlencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class setvpnparameter_emailhome:
    def __init__(self):
        self._emailhome = None
        return
setvpnparameter_emailhome.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_emailhome"), ofwhat=[ZSI.TC.String(pname="emailhome", aname="_emailhome", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameter_emailhome, encoded="urn:NSConfig")

class setvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
setvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","setvpnparameter_emailhomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_httpport:
    def __init__(self):
        return
unsetvpnparameter_httpport.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_httpport"), ofwhat=[], pyclass=unsetvpnparameter_httpport, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_httpportResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_winsip:
    def __init__(self):
        return
unsetvpnparameter_winsip.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_winsip"), ofwhat=[], pyclass=unsetvpnparameter_winsip, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_winsipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_dnsvservername:
    def __init__(self):
        return
unsetvpnparameter_dnsvservername.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_dnsvservername"), ofwhat=[], pyclass=unsetvpnparameter_dnsvservername, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_dnsvservernameResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_splitdns:
    def __init__(self):
        return
unsetvpnparameter_splitdns.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_splitdns"), ofwhat=[], pyclass=unsetvpnparameter_splitdns, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_splitdnsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_sesstimeout:
    def __init__(self):
        return
unsetvpnparameter_sesstimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_sesstimeout"), ofwhat=[], pyclass=unsetvpnparameter_sesstimeout, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_sesstimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientsecurity:
    def __init__(self):
        return
unsetvpnparameter_clientsecurity.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecurity"), ofwhat=[], pyclass=unsetvpnparameter_clientsecurity, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecurityResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientsecuritygroup:
    def __init__(self):
        return
unsetvpnparameter_clientsecuritygroup.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritygroup"), ofwhat=[], pyclass=unsetvpnparameter_clientsecuritygroup, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritygroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientsecuritymessage:
    def __init__(self):
        return
unsetvpnparameter_clientsecuritymessage.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritymessage"), ofwhat=[], pyclass=unsetvpnparameter_clientsecuritymessage, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritymessageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientsecuritylog:
    def __init__(self):
        return
unsetvpnparameter_clientsecuritylog.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritylog"), ofwhat=[], pyclass=unsetvpnparameter_clientsecuritylog, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientsecuritylogResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_authorizationgroup:
    def __init__(self):
        return
unsetvpnparameter_authorizationgroup.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_authorizationgroup"), ofwhat=[], pyclass=unsetvpnparameter_authorizationgroup, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_authorizationgroupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientidletimeout:
    def __init__(self):
        return
unsetvpnparameter_clientidletimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientidletimeout"), ofwhat=[], pyclass=unsetvpnparameter_clientidletimeout, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientidletimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_allprotocolproxy:
    def __init__(self):
        return
unsetvpnparameter_allprotocolproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_allprotocolproxy"), ofwhat=[], pyclass=unsetvpnparameter_allprotocolproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_allprotocolproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_httpproxy:
    def __init__(self):
        return
unsetvpnparameter_httpproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_httpproxy"), ofwhat=[], pyclass=unsetvpnparameter_httpproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_httpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_ftpproxy:
    def __init__(self):
        return
unsetvpnparameter_ftpproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ftpproxy"), ofwhat=[], pyclass=unsetvpnparameter_ftpproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ftpproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_socksproxy:
    def __init__(self):
        return
unsetvpnparameter_socksproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_socksproxy"), ofwhat=[], pyclass=unsetvpnparameter_socksproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_socksproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_gopherproxy:
    def __init__(self):
        return
unsetvpnparameter_gopherproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_gopherproxy"), ofwhat=[], pyclass=unsetvpnparameter_gopherproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_gopherproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_sslproxy:
    def __init__(self):
        return
unsetvpnparameter_sslproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_sslproxy"), ofwhat=[], pyclass=unsetvpnparameter_sslproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_sslproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_proxyexception:
    def __init__(self):
        return
unsetvpnparameter_proxyexception.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxyexception"), ofwhat=[], pyclass=unsetvpnparameter_proxyexception, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxyexceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_forcecleanup:
    def __init__(self):
        return
unsetvpnparameter_forcecleanup.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcecleanup"), ofwhat=[], pyclass=unsetvpnparameter_forcecleanup, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcecleanupResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientoptions:
    def __init__(self):
        return
unsetvpnparameter_clientoptions.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientoptions"), ofwhat=[], pyclass=unsetvpnparameter_clientoptions, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientoptionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientconfiguration:
    def __init__(self):
        return
unsetvpnparameter_clientconfiguration.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientconfiguration"), ofwhat=[], pyclass=unsetvpnparameter_clientconfiguration, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientconfigurationResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_loginscript:
    def __init__(self):
        return
unsetvpnparameter_loginscript.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_loginscript"), ofwhat=[], pyclass=unsetvpnparameter_loginscript, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_loginscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_logoutscript:
    def __init__(self):
        return
unsetvpnparameter_logoutscript.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_logoutscript"), ofwhat=[], pyclass=unsetvpnparameter_logoutscript, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_logoutscriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_homepage:
    def __init__(self):
        return
unsetvpnparameter_homepage.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_homepage"), ofwhat=[], pyclass=unsetvpnparameter_homepage, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_homepageResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_wihome:
    def __init__(self):
        return
unsetvpnparameter_wihome.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_wihome"), ofwhat=[], pyclass=unsetvpnparameter_wihome, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_wihomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_wiportalmode:
    def __init__(self):
        return
unsetvpnparameter_wiportalmode.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_wiportalmode"), ofwhat=[], pyclass=unsetvpnparameter_wiportalmode, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_wiportalmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_iipdnssuffix:
    def __init__(self):
        return
unsetvpnparameter_iipdnssuffix.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_iipdnssuffix"), ofwhat=[], pyclass=unsetvpnparameter_iipdnssuffix, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_iipdnssuffixResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_forcedtimeout:
    def __init__(self):
        return
unsetvpnparameter_forcedtimeout.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcedtimeout"), ofwhat=[], pyclass=unsetvpnparameter_forcedtimeout, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcedtimeoutResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_forcedtimeoutwarning:
    def __init__(self):
        return
unsetvpnparameter_forcedtimeoutwarning.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcedtimeoutwarning"), ofwhat=[], pyclass=unsetvpnparameter_forcedtimeoutwarning, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_forcedtimeoutwarningResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_ntdomain:
    def __init__(self):
        return
unsetvpnparameter_ntdomain.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ntdomain"), ofwhat=[], pyclass=unsetvpnparameter_ntdomain, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ntdomainResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientlessvpnmode:
    def __init__(self):
        return
unsetvpnparameter_clientlessvpnmode.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientlessvpnmode"), ofwhat=[], pyclass=unsetvpnparameter_clientlessvpnmode, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientlessvpnmodeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_emailhome:
    def __init__(self):
        return
unsetvpnparameter_emailhome.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_emailhome"), ofwhat=[], pyclass=unsetvpnparameter_emailhome, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_emailhomeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientlessmodeurlencoding:
    def __init__(self):
        return
unsetvpnparameter_clientlessmodeurlencoding.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientlessmodeurlencoding"), ofwhat=[], pyclass=unsetvpnparameter_clientlessmodeurlencoding, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientlessmodeurlencodingResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_splittunnel:
    def __init__(self):
        return
unsetvpnparameter_splittunnel.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_splittunnel"), ofwhat=[], pyclass=unsetvpnparameter_splittunnel, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_splittunnelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_locallanaccess:
    def __init__(self):
        return
unsetvpnparameter_locallanaccess.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_locallanaccess"), ofwhat=[], pyclass=unsetvpnparameter_locallanaccess, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_locallanaccessResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_rfc1918:
    def __init__(self):
        return
unsetvpnparameter_rfc1918.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_rfc1918"), ofwhat=[], pyclass=unsetvpnparameter_rfc1918, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_rfc1918Response"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_spoofiip:
    def __init__(self):
        return
unsetvpnparameter_spoofiip.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_spoofiip"), ofwhat=[], pyclass=unsetvpnparameter_spoofiip, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_spoofiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_killconnections:
    def __init__(self):
        return
unsetvpnparameter_killconnections.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_killconnections"), ofwhat=[], pyclass=unsetvpnparameter_killconnections, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_killconnectionsResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_transparentinterception:
    def __init__(self):
        return
unsetvpnparameter_transparentinterception.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_transparentinterception"), ofwhat=[], pyclass=unsetvpnparameter_transparentinterception, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_transparentinterceptionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_windowsclienttype:
    def __init__(self):
        return
unsetvpnparameter_windowsclienttype.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_windowsclienttype"), ofwhat=[], pyclass=unsetvpnparameter_windowsclienttype, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_windowsclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_defaultauthorizationaction:
    def __init__(self):
        return
unsetvpnparameter_defaultauthorizationaction.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_defaultauthorizationaction"), ofwhat=[], pyclass=unsetvpnparameter_defaultauthorizationaction, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_defaultauthorizationactionResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_proxy:
    def __init__(self):
        return
unsetvpnparameter_proxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxy"), ofwhat=[], pyclass=unsetvpnparameter_proxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_proxylocalbypass:
    def __init__(self):
        return
unsetvpnparameter_proxylocalbypass.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxylocalbypass"), ofwhat=[], pyclass=unsetvpnparameter_proxylocalbypass, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_proxylocalbypassResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientcleanupprompt:
    def __init__(self):
        return
unsetvpnparameter_clientcleanupprompt.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientcleanupprompt"), ofwhat=[], pyclass=unsetvpnparameter_clientcleanupprompt, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientcleanuppromptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_sso:
    def __init__(self):
        return
unsetvpnparameter_sso.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_sso"), ofwhat=[], pyclass=unsetvpnparameter_sso, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ssoResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_ssocredential:
    def __init__(self):
        return
unsetvpnparameter_ssocredential.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ssocredential"), ofwhat=[], pyclass=unsetvpnparameter_ssocredential, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_ssocredentialResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_windowsautologon:
    def __init__(self):
        return
unsetvpnparameter_windowsautologon.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_windowsautologon"), ofwhat=[], pyclass=unsetvpnparameter_windowsautologon, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_windowsautologonResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_usemip:
    def __init__(self):
        return
unsetvpnparameter_usemip.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_usemip"), ofwhat=[], pyclass=unsetvpnparameter_usemip, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_usemipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_useiip:
    def __init__(self):
        return
unsetvpnparameter_useiip.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_useiip"), ofwhat=[], pyclass=unsetvpnparameter_useiip, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_useiipResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientdebug:
    def __init__(self):
        return
unsetvpnparameter_clientdebug.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientdebug"), ofwhat=[], pyclass=unsetvpnparameter_clientdebug, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientdebugResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_icaproxy:
    def __init__(self):
        return
unsetvpnparameter_icaproxy.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_icaproxy"), ofwhat=[], pyclass=unsetvpnparameter_icaproxy, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_icaproxyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_clientchoices:
    def __init__(self):
        return
unsetvpnparameter_clientchoices.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientchoices"), ofwhat=[], pyclass=unsetvpnparameter_clientchoices, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_clientchoicesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class unsetvpnparameter_epaclienttype:
    def __init__(self):
        return
unsetvpnparameter_epaclienttype.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_epaclienttype"), ofwhat=[], pyclass=unsetvpnparameter_epaclienttype, encoded="urn:NSConfig")

class unsetvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnparameter_epaclienttypeResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnparameterResponse, encoded="urn:NSConfig")

class getvpnparameter:
    def __init__(self):
        return
getvpnparameter.typecode = Struct(pname=("urn:NSConfig","getvpnparameter"), ofwhat=[], pyclass=getvpnparameter, encoded="urn:NSConfig")

class getvpnparameterResponse:
    def __init__(self):
        self._return = None
        return
getvpnparameterResponse.typecode = Struct(pname=("urn:NSConfig","getvpnparameterResponse"), ofwhat=[ns0.getvpnparameterResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnparameterResponse, encoded="urn:NSConfig")

class addvpnclientlessaccesspolicy:
    def __init__(self):
        self._name = None
        self._rule = None
        self._profilename = None
        return
addvpnclientlessaccesspolicy.typecode = Struct(pname=("urn:NSConfig","addvpnclientlessaccesspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="rule", aname="_rule", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnclientlessaccesspolicy, encoded="urn:NSConfig")

class addvpnclientlessaccesspolicyResponse:
    def __init__(self):
        self._return = None
        return
addvpnclientlessaccesspolicyResponse.typecode = Struct(pname=("urn:NSConfig","addvpnclientlessaccesspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnclientlessaccesspolicyResponse, encoded="urn:NSConfig")

class rmvpnclientlessaccesspolicy:
    def __init__(self):
        self._name = None
        return
rmvpnclientlessaccesspolicy.typecode = Struct(pname=("urn:NSConfig","rmvpnclientlessaccesspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnclientlessaccesspolicy, encoded="urn:NSConfig")

class rmvpnclientlessaccesspolicyResponse:
    def __init__(self):
        self._return = None
        return
rmvpnclientlessaccesspolicyResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnclientlessaccesspolicyResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnclientlessaccesspolicyResponse, encoded="urn:NSConfig")

class getvpnclientlessaccesspolicy:
    def __init__(self):
        self._name = None
        return
getvpnclientlessaccesspolicy.typecode = Struct(pname=("urn:NSConfig","getvpnclientlessaccesspolicy"), ofwhat=[ZSI.TC.String(pname="name", aname="_name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnclientlessaccesspolicy, encoded="urn:NSConfig")

class getvpnclientlessaccesspolicyResponse:
    def __init__(self):
        self._return = None
        return
getvpnclientlessaccesspolicyResponse.typecode = Struct(pname=("urn:NSConfig","getvpnclientlessaccesspolicyResponse"), ofwhat=[ns0.getvpnclientlessaccesspolicyResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnclientlessaccesspolicyResponse, encoded="urn:NSConfig")

class addvpnclientlessaccessprofile:
    def __init__(self):
        self._profilename = None
        return
addvpnclientlessaccessprofile.typecode = Struct(pname=("urn:NSConfig","addvpnclientlessaccessprofile"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnclientlessaccessprofile, encoded="urn:NSConfig")

class addvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
addvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","addvpnclientlessaccessprofileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=addvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class rmvpnclientlessaccessprofile:
    def __init__(self):
        self._profilename = None
        return
rmvpnclientlessaccessprofile.typecode = Struct(pname=("urn:NSConfig","rmvpnclientlessaccessprofile"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnclientlessaccessprofile, encoded="urn:NSConfig")

class rmvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
rmvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","rmvpnclientlessaccessprofileResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=rmvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_urlrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        self._urlrewritepolicylabel = None
        return
setvpnclientlessaccessprofile_urlrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_urlrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="urlrewritepolicylabel", aname="_urlrewritepolicylabel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_urlrewritepolicylabel, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_urlrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_javascriptrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        self._javascriptrewritepolicylabel = None
        return
setvpnclientlessaccessprofile_javascriptrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_javascriptrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="javascriptrewritepolicylabel", aname="_javascriptrewritepolicylabel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_javascriptrewritepolicylabel, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_javascriptrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_reqhdrrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        self._reqhdrrewritepolicylabel = None
        return
setvpnclientlessaccessprofile_reqhdrrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_reqhdrrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reqhdrrewritepolicylabel", aname="_reqhdrrewritepolicylabel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_reqhdrrewritepolicylabel, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_reqhdrrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_reshdrrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        self._reshdrrewritepolicylabel = None
        return
setvpnclientlessaccessprofile_reshdrrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_reshdrrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="reshdrrewritepolicylabel", aname="_reshdrrewritepolicylabel", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_reshdrrewritepolicylabel, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_reshdrrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_regexforfindingurlinjavascript:
    def __init__(self):
        self._profilename = None
        self._regexforfindingurlinjavascript = None
        return
setvpnclientlessaccessprofile_regexforfindingurlinjavascript.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinjavascript"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regexforfindingurlinjavascript", aname="_regexforfindingurlinjavascript", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_regexforfindingurlinjavascript, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinjavascriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_regexforfindingurlincss:
    def __init__(self):
        self._profilename = None
        self._regexforfindingurlincss = None
        return
setvpnclientlessaccessprofile_regexforfindingurlincss.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlincss"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regexforfindingurlincss", aname="_regexforfindingurlincss", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_regexforfindingurlincss, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlincssResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_regexforfindingurlinxcomponent:
    def __init__(self):
        self._profilename = None
        self._regexforfindingurlinxcomponent = None
        return
setvpnclientlessaccessprofile_regexforfindingurlinxcomponent.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinxcomponent"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regexforfindingurlinxcomponent", aname="_regexforfindingurlinxcomponent", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_regexforfindingurlinxcomponent, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinxcomponentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_regexforfindingurlinxml:
    def __init__(self):
        self._profilename = None
        self._regexforfindingurlinxml = None
        return
setvpnclientlessaccessprofile_regexforfindingurlinxml.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinxml"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="regexforfindingurlinxml", aname="_regexforfindingurlinxml", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_regexforfindingurlinxml, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_regexforfindingurlinxmlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class setvpnclientlessaccessprofile_clientconsumedcookies:
    def __init__(self):
        self._profilename = None
        self._clientconsumedcookies = None
        return
setvpnclientlessaccessprofile_clientconsumedcookies.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_clientconsumedcookies"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="clientconsumedcookies", aname="_clientconsumedcookies", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofile_clientconsumedcookies, encoded="urn:NSConfig")

class setvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
setvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","setvpnclientlessaccessprofile_clientconsumedcookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=setvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_urlrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_urlrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_urlrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_urlrewritepolicylabel, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_urlrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_javascriptrewritepolicylabel, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_javascriptrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabel, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_reqhdrrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_reshdrrewritepolicylabel, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_reshdrrewritepolicylabelResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_regexforfindingurlinjavascript, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinjavascriptResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_regexforfindingurlincss:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_regexforfindingurlincss.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlincss"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_regexforfindingurlincss, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlincssResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponent, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinxcomponentResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_regexforfindingurlinxml:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_regexforfindingurlinxml.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinxml"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_regexforfindingurlinxml, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_regexforfindingurlinxmlResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofile_clientconsumedcookies:
    def __init__(self):
        self._profilename = None
        return
unsetvpnclientlessaccessprofile_clientconsumedcookies.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_clientconsumedcookies"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofile_clientconsumedcookies, encoded="urn:NSConfig")

class unsetvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
unsetvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","unsetvpnclientlessaccessprofile_clientconsumedcookiesResponse"), ofwhat=[ns0.simpleResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=unsetvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")

class getvpnclientlessaccessprofile:
    def __init__(self):
        self._profilename = None
        return
getvpnclientlessaccessprofile.typecode = Struct(pname=("urn:NSConfig","getvpnclientlessaccessprofile"), ofwhat=[ZSI.TC.String(pname="profilename", aname="_profilename", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnclientlessaccessprofile, encoded="urn:NSConfig")

class getvpnclientlessaccessprofileResponse:
    def __init__(self):
        self._return = None
        return
getvpnclientlessaccessprofileResponse.typecode = Struct(pname=("urn:NSConfig","getvpnclientlessaccessprofileResponse"), ofwhat=[ns0.getvpnclientlessaccessprofileResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=getvpnclientlessaccessprofileResponse, encoded="urn:NSConfig")
